[
    {
        "question_id": 1,
        "db_id": "superhero",
        "question": "Which superheroes have a Intelligence attribute value of less than 50? durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "difficulty": "simple",
        "raw_question": "Which superheroes have a Intelligence attribute value of less than 50?"
    },
    {
        "question_id": 2,
        "db_id": "superhero",
        "question": "What is the hero's full name with the highest attribute in Intelligence? highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the hero's full name with the highest attribute in Intelligence?"
    },
    {
        "question_id": 3,
        "db_id": "superhero",
        "question": "Which superhero has the most Intelligence published by Dark Horse Comics? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which superhero has the most Intelligence published by Dark Horse Comics?"
    },
    {
        "question_id": 4,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Favorite Question.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Favorite Question.'"
    },
    {
        "question_id": 5,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Favorite Question Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Favorite Question Badges."
    },
    {
        "question_id": 6,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Favorite Question badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Favorite Question badge."
    },
    {
        "question_id": 7,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Favorite Question badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Favorite Question badge?"
    },
    {
        "question_id": 8,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Research Assistant.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Research Assistant.'"
    },
    {
        "question_id": 9,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Research Assistant Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Research Assistant Badges."
    },
    {
        "question_id": 10,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Research Assistant badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Research Assistant badge."
    },
    {
        "question_id": 11,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Research Assistant badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Research Assistant badge?"
    },
    {
        "question_id": 12,
        "db_id": "student_club",
        "question": "How much did the Student_Club members spend on Advertisement in September Meeting? amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
        "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
        "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
        "difficulty": "simple",
        "raw_question": "How much did the Student_Club members spend on Advertisement in September Meeting?"
    },
    {
        "question_id": 13,
        "db_id": "student_club",
        "question": "With the biggest budget for the \"Advertisement\", what was the remaining of it? remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "SQL": "SELECT remaining FROM budget WHERE category = 'Advertisement' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Advertisement' )",
        "difficulty": "simple",
        "raw_question": "With the biggest budget for the \"Advertisement\", what was the remaining of it?"
    },
    {
        "question_id": 14,
        "db_id": "student_club",
        "question": "Name the event with the highest amount spent on Advertisement. Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Name the event with the highest amount spent on Advertisement."
    },
    {
        "question_id": 15,
        "db_id": "student_club",
        "question": "List the name of events with less than average Advertisement cost. name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Advertisement' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "difficulty": "simple",
        "raw_question": "List the name of events with less than average Advertisement cost."
    },
    {
        "question_id": 16,
        "db_id": "student_club",
        "question": "List the event names which were budgeted for the Advertisement. budgeted for food refers to category = 'Food'",
        "evidence": "budgeted for food refers to category = 'Food'",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement'",
        "difficulty": "simple",
        "raw_question": "List the event names which were budgeted for the Advertisement."
    },
    {
        "question_id": 17,
        "db_id": "student_club",
        "question": "Calculate the total amount spent on Advertisement and list the name of the event they were spent on. total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' GROUP BY T2.event_name",
        "difficulty": "simple",
        "raw_question": "Calculate the total amount spent on Advertisement and list the name of the event they were spent on."
    },
    {
        "question_id": 18,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Richard Wright. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Richard Wright'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Richard Wright."
    },
    {
        "question_id": 19,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Richard Wright cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Richard Wright'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Richard Wright cost in total?"
    },
    {
        "question_id": 20,
        "db_id": "card_games",
        "question": "Is there any card from Richard Wright artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Richard Wright' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Richard Wright artist in pauper format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 21,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Richard Wright created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Richard Wright'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Richard Wright created?"
    },
    {
        "question_id": 22,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Richard Wright? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Richard Wright' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Richard Wright? List them in descending order of dates."
    },
    {
        "question_id": 23,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Richard Wright worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Richard Wright'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Richard Wright worked on and find any banned cards if there are any."
    },
    {
        "question_id": 24,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Monte Michael Moore. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Monte Michael Moore'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Monte Michael Moore."
    },
    {
        "question_id": 25,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Monte Michael Moore cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Monte Michael Moore'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Monte Michael Moore cost in total?"
    },
    {
        "question_id": 26,
        "db_id": "card_games",
        "question": "Is there any card from Monte Michael Moore artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Monte Michael Moore' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Monte Michael Moore artist in pauper format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 27,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Monte Michael Moore created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Monte Michael Moore'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Monte Michael Moore created?"
    },
    {
        "question_id": 28,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Monte Michael Moore? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Monte Michael Moore' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Monte Michael Moore? List them in descending order of dates."
    },
    {
        "question_id": 29,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Monte Michael Moore worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Monte Michael Moore'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Monte Michael Moore worked on and find any banned cards if there are any."
    },
    {
        "question_id": 30,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Level Up?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Level Up'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Level Up?"
    },
    {
        "question_id": 31,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Deal Damage'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Deal Damage'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Deal Damage'?"
    },
    {
        "question_id": 32,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Deal Damage\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Deal Damage'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Deal Damage\"?"
    },
    {
        "question_id": 33,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Deal Damage\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Deal Damage'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Deal Damage\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 34,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Deal Damage\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Deal Damage'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Deal Damage\" in it?"
    },
    {
        "question_id": 35,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Defense of the Heart'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Defense of the Heart'?"
    },
    {
        "question_id": 36,
        "db_id": "card_games",
        "question": "What type of promotion is of card 'Defense of the Heart'? card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "SQL": "SELECT promoTypes FROM cards WHERE name = 'Defense of the Heart' AND promoTypes IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What type of promotion is of card 'Defense of the Heart'?"
    },
    {
        "question_id": 37,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Defense of the Heart\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Defense of the Heart\"?"
    },
    {
        "question_id": 38,
        "db_id": "card_games",
        "question": "What is the status of card \"Defense of the Heart\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Defense of the Heart\"?"
    },
    {
        "question_id": 39,
        "db_id": "card_games",
        "question": "What is the type of card \"Defense of the Heart\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Defense of the Heart\"?"
    },
    {
        "question_id": 40,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Defense of the Heart\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Defense of the Heart\"?"
    },
    {
        "question_id": 41,
        "db_id": "card_games",
        "question": "Write down the ruling of Defense of the Heart. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Defense of the Heart."
    },
    {
        "question_id": 42,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Defense of the Heart\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Defense of the Heart\"?"
    },
    {
        "question_id": 43,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Defense of the Heart\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Defense of the Heart\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 44,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Defense of the Heart' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Defense of the Heart' created?"
    },
    {
        "question_id": 45,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Defense of the Heart\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Defense of the Heart'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Defense of the Heart\" in it?"
    },
    {
        "question_id": 46,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Defense of the Heart\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Defense of the Heart' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Defense of the Heart\" is in?"
    },
    {
        "question_id": 47,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Precinct Captain'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Precinct Captain'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Precinct Captain'?"
    },
    {
        "question_id": 48,
        "db_id": "card_games",
        "question": "What is the status of card \"Precinct Captain\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Precinct Captain\"?"
    },
    {
        "question_id": 49,
        "db_id": "card_games",
        "question": "What is the type of card \"Precinct Captain\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Precinct Captain\"?"
    },
    {
        "question_id": 50,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Precinct Captain\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Precinct Captain\"?"
    },
    {
        "question_id": 51,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Precinct Captain\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Precinct Captain'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Precinct Captain\"?"
    },
    {
        "question_id": 52,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Precinct Captain\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Precinct Captain'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Precinct Captain\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 53,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Precinct Captain\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Precinct Captain'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Precinct Captain\" in it?"
    },
    {
        "question_id": 54,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Precinct Captain\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Precinct Captain' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Precinct Captain\" is in?"
    },
    {
        "question_id": 55,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Precinct Captain\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Precinct Captain' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Precinct Captain\" is in it."
    },
    {
        "question_id": 56,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Enchant Permanent and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Permanent'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Enchant Permanent and the date of rulings for these cards."
    },
    {
        "question_id": 57,
        "db_id": "formula_1",
        "question": "Please list the year during which the race is held on circuits in New York State. Shanghai is a name of location;",
        "evidence": "Shanghai is a name of location;",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'New York State'",
        "difficulty": "simple",
        "raw_question": "Please list the year during which the race is held on circuits in New York State."
    },
    {
        "question_id": 58,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Bahrain International Circuit be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Bahrain International Circuit be found?"
    },
    {
        "question_id": 59,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Bahrain International Circuit? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Bahrain International Circuit?"
    },
    {
        "question_id": 60,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Bahrain International Circuit.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Bahrain International Circuit."
    },
    {
        "question_id": 61,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Bahrain International Circuit? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Bahrain International Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Bahrain International Circuit?"
    },
    {
        "question_id": 62,
        "db_id": "formula_1",
        "question": "What's the reference name of Bahrain International Circuit? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Bahrain International Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Bahrain International Circuit?"
    },
    {
        "question_id": 63,
        "db_id": "formula_1",
        "question": "Please list all the years that Bahrain International Circuit was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Bahrain International Circuit was used in a Formula_1 race."
    },
    {
        "question_id": 64,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Bahrain International Circuit. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Bahrain International Circuit."
    },
    {
        "question_id": 65,
        "db_id": "formula_1",
        "question": "In which location does the Bahrain International Circuit circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Bahrain International Circuit'",
        "difficulty": "simple",
        "raw_question": "In which location does the Bahrain International Circuit circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 66,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Okayama International Circuit be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Okayama International Circuit be found?"
    },
    {
        "question_id": 67,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Okayama International Circuit? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Okayama International Circuit?"
    },
    {
        "question_id": 68,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Okayama International Circuit.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Okayama International Circuit."
    },
    {
        "question_id": 69,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Okayama International Circuit? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Okayama International Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Okayama International Circuit?"
    },
    {
        "question_id": 70,
        "db_id": "formula_1",
        "question": "What's the reference name of Okayama International Circuit? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Okayama International Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Okayama International Circuit?"
    },
    {
        "question_id": 71,
        "db_id": "formula_1",
        "question": "Please list all the years that Okayama International Circuit was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Okayama International Circuit was used in a Formula_1 race."
    },
    {
        "question_id": 72,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Okayama International Circuit. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Okayama International Circuit."
    },
    {
        "question_id": 73,
        "db_id": "formula_1",
        "question": "In which location does the Okayama International Circuit circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Okayama International Circuit'",
        "difficulty": "simple",
        "raw_question": "In which location does the Okayama International Circuit circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 74,
        "db_id": "formula_1",
        "question": "Which of the New Zealand constructor got the highest point to date? Give its introduction website? introduction website refers to url; Italian is a nationality",
        "evidence": "introduction website refers to url; Italian is a nationality",
        "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'New Zealand' ORDER BY T2.points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which of the New Zealand constructor got the highest point to date? Give its introduction website?"
    },
    {
        "question_id": 75,
        "db_id": "financial",
        "question": "For the first client who opened his/her account in north Bohemia, what is his/her account ID? A3 stands for region names",
        "evidence": "A3 stands for region names",
        "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' ORDER BY T1.date ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "For the first client who opened his/her account in north Bohemia, what is his/her account ID?"
    },
    {
        "question_id": 76,
        "db_id": "financial",
        "question": "For the branch which located in the north Bohemia with biggest number of inhabitants, what is the percentage of the male clients? Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "For the branch which located in the north Bohemia with biggest number of inhabitants, what is the percentage of the male clients?"
    },
    {
        "question_id": 77,
        "db_id": "financial",
        "question": "From Year 1995 to 2000, who are the accounts holders from 'north Bohemia'. State the account ID the frequency of statement issuance. Accounts holder refers to the person who own this account.",
        "evidence": "Accounts holder refers to the person who own this account.",
        "SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "difficulty": "simple",
        "raw_question": "From Year 1995 to 2000, who are the accounts holders from 'north Bohemia'. State the account ID the frequency of statement issuance."
    },
    {
        "question_id": 78,
        "db_id": "financial",
        "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in north Bohemia, along with their IDs.",
        "evidence": "",
        "SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'north Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
        "difficulty": "simple",
        "raw_question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in north Bohemia, along with their IDs."
    },
    {
        "question_id": 79,
        "db_id": "cre_Doc_and_collections",
        "question": "What is the owner of document with the Description 'Ransom Collection'?",
        "evidence": "",
        "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
        "difficulty": "simple",
        "raw_question": "What is the owner of document with the Description 'Ransom Collection'?"
    },
    {
        "question_id": 80,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the owners of the document objects described as the 'Ransom Collection'?",
        "evidence": "",
        "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
        "difficulty": "simple",
        "raw_question": "What are the owners of the document objects described as the 'Ransom Collection'?"
    },
    {
        "question_id": 81,
        "db_id": "student_club",
        "question": "Give the location for \"March Meeting\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'March Meeting'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"March Meeting\"."
    },
    {
        "question_id": 82,
        "db_id": "student_club",
        "question": "Calculate the amount budgeted for 'March Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted. 'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "difficulty": "simple",
        "raw_question": "Calculate the amount budgeted for 'March Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
    },
    {
        "question_id": 83,
        "db_id": "student_club",
        "question": "What category was budgeted for the 'March Meeting' event and how much was the amount budgeted for that category? amount budgeted refers to amount, 'January Speaker' is the event name;",
        "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting'",
        "difficulty": "simple",
        "raw_question": "What category was budgeted for the 'March Meeting' event and how much was the amount budgeted for that category?"
    },
    {
        "question_id": 84,
        "db_id": "student_club",
        "question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event. full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "difficulty": "simple",
        "raw_question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event."
    },
    {
        "question_id": 85,
        "db_id": "student_club",
        "question": "Give the location for \"Laugh Out Loud\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'Laugh Out Loud'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"Laugh Out Loud\"."
    },
    {
        "question_id": 86,
        "db_id": "student_club",
        "question": "List all the members who attended the event \"Laugh Out Loud\". 'October Meeting' is an event name;",
        "evidence": "'October Meeting' is an event name;",
        "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Laugh Out Loud'",
        "difficulty": "simple",
        "raw_question": "List all the members who attended the event \"Laugh Out Loud\"."
    },
    {
        "question_id": 87,
        "db_id": "student_club",
        "question": "Among the students majored in interior design, who have attended the Laugh Out Loud event? majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Laugh Out Loud' AND T1.major_name = 'Interior Design'",
        "difficulty": "simple",
        "raw_question": "Among the students majored in interior design, who have attended the Laugh Out Loud event?"
    },
    {
        "question_id": 88,
        "db_id": "card_games",
        "question": "Name all the cards which have alternative language in Chinese Simplified. Japanese' is the language;",
        "evidence": "Japanese' is the language;",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "difficulty": "simple",
        "raw_question": "Name all the cards which have alternative language in Chinese Simplified."
    },
    {
        "question_id": 89,
        "db_id": "card_games",
        "question": "Please provide the names of the artists who illustrated the card art in Chinese Simplified. Phyrexian' is the language; name of artists refers to artist;",
        "evidence": "Phyrexian' is the language; name of artists refers to artist;",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "difficulty": "simple",
        "raw_question": "Please provide the names of the artists who illustrated the card art in Chinese Simplified."
    },
    {
        "question_id": 90,
        "db_id": "card_games",
        "question": "List down the name of artists for cards in Chinese Simplified. Chinese Simplified' is the language;",
        "evidence": "Chinese Simplified' is the language;",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "difficulty": "simple",
        "raw_question": "List down the name of artists for cards in Chinese Simplified."
    },
    {
        "question_id": 91,
        "db_id": "card_games",
        "question": "What are the cards that only available in paper and Chinese Simplified language? available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Chinese Simplified'",
        "difficulty": "simple",
        "raw_question": "What are the cards that only available in paper and Chinese Simplified language?"
    },
    {
        "question_id": 92,
        "db_id": "card_games",
        "question": "Calculate the percentage of cards in Chinese Simplified. List them by name. Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Chinese Simplified'",
        "difficulty": "simple",
        "raw_question": "Calculate the percentage of cards in Chinese Simplified. List them by name."
    },
    {
        "question_id": 93,
        "db_id": "card_games",
        "question": "Lists all types of cards in Chinese Simplified. German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
        "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
        "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Lists all types of cards in Chinese Simplified."
    },
    {
        "question_id": 94,
        "db_id": "card_games",
        "question": "Please list the Chinese Simplified text ruling of all the cards in the set Coldsnap. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified'",
        "difficulty": "simple",
        "raw_question": "Please list the Chinese Simplified text ruling of all the cards in the set Coldsnap."
    },
    {
        "question_id": 95,
        "db_id": "card_games",
        "question": "Please list the Chinese Simplified names of the cards in the set Coldsnap with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified' ORDER BY T2.convertedManaCost DESC",
        "difficulty": "simple",
        "raw_question": "Please list the Chinese Simplified names of the cards in the set Coldsnap with the highest converted mana cost."
    },
    {
        "question_id": 96,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Incorporation\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Incorporation'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Incorporation\"?"
    },
    {
        "question_id": 97,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Lieutenant du consul\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Lieutenant du consul'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Lieutenant du consul\"?"
    },
    {
        "question_id": 98,
        "db_id": "debit_card_specializing",
        "question": "Which country has more \"Value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "evidence": "",
        "SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which country has more \"Value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country."
    },
    {
        "question_id": 99,
        "db_id": "european_football_2",
        "question": "Which country is the league England Premier League from? Italy Serie A from refers to League.name = 'Italy Serie A';",
        "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'England Premier League'",
        "difficulty": "simple",
        "raw_question": "Which country is the league England Premier League from?"
    },
    {
        "question_id": 100,
        "db_id": "european_football_2",
        "question": "Which country is the England Premier League from? Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
        "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'England Premier League'",
        "difficulty": "simple",
        "raw_question": "Which country is the England Premier League from?"
    },
    {
        "question_id": 101,
        "db_id": "student_club",
        "question": "Which college is the Vice President of the Student_Club from? Vice President is a position of the Student Club",
        "evidence": "Vice President is a position of the Student Club",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Vice President'",
        "difficulty": "simple",
        "raw_question": "Which college is the Vice President of the Student_Club from?"
    },
    {
        "question_id": 102,
        "db_id": "student_club",
        "question": "What is the amount of the funds that the Vice President received? 'Vice President' is a position of Student Club; funds received refers to amount.",
        "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "difficulty": "simple",
        "raw_question": "What is the amount of the funds that the Vice President received?"
    },
    {
        "question_id": 103,
        "db_id": "student_club",
        "question": "What city and state did the Vice President of the Student_Club grow up? 'President' is a position of Student Club;",
        "evidence": "'President' is a position of Student Club;",
        "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'Vice President'",
        "difficulty": "simple",
        "raw_question": "What city and state did the Vice President of the Student_Club grow up?"
    },
    {
        "question_id": 104,
        "db_id": "student_club",
        "question": "State the major name for the Vice President of the club. 'Vice President' is a position of Student Club",
        "evidence": "'Vice President' is a position of Student Club",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "difficulty": "simple",
        "raw_question": "State the major name for the Vice President of the club."
    },
    {
        "question_id": 105,
        "db_id": "student_club",
        "question": "Which department was the Vice President of the club in? 'President' is a position of Student Club",
        "evidence": "'President' is a position of Student Club",
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "difficulty": "simple",
        "raw_question": "Which department was the Vice President of the club in?"
    },
    {
        "question_id": 106,
        "db_id": "student_club",
        "question": "List all the expenses incurred by the Vice President. expense refers to expense_description; 'Vice President' is a position of the Student Club",
        "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
        "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "difficulty": "simple",
        "raw_question": "List all the expenses incurred by the Vice President."
    },
    {
        "question_id": 107,
        "db_id": "student_club",
        "question": "Provide the full name and email address of the Student_Club's Vice President. full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Vice President'",
        "difficulty": "simple",
        "raw_question": "Provide the full name and email address of the Student_Club's Vice President."
    },
    {
        "question_id": 108,
        "db_id": "student_club",
        "question": "State the name of major that Vice President has joined. name of major refers to major_name; 'Vice President' is position of Student Club",
        "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
        "difficulty": "simple",
        "raw_question": "State the name of major that Vice President has joined."
    },
    {
        "question_id": 109,
        "db_id": "student_club",
        "question": "What is the name of the social event that was attended by the Vice President of the Student_Club located at 900 E. Washington St.? name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
        "difficulty": "simple",
        "raw_question": "What is the name of the social event that was attended by the Vice President of the Student_Club located at 900 E. Washington St.?"
    },
    {
        "question_id": 110,
        "db_id": "student_club",
        "question": "Write the full name of the club member with the position of 'Vice President' and list which college the club member belongs to. full name refers to first_name, last name",
        "evidence": "full name refers to first_name, last name",
        "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Vice President'",
        "difficulty": "simple",
        "raw_question": "Write the full name of the club member with the position of 'Vice President' and list which college the club member belongs to."
    },
    {
        "question_id": 111,
        "db_id": "museum_visit",
        "question": "What are the opening year and staff number of the museum named Central City District Residential Museum?",
        "evidence": "",
        "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Central City District Residential Museum'",
        "difficulty": "simple",
        "raw_question": "What are the opening year and staff number of the museum named Central City District Residential Museum?"
    },
    {
        "question_id": 112,
        "db_id": "dog_kennels",
        "question": "Which dogs are owned by someone who lives in Vermont? List the owner's first name and the dog's name.",
        "evidence": "",
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Vermont'",
        "difficulty": "simple",
        "raw_question": "Which dogs are owned by someone who lives in Vermont? List the owner's first name and the dog's name."
    },
    {
        "question_id": 113,
        "db_id": "dog_kennels",
        "question": "Find the first names of owners living in Vermont and the names of dogs they own.",
        "evidence": "",
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Vermont'",
        "difficulty": "simple",
        "raw_question": "Find the first names of owners living in Vermont and the names of dogs they own."
    },
    {
        "question_id": 114,
        "db_id": "european_football_2",
        "question": "What is the attacking work rate of the football playerr Adrian Ricardo Centurion?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "difficulty": "simple",
        "raw_question": "What is the attacking work rate of the football playerr Adrian Ricardo Centurion?"
    },
    {
        "question_id": 115,
        "db_id": "european_football_2",
        "question": "What is the football player Adrian Ricardo Centurion header's finishing rate on 18/09/2014? header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "difficulty": "simple",
        "raw_question": "What is the football player Adrian Ricardo Centurion header's finishing rate on 18/09/2014?"
    },
    {
        "question_id": 116,
        "db_id": "european_football_2",
        "question": "What is the defensive work rate of the football player Adrian Ricardo Centurion\n?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "difficulty": "simple",
        "raw_question": "What is the defensive work rate of the football player Adrian Ricardo Centurion\n?"
    },
    {
        "question_id": 117,
        "db_id": "european_football_2",
        "question": "What is Adrian Ricardo Centurion's potential score? potential score refers to potential;",
        "evidence": "potential score refers to potential;",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "difficulty": "simple",
        "raw_question": "What is Adrian Ricardo Centurion's potential score?"
    },
    {
        "question_id": 118,
        "db_id": "european_football_2",
        "question": "What's the heading accuracy of Adrian Ricardo Centurion?",
        "evidence": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "difficulty": "simple",
        "raw_question": "What's the heading accuracy of Adrian Ricardo Centurion?"
    },
    {
        "question_id": 119,
        "db_id": "european_football_2",
        "question": "Which foot is preferred by Adrian Ricardo Centurion? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
        "difficulty": "simple",
        "raw_question": "Which foot is preferred by Adrian Ricardo Centurion?"
    },
    {
        "question_id": 120,
        "db_id": "european_football_2",
        "question": "When was the first time did Adrian Ricardo Centurion have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the first time did Adrian Ricardo Centurion have his highest crossing score? Give the date."
    },
    {
        "question_id": 121,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Classifier success rate and confidence intervals\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Classifier success rate and confidence intervals\"?"
    },
    {
        "question_id": 122,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Classifier success rate and confidence intervals\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Classifier success rate and confidence intervals\"?"
    },
    {
        "question_id": 123,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Classifier success rate and confidence intervals' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Classifier success rate and confidence intervals' get?"
    },
    {
        "question_id": 124,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Classifier success rate and confidence intervals\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Classifier success rate and confidence intervals\"."
    },
    {
        "question_id": 125,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Classifier success rate and confidence intervals'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Classifier success rate and confidence intervals'?"
    },
    {
        "question_id": 126,
        "db_id": "superhero",
        "question": "Rank heroes published by Sony Pictures by their height in descending order. name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Sony Pictures'",
        "difficulty": "simple",
        "raw_question": "Rank heroes published by Sony Pictures by their height in descending order."
    },
    {
        "question_id": 127,
        "db_id": "superhero",
        "question": "Rank superheroes from Sony Pictures by their eye color popularity, starting with the most common color. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Sony Pictures' GROUP BY colour.colour",
        "difficulty": "simple",
        "raw_question": "Rank superheroes from Sony Pictures by their eye color popularity, starting with the most common color."
    },
    {
        "question_id": 128,
        "db_id": "superhero",
        "question": "List the superheroes from Sony Pictures who have the super power of 'Super Strength'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Sony Pictures' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Sony Pictures who have the super power of 'Super Strength'."
    },
    {
        "question_id": 129,
        "db_id": "superhero",
        "question": "Give the publisher ID of Sony Pictures. Star Trek is the publisher_name;",
        "evidence": "Star Trek is the publisher_name;",
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Sony Pictures'",
        "difficulty": "simple",
        "raw_question": "Give the publisher ID of Sony Pictures."
    },
    {
        "question_id": 130,
        "db_id": "superhero",
        "question": "Which superhero has the most durability published by Sony Pictures? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Sony Pictures' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which superhero has the most durability published by Sony Pictures?"
    },
    {
        "question_id": 131,
        "db_id": "superhero",
        "question": "Identify the heaviest superhero in Sony Pictures. heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Sony Pictures' ORDER BY T1.weight_kg DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the heaviest superhero in Sony Pictures."
    },
    {
        "question_id": 132,
        "db_id": "card_games",
        "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Commander block in alphabetical order.",
        "evidence": "",
        "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "difficulty": "simple",
        "raw_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Commander block in alphabetical order."
    },
    {
        "question_id": 133,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Animal Attributes'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Animal Attributes'."
    },
    {
        "question_id": 134,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Animal Attributes? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Animal Attributes?"
    },
    {
        "question_id": 135,
        "db_id": "superhero",
        "question": "List the name of superheroes with Animal Attributes power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Animal Attributes power."
    },
    {
        "question_id": 136,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Animal Attributes power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Animal Attributes power."
    },
    {
        "question_id": 137,
        "db_id": "superhero",
        "question": "What is the power ID of Animal Attributes? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Animal Attributes'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Animal Attributes?"
    },
    {
        "question_id": 138,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Animal Attributes. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Animal Attributes'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Animal Attributes."
    },
    {
        "question_id": 139,
        "db_id": "european_football_2",
        "question": "What is the short name of the football team West Ham United? short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'West Ham United'",
        "difficulty": "simple",
        "raw_question": "What is the short name of the football team West Ham United?"
    },
    {
        "question_id": 140,
        "db_id": "european_football_2",
        "question": "What is the West Ham United team freedom of movement in the 1st two thirds of the pitch? ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'West Ham United'",
        "difficulty": "simple",
        "raw_question": "What is the West Ham United team freedom of movement in the 1st two thirds of the pitch?"
    },
    {
        "question_id": 141,
        "db_id": "european_football_2",
        "question": "What is West Ham United's highest chance creation passing score and what is it classified as? Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is West Ham United's highest chance creation passing score and what is it classified as?"
    },
    {
        "question_id": 142,
        "db_id": "european_football_2",
        "question": "What was the build up play speed class for \"West Ham United\" on 2011/2/22? \"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the build up play speed class for \"West Ham United\" on 2011/2/22?"
    },
    {
        "question_id": 143,
        "db_id": "european_football_2",
        "question": "State the chance creation passing class for \"West Ham United\" on 2013/9/20. \"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "difficulty": "simple",
        "raw_question": "State the chance creation passing class for \"West Ham United\" on 2013/9/20."
    },
    {
        "question_id": 144,
        "db_id": "european_football_2",
        "question": "What was the chance creation crossing class for \"West Ham United\" on 2010/2/22? \"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the chance creation crossing class for \"West Ham United\" on 2010/2/22?"
    },
    {
        "question_id": 145,
        "db_id": "european_football_2",
        "question": "Does the West Ham United team have a slow, balanced or fast speed class? KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'West Ham United'",
        "difficulty": "simple",
        "raw_question": "Does the West Ham United team have a slow, balanced or fast speed class?"
    },
    {
        "question_id": 146,
        "db_id": "european_football_2",
        "question": "What is the short name of the football team Queens Park Rangers? short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
        "difficulty": "simple",
        "raw_question": "What is the short name of the football team Queens Park Rangers?"
    },
    {
        "question_id": 147,
        "db_id": "european_football_2",
        "question": "What is the Queens Park Rangers team freedom of movement in the 1st two thirds of the pitch? ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'Queens Park Rangers'",
        "difficulty": "simple",
        "raw_question": "What is the Queens Park Rangers team freedom of movement in the 1st two thirds of the pitch?"
    },
    {
        "question_id": 148,
        "db_id": "european_football_2",
        "question": "What is Queens Park Rangers's highest chance creation passing score and what is it classified as? Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is Queens Park Rangers's highest chance creation passing score and what is it classified as?"
    },
    {
        "question_id": 149,
        "db_id": "european_football_2",
        "question": "What was the build up play speed class for \"Queens Park Rangers\" on 2011/2/22? \"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the build up play speed class for \"Queens Park Rangers\" on 2011/2/22?"
    },
    {
        "question_id": 150,
        "db_id": "european_football_2",
        "question": "State the chance creation passing class for \"Queens Park Rangers\" on 2013/9/20. \"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "difficulty": "simple",
        "raw_question": "State the chance creation passing class for \"Queens Park Rangers\" on 2013/9/20."
    },
    {
        "question_id": 151,
        "db_id": "european_football_2",
        "question": "What was the chance creation crossing class for \"Queens Park Rangers\" on 2010/2/22? \"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the chance creation crossing class for \"Queens Park Rangers\" on 2010/2/22?"
    },
    {
        "question_id": 152,
        "db_id": "european_football_2",
        "question": "Does the Queens Park Rangers team have a slow, balanced or fast speed class? KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'Queens Park Rangers'",
        "difficulty": "simple",
        "raw_question": "Does the Queens Park Rangers team have a slow, balanced or fast speed class?"
    },
    {
        "question_id": 153,
        "db_id": "codebase_community",
        "question": "List out the dates that users who are located in Massachusetts obtained their badges? \"Rochester, NY\" is the Location of user; user refers to UserId",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Massachusetts'",
        "difficulty": "simple",
        "raw_question": "List out the dates that users who are located in Massachusetts obtained their badges?"
    },
    {
        "question_id": 154,
        "db_id": "codebase_community",
        "question": "List out the age of users who located in Massachusetts obtained the badge? \"Vienna, Austria\" is the Location",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Massachusetts'",
        "difficulty": "simple",
        "raw_question": "List out the age of users who located in Massachusetts obtained the badge?"
    },
    {
        "question_id": 155,
        "db_id": "codebase_community",
        "question": "Provide the badge names received in 2011 for the user whose location is in the Massachusetts. received in 2011 refers to year(Date) = 2011;",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'Massachusetts'",
        "difficulty": "simple",
        "raw_question": "Provide the badge names received in 2011 for the user whose location is in the Massachusetts."
    },
    {
        "question_id": 156,
        "db_id": "codebase_community",
        "question": "List out the dates that users who are located in South Africa obtained their badges? \"Rochester, NY\" is the Location of user; user refers to UserId",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'South Africa'",
        "difficulty": "simple",
        "raw_question": "List out the dates that users who are located in South Africa obtained their badges?"
    },
    {
        "question_id": 157,
        "db_id": "codebase_community",
        "question": "List out the age of users who located in South Africa obtained the badge? \"Vienna, Austria\" is the Location",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'South Africa'",
        "difficulty": "simple",
        "raw_question": "List out the age of users who located in South Africa obtained the badge?"
    },
    {
        "question_id": 158,
        "db_id": "codebase_community",
        "question": "Provide the badge names received in 2011 for the user whose location is in the South Africa. received in 2011 refers to year(Date) = 2011;",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'South Africa'",
        "difficulty": "simple",
        "raw_question": "Provide the badge names received in 2011 for the user whose location is in the South Africa."
    },
    {
        "question_id": 159,
        "db_id": "real_estate_rentals",
        "question": "Find the login names of all Senior Citizen users ordered by their first names.",
        "evidence": "",
        "SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
        "difficulty": "simple",
        "raw_question": "Find the login names of all Senior Citizen users ordered by their first names."
    },
    {
        "question_id": 160,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Popular Question.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Popular Question' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Popular Question.'"
    },
    {
        "question_id": 161,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Popular Question Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Popular Question'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Popular Question Badges."
    },
    {
        "question_id": 162,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Popular Question badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Popular Question'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Popular Question badge."
    },
    {
        "question_id": 163,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Popular Question badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Popular Question' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Popular Question badge?"
    },
    {
        "question_id": 164,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Misinformation'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Misinformation'?"
    },
    {
        "question_id": 165,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Misinformation\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Misinformation\"?"
    },
    {
        "question_id": 166,
        "db_id": "card_games",
        "question": "What is the status of card \"Misinformation\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Misinformation\"?"
    },
    {
        "question_id": 167,
        "db_id": "card_games",
        "question": "What is the type of card \"Misinformation\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Misinformation\"?"
    },
    {
        "question_id": 168,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Misinformation\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Misinformation\"?"
    },
    {
        "question_id": 169,
        "db_id": "card_games",
        "question": "Write down the ruling of Misinformation. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Misinformation."
    },
    {
        "question_id": 170,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Misinformation\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Misinformation\"?"
    },
    {
        "question_id": 171,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Misinformation\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Misinformation\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 172,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Misinformation' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Misinformation' created?"
    },
    {
        "question_id": 173,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Misinformation\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Misinformation'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Misinformation\" in it?"
    },
    {
        "question_id": 174,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Enchant Equipment and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Equipment'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Enchant Equipment and the date of rulings for these cards."
    },
    {
        "question_id": 175,
        "db_id": "student_club",
        "question": "Please list the full names of the students in the Student_Club that come from the Physics Department. full name refers to first_name, last_name;",
        "evidence": "full name refers to first_name, last_name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
        "difficulty": "simple",
        "raw_question": "Please list the full names of the students in the Student_Club that come from the Physics Department."
    },
    {
        "question_id": 176,
        "db_id": "student_club",
        "question": "List all the members of the \"Physics Department\" department. list all members means to list all the full name; full name refers to first_name, last_name;",
        "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
        "difficulty": "simple",
        "raw_question": "List all the members of the \"Physics Department\" department."
    },
    {
        "question_id": 177,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Statistics collaboration\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Statistics collaboration'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Statistics collaboration\"?"
    },
    {
        "question_id": 178,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Statistics collaboration\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Statistics collaboration'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"Statistics collaboration\"?"
    },
    {
        "question_id": 179,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Statistics collaboration\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Statistics collaboration'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Statistics collaboration\"?"
    },
    {
        "question_id": 180,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Statistics collaboration' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Statistics collaboration'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Statistics collaboration' get?"
    },
    {
        "question_id": 181,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Statistics collaboration\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Statistics collaboration'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Statistics collaboration\"."
    },
    {
        "question_id": 182,
        "db_id": "codebase_community",
        "question": "Provide the text of the latest 10 comments to the post with the title 'Statistics collaboration' and the display name of the user who left it. the latest comment refers to MAX(CreationDate);",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Statistics collaboration' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Provide the text of the latest 10 comments to the post with the title 'Statistics collaboration' and the display name of the user who left it."
    },
    {
        "question_id": 183,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Statistics collaboration'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Statistics collaboration'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Statistics collaboration'?"
    },
    {
        "question_id": 184,
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Statistics collaboration\"? Title = 'Group differences on a five point Likert item';",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Statistics collaboration'",
        "difficulty": "simple",
        "raw_question": "What is the post ID and the comments commented in the post titled by \"Statistics collaboration\"?"
    },
    {
        "question_id": 185,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Test Statistics' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Test Statistics'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Test Statistics' get?"
    },
    {
        "question_id": 186,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Test Statistics\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Test Statistics'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Test Statistics\"."
    },
    {
        "question_id": 187,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Test Statistics'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Test Statistics'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Test Statistics'?"
    },
    {
        "question_id": 188,
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Test Statistics\"? Title = 'Group differences on a five point Likert item';",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Test Statistics'",
        "difficulty": "simple",
        "raw_question": "What is the post ID and the comments commented in the post titled by \"Test Statistics\"?"
    },
    {
        "question_id": 189,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Graphics encyclopedia\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Graphics encyclopedia'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Graphics encyclopedia\"?"
    },
    {
        "question_id": 190,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Graphics encyclopedia\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Graphics encyclopedia'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"Graphics encyclopedia\"?"
    },
    {
        "question_id": 191,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Graphics encyclopedia\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Graphics encyclopedia'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Graphics encyclopedia\"?"
    },
    {
        "question_id": 192,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Graphics encyclopedia' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Graphics encyclopedia'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Graphics encyclopedia' get?"
    },
    {
        "question_id": 193,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Graphics encyclopedia\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Graphics encyclopedia'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Graphics encyclopedia\"."
    },
    {
        "question_id": 194,
        "db_id": "codebase_community",
        "question": "Provide the text of the latest 10 comments to the post with the title 'Graphics encyclopedia' and the display name of the user who left it. the latest comment refers to MAX(CreationDate);",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Graphics encyclopedia' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Provide the text of the latest 10 comments to the post with the title 'Graphics encyclopedia' and the display name of the user who left it."
    },
    {
        "question_id": 195,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Graphics encyclopedia'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Graphics encyclopedia'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Graphics encyclopedia'?"
    },
    {
        "question_id": 196,
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Graphics encyclopedia\"? Title = 'Group differences on a five point Likert item';",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Graphics encyclopedia'",
        "difficulty": "simple",
        "raw_question": "What is the post ID and the comments commented in the post titled by \"Graphics encyclopedia\"?"
    },
    {
        "question_id": 197,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Welch statistic\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Welch statistic'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Welch statistic\"?"
    },
    {
        "question_id": 198,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Welch statistic\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Welch statistic'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"Welch statistic\"?"
    },
    {
        "question_id": 199,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Welch statistic\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Welch statistic'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Welch statistic\"?"
    },
    {
        "question_id": 200,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Welch statistic' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Welch statistic'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Welch statistic' get?"
    },
    {
        "question_id": 201,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Welch statistic\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Welch statistic'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Welch statistic\"."
    },
    {
        "question_id": 202,
        "db_id": "codebase_community",
        "question": "Provide the text of the latest 10 comments to the post with the title 'Welch statistic' and the display name of the user who left it. the latest comment refers to MAX(CreationDate);",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Welch statistic' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Provide the text of the latest 10 comments to the post with the title 'Welch statistic' and the display name of the user who left it."
    },
    {
        "question_id": 203,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Welch statistic'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Welch statistic'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Welch statistic'?"
    },
    {
        "question_id": 204,
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Welch statistic\"? Title = 'Group differences on a five point Likert item';",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Welch statistic'",
        "difficulty": "simple",
        "raw_question": "What is the post ID and the comments commented in the post titled by \"Welch statistic\"?"
    },
    {
        "question_id": 205,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Scale parameter\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Scale parameter'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Scale parameter\"?"
    },
    {
        "question_id": 206,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Scale parameter\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Scale parameter'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Scale parameter\"?"
    },
    {
        "question_id": 207,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Scale parameter' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Scale parameter'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Scale parameter' get?"
    },
    {
        "question_id": 208,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Scale parameter\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Scale parameter'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Scale parameter\"."
    },
    {
        "question_id": 209,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Scale parameter'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Scale parameter'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Scale parameter'?"
    },
    {
        "question_id": 210,
        "db_id": "california_schools",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Christopher. List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Christopher'",
        "difficulty": "simple",
        "raw_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Christopher. List the district code of the school."
    },
    {
        "question_id": 211,
        "db_id": "california_schools",
        "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are Locally funded, list the names and DOC type of schools which has a difference above this average. Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
        "SQL": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
        "difficulty": "simple",
        "raw_question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are Locally funded, list the names and DOC type of schools which has a difference above this average."
    },
    {
        "question_id": 212,
        "db_id": "superhero",
        "question": "Please list all the superpowers of Captain America. 3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "Please list all the superpowers of Captain America."
    },
    {
        "question_id": 213,
        "db_id": "superhero",
        "question": "What is the colour of Captain America's skin? Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "What is the colour of Captain America's skin?"
    },
    {
        "question_id": 214,
        "db_id": "superhero",
        "question": "Who is the publisher of Captain America? the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "Who is the publisher of Captain America?"
    },
    {
        "question_id": 215,
        "db_id": "superhero",
        "question": "What is the publisher's name of Captain America? Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "What is the publisher's name of Captain America?"
    },
    {
        "question_id": 216,
        "db_id": "superhero",
        "question": "What is Captain America's race? Copycat is the superhero_name;",
        "evidence": "Copycat is the superhero_name;",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "What is Captain America's race?"
    },
    {
        "question_id": 217,
        "db_id": "superhero",
        "question": "Provide the superpowers of the superhero called Captain America. superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "Provide the superpowers of the superhero called Captain America."
    },
    {
        "question_id": 218,
        "db_id": "superhero",
        "question": "Indicate the attribute value of superhero Captain America. Abomination refers to superhero_name = 'Abomination';",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "Indicate the attribute value of superhero Captain America."
    },
    {
        "question_id": 219,
        "db_id": "superhero",
        "question": "Which group does superhero Captain America belong to? group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "Which group does superhero Captain America belong to?"
    },
    {
        "question_id": 220,
        "db_id": "superhero",
        "question": "What is the gender of Captain America hero? Agent 13 hero refers to superhero_name = 'Agent 13';",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "What is the gender of Captain America hero?"
    },
    {
        "question_id": 221,
        "db_id": "superhero",
        "question": "What are the race and alignment of Captain America? Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "What are the race and alignment of Captain America?"
    },
    {
        "question_id": 222,
        "db_id": "superhero",
        "question": "What is Captain America's superpower? Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "What is Captain America's superpower?"
    },
    {
        "question_id": 223,
        "db_id": "superhero",
        "question": "State all of Captain America's attributes along with their values. 3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "State all of Captain America's attributes along with their values."
    },
    {
        "question_id": 224,
        "db_id": "superhero",
        "question": "Give the alignment and superpowers of the superhero named Captain America. superpowers refers to power_name;",
        "evidence": "superpowers refers to power_name;",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "Give the alignment and superpowers of the superhero named Captain America."
    },
    {
        "question_id": 225,
        "db_id": "superhero",
        "question": "List down Captain America's superpowers. Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "List down Captain America's superpowers."
    },
    {
        "question_id": 226,
        "db_id": "superhero",
        "question": "Identify the weakest attribute of the Captain America. weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Captain America' ORDER BY T2.attribute_value ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the weakest attribute of the Captain America."
    },
    {
        "question_id": 227,
        "db_id": "superhero",
        "question": "What is Captain America's eye colour? Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "What is Captain America's eye colour?"
    },
    {
        "question_id": 228,
        "db_id": "superhero",
        "question": "Provide the full name of the superhero named Captain America.",
        "evidence": "",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "Provide the full name of the superhero named Captain America."
    },
    {
        "question_id": 229,
        "db_id": "superhero",
        "question": "List the attribute value of the superhero named Captain America.",
        "evidence": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "List the attribute value of the superhero named Captain America."
    },
    {
        "question_id": 230,
        "db_id": "superhero",
        "question": "Give the eye colour of Captain America. eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Captain America'",
        "difficulty": "simple",
        "raw_question": "Give the eye colour of Captain America."
    },
    {
        "question_id": 231,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Fire Resistance'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Fire Resistance'."
    },
    {
        "question_id": 232,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Fire Resistance? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Fire Resistance?"
    },
    {
        "question_id": 233,
        "db_id": "superhero",
        "question": "List the name of superheroes with Fire Resistance power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Fire Resistance power."
    },
    {
        "question_id": 234,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Fire Resistance power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Fire Resistance power."
    },
    {
        "question_id": 235,
        "db_id": "superhero",
        "question": "What is the power ID of Fire Resistance? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Fire Resistance'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Fire Resistance?"
    },
    {
        "question_id": 236,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Fire Resistance. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Fire Resistance'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Fire Resistance."
    },
    {
        "question_id": 237,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named moderator? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'moderator'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named moderator?"
    },
    {
        "question_id": 238,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named information? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'information'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named information?"
    },
    {
        "question_id": 239,
        "db_id": "university_rank",
        "question": "Show all majors and major ranks for the university with name Benedictine University.",
        "evidence": "",
        "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Benedictine University'",
        "difficulty": "simple",
        "raw_question": "Show all majors and major ranks for the university with name Benedictine University."
    },
    {
        "question_id": 240,
        "db_id": "university_rank",
        "question": "What are the ranks and names of all majors at Benedictine University?",
        "evidence": "",
        "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Benedictine University'",
        "difficulty": "simple",
        "raw_question": "What are the ranks and names of all majors at Benedictine University?"
    },
    {
        "question_id": 241,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Disciplined.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Disciplined' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Disciplined.'"
    },
    {
        "question_id": 242,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Disciplined Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Disciplined'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Disciplined Badges."
    },
    {
        "question_id": 243,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Disciplined badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Disciplined'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Disciplined badge."
    },
    {
        "question_id": 244,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Disciplined badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Disciplined' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Disciplined badge?"
    },
    {
        "question_id": 245,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Informed.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Informed' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Informed.'"
    },
    {
        "question_id": 246,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Informed Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Informed'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Informed Badges."
    },
    {
        "question_id": 247,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Informed badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Informed'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Informed badge."
    },
    {
        "question_id": 248,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Informed badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Informed' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Informed badge?"
    },
    {
        "question_id": 249,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Curious.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Curious' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Curious.'"
    },
    {
        "question_id": 250,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Curious Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Curious'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Curious Badges."
    },
    {
        "question_id": 251,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Curious badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Curious'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Curious badge."
    },
    {
        "question_id": 252,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Curious badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Curious' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Curious badge?"
    },
    {
        "question_id": 253,
        "db_id": "financial",
        "question": "What are the accounts that have junior credit cards?",
        "evidence": "",
        "SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'junior'",
        "difficulty": "simple",
        "raw_question": "What are the accounts that have junior credit cards?"
    },
    {
        "question_id": 254,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Indestructible?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Indestructible'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Indestructible?"
    },
    {
        "question_id": 255,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Decommission'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Decommission'?"
    },
    {
        "question_id": 256,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Decommission\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Decommission\"?"
    },
    {
        "question_id": 257,
        "db_id": "card_games",
        "question": "What is the status of card \"Decommission\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Decommission\"?"
    },
    {
        "question_id": 258,
        "db_id": "card_games",
        "question": "What is the type of card \"Decommission\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Decommission\"?"
    },
    {
        "question_id": 259,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Decommission\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Decommission\"?"
    },
    {
        "question_id": 260,
        "db_id": "card_games",
        "question": "Write down the ruling of Decommission. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Decommission."
    },
    {
        "question_id": 261,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Decommission\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Decommission\"?"
    },
    {
        "question_id": 262,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Decommission\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Decommission\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 263,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Decommission' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Decommission' created?"
    },
    {
        "question_id": 264,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Decommission\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Decommission'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Decommission\" in it?"
    },
    {
        "question_id": 265,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Decommission\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Decommission' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Decommission\" is in?"
    },
    {
        "question_id": 266,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Decommission\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Decommission' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Decommission\" is in it."
    },
    {
        "question_id": 267,
        "db_id": "card_games",
        "question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date. uncommon refers to rarity = 'uncommon';",
        "evidence": "uncommon refers to rarity = 'uncommon';",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "difficulty": "simple",
        "raw_question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date."
    },
    {
        "question_id": 268,
        "db_id": "card_games",
        "question": "When was the oldest uncommon card released and what are its legal play formats? the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the oldest uncommon card released and what are its legal play formats?"
    },
    {
        "question_id": 269,
        "db_id": "card_games",
        "question": "Pick 3 cards with rarity of common, list down name these cards according to ascending order of it's ruling date. uncommon refers to rarity = 'uncommon';",
        "evidence": "uncommon refers to rarity = 'uncommon';",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'common' ORDER BY T2.date ASC LIMIT 3",
        "difficulty": "simple",
        "raw_question": "Pick 3 cards with rarity of common, list down name these cards according to ascending order of it's ruling date."
    },
    {
        "question_id": 270,
        "db_id": "card_games",
        "question": "When was the oldest common card released and what are its legal play formats? the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'common' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the oldest common card released and what are its legal play formats?"
    },
    {
        "question_id": 271,
        "db_id": "student_club",
        "question": "Among all the Closed events, which event has the highest spend-to-budget ratio? closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
        "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among all the Closed events, which event has the highest spend-to-budget ratio?"
    },
    {
        "question_id": 272,
        "db_id": "student_club",
        "question": "List the names of Closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020. name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20';",
        "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
        "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
        "difficulty": "simple",
        "raw_question": "List the names of Closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020."
    },
    {
        "question_id": 273,
        "db_id": "thrombosis_prediction",
        "question": "What is the most common sign of patients with Normal disease? the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Normal' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common sign of patients with Normal disease?"
    },
    {
        "question_id": 274,
        "db_id": "card_games",
        "question": "List all the mythic rarity print cards Banned in gladiator format. mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "difficulty": "simple",
        "raw_question": "List all the mythic rarity print cards Banned in gladiator format."
    },
    {
        "question_id": 275,
        "db_id": "card_games",
        "question": "Lists by ID all Creature-type cards with Banned status. legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Banned' AND T1.types = 'Creature'",
        "difficulty": "simple",
        "raw_question": "Lists by ID all Creature-type cards with Banned status."
    },
    {
        "question_id": 276,
        "db_id": "card_games",
        "question": "When was the oldest mythic card released and what are its Banned play formats? the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Banned' ORDER BY T1.originalReleaseDate LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the oldest mythic card released and what are its Banned play formats?"
    },
    {
        "question_id": 277,
        "db_id": "card_games",
        "question": "Which of the play format has the highest number of Banned status? Indicate the play format and the names of all the card meet the condition. play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
        "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
        "SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
        "difficulty": "simple",
        "raw_question": "Which of the play format has the highest number of Banned status? Indicate the play format and the names of all the card meet the condition."
    },
    {
        "question_id": 278,
        "db_id": "card_games",
        "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Banned play format. ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
        "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
        "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
        "difficulty": "simple",
        "raw_question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Banned play format."
    },
    {
        "question_id": 279,
        "db_id": "codebase_community",
        "question": "Identify the total views on the post 'differentiation'. Name the user who posted it last time. total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'differentiation'",
        "difficulty": "simple",
        "raw_question": "Identify the total views on the post 'differentiation'. Name the user who posted it last time."
    },
    {
        "question_id": 280,
        "db_id": "california_schools",
        "question": "What is the most common type of grade span served in the city of Likely?",
        "evidence": "",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Likely' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common type of grade span served in the city of Likely?"
    },
    {
        "question_id": 281,
        "db_id": "california_schools",
        "question": "Which Active district has the highest average score in Reading?",
        "evidence": "",
        "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which Active district has the highest average score in Reading?"
    },
    {
        "question_id": 282,
        "db_id": "california_schools",
        "question": "Which different county has the most number of Active schools? Please provide the name of each school as well as the closure date. Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
        "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
        "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Active' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Active' AND school IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Which different county has the most number of Active schools? Please provide the name of each school as well as the closure date."
    },
    {
        "question_id": 283,
        "db_id": "california_schools",
        "question": "Which Closed district has the highest average score in Reading?",
        "evidence": "",
        "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Closed' ORDER BY T2.AvgScrRead DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which Closed district has the highest average score in Reading?"
    },
    {
        "question_id": 284,
        "db_id": "california_schools",
        "question": "Which different county has the most number of Closed schools? Please provide the name of each school as well as the closure date. Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
        "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
        "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Which different county has the most number of Closed schools? Please provide the name of each school as well as the closure date."
    },
    {
        "question_id": 285,
        "db_id": "card_games",
        "question": "Please list the name of the cards in the set Unstable with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Unstable' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please list the name of the cards in the set Unstable with the highest converted mana cost."
    },
    {
        "question_id": 286,
        "db_id": "card_games",
        "question": "What is card number 4 in the set Unstable? card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Unstable' AND T1.number = 4",
        "difficulty": "simple",
        "raw_question": "What is card number 4 in the set Unstable?"
    },
    {
        "question_id": 287,
        "db_id": "card_games",
        "question": "For the set \"Unstable\" , give its parent code. the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Unstable'",
        "difficulty": "simple",
        "raw_question": "For the set \"Unstable\" , give its parent code."
    },
    {
        "question_id": 288,
        "db_id": "codebase_community",
        "question": "From which post is the tag \"nonparametric\" excerpted from? Please give the body of the post. \"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'nonparametric'",
        "difficulty": "simple",
        "raw_question": "From which post is the tag \"nonparametric\" excerpted from? Please give the body of the post."
    },
    {
        "question_id": 289,
        "db_id": "codebase_community",
        "question": "Mention the display name and location of the user who owned the excerpt post with nonparametric tag. user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'nonparametric'",
        "difficulty": "simple",
        "raw_question": "Mention the display name and location of the user who owned the excerpt post with nonparametric tag."
    },
    {
        "question_id": 290,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named nonparametric? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'nonparametric'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named nonparametric?"
    },
    {
        "question_id": 291,
        "db_id": "codebase_community",
        "question": "From which post is the tag \"online\" excerpted from? Please give the body of the post. \"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'online'",
        "difficulty": "simple",
        "raw_question": "From which post is the tag \"online\" excerpted from? Please give the body of the post."
    },
    {
        "question_id": 292,
        "db_id": "codebase_community",
        "question": "Mention the display name and location of the user who owned the excerpt post with online tag. user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'online'",
        "difficulty": "simple",
        "raw_question": "Mention the display name and location of the user who owned the excerpt post with online tag."
    },
    {
        "question_id": 293,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named online? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'online'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named online?"
    },
    {
        "question_id": 294,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named nonlinear? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'nonlinear'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named nonlinear?"
    },
    {
        "question_id": 295,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named control? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'control'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named control?"
    },
    {
        "question_id": 296,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Famous Question.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Famous Question' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Famous Question.'"
    },
    {
        "question_id": 297,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Famous Question Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Famous Question'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Famous Question Badges."
    },
    {
        "question_id": 298,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Famous Question badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Famous Question'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Famous Question badge."
    },
    {
        "question_id": 299,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Famous Question badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Famous Question' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Famous Question badge?"
    },
    {
        "question_id": 300,
        "db_id": "student_club",
        "question": "With the biggest budget for the \"Speaker Gifts\", what was the remaining of it? remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "SQL": "SELECT remaining FROM budget WHERE category = 'Speaker Gifts' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Speaker Gifts' )",
        "difficulty": "simple",
        "raw_question": "With the biggest budget for the \"Speaker Gifts\", what was the remaining of it?"
    },
    {
        "question_id": 301,
        "db_id": "student_club",
        "question": "Name the event with the highest amount spent on Speaker Gifts. Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' ORDER BY T1.spent DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Name the event with the highest amount spent on Speaker Gifts."
    },
    {
        "question_id": 302,
        "db_id": "student_club",
        "question": "List the name of events with less than average Speaker Gifts cost. name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Speaker Gifts' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "difficulty": "simple",
        "raw_question": "List the name of events with less than average Speaker Gifts cost."
    },
    {
        "question_id": 303,
        "db_id": "student_club",
        "question": "List the event names which were budgeted for the Speaker Gifts. budgeted for food refers to category = 'Food'",
        "evidence": "budgeted for food refers to category = 'Food'",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Speaker Gifts'",
        "difficulty": "simple",
        "raw_question": "List the event names which were budgeted for the Speaker Gifts."
    },
    {
        "question_id": 304,
        "db_id": "student_club",
        "question": "Calculate the total amount spent on Speaker Gifts and list the name of the event they were spent on. total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
        "difficulty": "simple",
        "raw_question": "Calculate the total amount spent on Speaker Gifts and list the name of the event they were spent on."
    },
    {
        "question_id": 305,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Fateful hour?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Fateful hour'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Fateful hour?"
    },
    {
        "question_id": 306,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Hidden agenda?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Hidden agenda'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Hidden agenda?"
    },
    {
        "question_id": 307,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Double strike?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Double strike'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Double strike?"
    },
    {
        "question_id": 308,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Academy Researchers'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Academy Researchers'?"
    },
    {
        "question_id": 309,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Academy Researchers\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Academy Researchers\"?"
    },
    {
        "question_id": 310,
        "db_id": "card_games",
        "question": "What is the status of card \"Academy Researchers\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Academy Researchers\"?"
    },
    {
        "question_id": 311,
        "db_id": "card_games",
        "question": "What is the type of card \"Academy Researchers\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Academy Researchers\"?"
    },
    {
        "question_id": 312,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Academy Researchers\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Academy Researchers\"?"
    },
    {
        "question_id": 313,
        "db_id": "card_games",
        "question": "Write down the ruling of Academy Researchers. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Academy Researchers."
    },
    {
        "question_id": 314,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Academy Researchers\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Academy Researchers\"?"
    },
    {
        "question_id": 315,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Academy Researchers\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Academy Researchers\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 316,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Academy Researchers' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Academy Researchers' created?"
    },
    {
        "question_id": 317,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Academy Researchers\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Academy Researchers'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Academy Researchers\" in it?"
    },
    {
        "question_id": 318,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Academy Researchers\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Academy Researchers' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Academy Researchers\" is in?"
    },
    {
        "question_id": 319,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Academy Researchers\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Academy Researchers' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Academy Researchers\" is in it."
    },
    {
        "question_id": 320,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Ongoing Scheme and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Ongoing Scheme'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Ongoing Scheme and the date of rulings for these cards."
    },
    {
        "question_id": 321,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph ids and texts for the document with name 'Summer Show'.",
        "evidence": "",
        "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Summer Show'",
        "difficulty": "simple",
        "raw_question": "Show all paragraph ids and texts for the document with name 'Summer Show'."
    },
    {
        "question_id": 322,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and texts of paragraphs in the document titled 'Summer Show'?",
        "evidence": "",
        "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Summer Show'",
        "difficulty": "simple",
        "raw_question": "What are the ids and texts of paragraphs in the document titled 'Summer Show'?"
    },
    {
        "question_id": 323,
        "db_id": "formula_1",
        "question": "How old is the youngest Argentine driver? What is his name? date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Argentine' ORDER BY dob DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "How old is the youngest Argentine driver? What is his name?"
    },
    {
        "question_id": 324,
        "db_id": "formula_1",
        "question": "Please list the surnames of all the Argentine drivers. Italian refers to nationality = 'italian'",
        "evidence": "Italian refers to nationality = 'italian'",
        "SQL": "SELECT surname FROM drivers WHERE nationality = 'Argentine'",
        "difficulty": "simple",
        "raw_question": "Please list the surnames of all the Argentine drivers."
    },
    {
        "question_id": 325,
        "db_id": "formula_1",
        "question": "Please state the reference name of the oldest Argentine driver. oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'Argentine' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please state the reference name of the oldest Argentine driver."
    },
    {
        "question_id": 326,
        "db_id": "formula_1",
        "question": "Find the full name, Wiki Pedia page link, and date of birth of Argentine drivers born between 1971 and 1985. List it in descending order of date of birth. FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
        "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
        "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'Argentine' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "difficulty": "simple",
        "raw_question": "Find the full name, Wiki Pedia page link, and date of birth of Argentine drivers born between 1971 and 1985. List it in descending order of date of birth."
    },
    {
        "question_id": 327,
        "db_id": "formula_1",
        "question": "How old is the youngest Monegasque driver? What is his name? date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Monegasque' ORDER BY dob DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "How old is the youngest Monegasque driver? What is his name?"
    },
    {
        "question_id": 328,
        "db_id": "formula_1",
        "question": "Please list the surnames of all the Monegasque drivers. Italian refers to nationality = 'italian'",
        "evidence": "Italian refers to nationality = 'italian'",
        "SQL": "SELECT surname FROM drivers WHERE nationality = 'Monegasque'",
        "difficulty": "simple",
        "raw_question": "Please list the surnames of all the Monegasque drivers."
    },
    {
        "question_id": 329,
        "db_id": "formula_1",
        "question": "Please state the reference name of the oldest Monegasque driver. oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'Monegasque' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please state the reference name of the oldest Monegasque driver."
    },
    {
        "question_id": 330,
        "db_id": "student_club",
        "question": "Give the location for \"Spring Elections\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'Spring Elections'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"Spring Elections\"."
    },
    {
        "question_id": 331,
        "db_id": "student_club",
        "question": "List the names of closed event as \"Community Service\" that was closed from 3/15/2019 to 3/20/2020. name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20';",
        "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
        "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Community Service' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
        "difficulty": "simple",
        "raw_question": "List the names of closed event as \"Community Service\" that was closed from 3/15/2019 to 3/20/2020."
    },
    {
        "question_id": 332,
        "db_id": "thrombosis_prediction",
        "question": "What is the most common sign of patients with Photosensitivities disease? the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Photosensitivities' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common sign of patients with Photosensitivities disease?"
    },
    {
        "question_id": 333,
        "db_id": "student_club",
        "question": "Which budget category does the expense 'Club shirts' fall to? 'Posters' refers to expense description",
        "evidence": "'Posters' refers to expense description",
        "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Club shirts'",
        "difficulty": "simple",
        "raw_question": "Which budget category does the expense 'Club shirts' fall to?"
    },
    {
        "question_id": 334,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Loyal Retainers\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Loyal Retainers'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Loyal Retainers\"?"
    },
    {
        "question_id": 335,
        "db_id": "student_club",
        "question": "List the last name of all the students who majored Communication Studies. \n 'Law and Constitutional Studies' is the major name",
        "evidence": "'Law and Constitutional Studies' is the major name",
        "SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Communication Studies'",
        "difficulty": "simple",
        "raw_question": "List the last name of all the students who majored Communication Studies. \n"
    },
    {
        "question_id": 336,
        "db_id": "student_club",
        "question": "Among the students majored in Communication Studies, who have attended the Community Theater event? majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Communication Studies'",
        "difficulty": "simple",
        "raw_question": "Among the students majored in Communication Studies, who have attended the Community Theater event?"
    },
    {
        "question_id": 337,
        "db_id": "student_club",
        "question": "List out the position of members who joined major of Communication Studies. 'Business' is the major name",
        "evidence": "'Business' is the major name",
        "SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Communication Studies'",
        "difficulty": "simple",
        "raw_question": "List out the position of members who joined major of Communication Studies."
    },
    {
        "question_id": 338,
        "db_id": "student_club",
        "question": "List the last names of students under the Communication Studies major and include their phone numbers. 'Elementary Education' is the major name; phone numbers refers to phone",
        "evidence": "'Elementary Education' is the major name; phone numbers refers to phone",
        "SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Communication Studies'",
        "difficulty": "simple",
        "raw_question": "List the last names of students under the Communication Studies major and include their phone numbers."
    },
    {
        "question_id": 339,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Weather Control'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Weather Control'."
    },
    {
        "question_id": 340,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Weather Control? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Weather Control?"
    },
    {
        "question_id": 341,
        "db_id": "superhero",
        "question": "List the name of superheroes with Weather Control power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Weather Control power."
    },
    {
        "question_id": 342,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Weather Control power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Weather Control power."
    },
    {
        "question_id": 343,
        "db_id": "superhero",
        "question": "What is the power ID of Weather Control? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Weather Control'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Weather Control?"
    },
    {
        "question_id": 344,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Weather Control. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Weather Control'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Weather Control."
    },
    {
        "question_id": 345,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'hypothesis-testing.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'hypothesis-testing' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'hypothesis-testing.'"
    },
    {
        "question_id": 346,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the hypothesis-testing Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'hypothesis-testing'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the hypothesis-testing Badges."
    },
    {
        "question_id": 347,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the hypothesis-testing badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'hypothesis-testing'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the hypothesis-testing badge."
    },
    {
        "question_id": 348,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first hypothesis-testing badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'hypothesis-testing' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first hypothesis-testing badge?"
    },
    {
        "question_id": 349,
        "db_id": "car_1",
        "question": "For model mercedes-benz, how many cylinders does the car with the least accelerate have?",
        "evidence": "",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
        "difficulty": "simple",
        "raw_question": "For model mercedes-benz, how many cylinders does the car with the least accelerate have?"
    },
    {
        "question_id": 350,
        "db_id": "car_1",
        "question": "For a mercedes-benz model, how many cylinders does the version with least accelerate have?",
        "evidence": "",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
        "difficulty": "simple",
        "raw_question": "For a mercedes-benz model, how many cylinders does the version with least accelerate have?"
    },
    {
        "question_id": 351,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Zoltan Boros & Gabor Szikszai. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Zoltan Boros & Gabor Szikszai'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Zoltan Boros & Gabor Szikszai."
    },
    {
        "question_id": 352,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Zoltan Boros & Gabor Szikszai cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Zoltan Boros & Gabor Szikszai'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Zoltan Boros & Gabor Szikszai cost in total?"
    },
    {
        "question_id": 353,
        "db_id": "card_games",
        "question": "Is there any card from Zoltan Boros & Gabor Szikszai artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Zoltan Boros & Gabor Szikszai' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Zoltan Boros & Gabor Szikszai artist in pauper format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 354,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Zoltan Boros & Gabor Szikszai created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Zoltan Boros & Gabor Szikszai'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Zoltan Boros & Gabor Szikszai created?"
    },
    {
        "question_id": 355,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Zoltan Boros & Gabor Szikszai? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Zoltan Boros & Gabor Szikszai' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Zoltan Boros & Gabor Szikszai? List them in descending order of dates."
    },
    {
        "question_id": 356,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Zoltan Boros & Gabor Szikszai worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Zoltan Boros & Gabor Szikszai'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Zoltan Boros & Gabor Szikszai worked on and find any banned cards if there are any."
    },
    {
        "question_id": 357,
        "db_id": "card_games",
        "question": "List the artists who illustrated cards with black borders which are available only in arena,mtgo. black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena,mtgo' AND BorderColor = 'black'",
        "difficulty": "simple",
        "raw_question": "List the artists who illustrated cards with black borders which are available only in arena,mtgo."
    },
    {
        "question_id": 358,
        "db_id": "card_games",
        "question": "Which artist designed the card whose promotional name is \"Godzilla, King of the Monsters\"? promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
        "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
        "SQL": "SELECT artist FROM cards WHERE flavorName = 'Godzilla, King of the Monsters'",
        "difficulty": "simple",
        "raw_question": "Which artist designed the card whose promotional name is \"Godzilla, King of the Monsters\"?"
    },
    {
        "question_id": 359,
        "db_id": "card_games",
        "question": "How many cards have frame effect as legendary,extendedart? List out the id of those cards. \nframe effect as extendedart refers to frameEffects = 'extendedart'",
        "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
        "SQL": "SELECT id FROM cards WHERE frameEffects = 'legendary,extendedart' GROUP BY id",
        "difficulty": "simple",
        "raw_question": "How many cards have frame effect as legendary,extendedart? List out the id of those cards."
    },
    {
        "question_id": 360,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Flash,Reach?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Flash,Reach'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Flash,Reach?"
    },
    {
        "question_id": 361,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Creature - Angel and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Angel'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Creature - Angel and the date of rulings for these cards."
    },
    {
        "question_id": 362,
        "db_id": "card_games",
        "question": "Among the Creature - Angel cards, which are black color and comes with foreign languague translation? Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Angel' AND T1.colors = 'B'",
        "difficulty": "simple",
        "raw_question": "Among the Creature - Angel cards, which are black color and comes with foreign languague translation?"
    },
    {
        "question_id": 363,
        "db_id": "card_games",
        "question": "Please list the websites where I can purchase the cards that have the promotional type of \"tourney,fnm\". promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'tourney,fnm'",
        "difficulty": "simple",
        "raw_question": "Please list the websites where I can purchase the cards that have the promotional type of \"tourney,fnm\"."
    },
    {
        "question_id": 364,
        "db_id": "card_games",
        "question": "Lists by ID all Tribal,Instant-type cards with legal status. legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Tribal,Instant'",
        "difficulty": "simple",
        "raw_question": "Lists by ID all Tribal,Instant-type cards with legal status."
    },
    {
        "question_id": 365,
        "db_id": "card_games",
        "question": "Name the foreign name of the card that has set (HOU) watermark? List out the type of this card.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
        "difficulty": "simple",
        "raw_question": "Name the foreign name of the card that has set (HOU) watermark? List out the type of this card."
    },
    {
        "question_id": 366,
        "db_id": "card_games",
        "question": "What is the language and flavor text of the card that has set (HOU) watermark? List out the type of this card.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
        "difficulty": "simple",
        "raw_question": "What is the language and flavor text of the card that has set (HOU) watermark? List out the type of this card."
    },
    {
        "question_id": 367,
        "db_id": "card_games",
        "question": "What is the language of the card that has set (HOU) watermark? List out the type of this card.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
        "difficulty": "simple",
        "raw_question": "What is the language of the card that has set (HOU) watermark? List out the type of this card."
    },
    {
        "question_id": 368,
        "db_id": "formula_1",
        "question": "Please list the year during which the race is held on circuits in Monte-Carlo. Shanghai is a name of location;",
        "evidence": "Shanghai is a name of location;",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Monte-Carlo'",
        "difficulty": "simple",
        "raw_question": "Please list the year during which the race is held on circuits in Monte-Carlo."
    },
    {
        "question_id": 369,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?"
    },
    {
        "question_id": 370,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Circuit de Barcelona-Catalunya? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Circuit de Barcelona-Catalunya?"
    },
    {
        "question_id": 371,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Circuit de Barcelona-Catalunya.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Circuit de Barcelona-Catalunya."
    },
    {
        "question_id": 372,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Circuit de Barcelona-Catalunya? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Circuit de Barcelona-Catalunya?"
    },
    {
        "question_id": 373,
        "db_id": "formula_1",
        "question": "What's the reference name of Circuit de Barcelona-Catalunya? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Circuit de Barcelona-Catalunya?"
    },
    {
        "question_id": 374,
        "db_id": "formula_1",
        "question": "Please list all the years that Circuit de Barcelona-Catalunya was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Circuit de Barcelona-Catalunya was used in a Formula_1 race."
    },
    {
        "question_id": 375,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Circuit de Barcelona-Catalunya. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Circuit de Barcelona-Catalunya."
    },
    {
        "question_id": 376,
        "db_id": "formula_1",
        "question": "In which location does the Circuit de Barcelona-Catalunya circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'",
        "difficulty": "simple",
        "raw_question": "In which location does the Circuit de Barcelona-Catalunya circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 377,
        "db_id": "superhero",
        "question": "Please list the superhero names of all the superheroes that have blue eyes and Black/Blue hair. blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Black/Blue'",
        "difficulty": "simple",
        "raw_question": "Please list the superhero names of all the superheroes that have blue eyes and Black/Blue hair."
    },
    {
        "question_id": 378,
        "db_id": "superhero",
        "question": "Which superheroes have blue eyes with Black/Blue hair? which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
        "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Black/Blue'",
        "difficulty": "simple",
        "raw_question": "Which superheroes have blue eyes with Black/Blue hair?"
    },
    {
        "question_id": 379,
        "db_id": "superhero",
        "question": "Give the race of the Black/Blue-haired male superhero. blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Black/Blue' AND T4.gender = 'Male'",
        "difficulty": "simple",
        "raw_question": "Give the race of the Black/Blue-haired male superhero."
    },
    {
        "question_id": 380,
        "db_id": "financial",
        "question": "List account ID and account opening date for accounts from 'Hl.m. Praha'. A2 refers to the names of districts.",
        "evidence": "A2 refers to the names of districts.",
        "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha'",
        "difficulty": "simple",
        "raw_question": "List account ID and account opening date for accounts from 'Hl.m. Praha'."
    },
    {
        "question_id": 381,
        "db_id": "formula_1",
        "question": "How old is the youngest Argentine-Italian driver? What is his name? date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Argentine-Italian' ORDER BY dob DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "How old is the youngest Argentine-Italian driver? What is his name?"
    },
    {
        "question_id": 382,
        "db_id": "formula_1",
        "question": "Please list the surnames of all the Argentine-Italian drivers. Italian refers to nationality = 'italian'",
        "evidence": "Italian refers to nationality = 'italian'",
        "SQL": "SELECT surname FROM drivers WHERE nationality = 'Argentine-Italian'",
        "difficulty": "simple",
        "raw_question": "Please list the surnames of all the Argentine-Italian drivers."
    },
    {
        "question_id": 383,
        "db_id": "formula_1",
        "question": "Please state the reference name of the oldest Argentine-Italian driver. oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'Argentine-Italian' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please state the reference name of the oldest Argentine-Italian driver."
    },
    {
        "question_id": 384,
        "db_id": "student_club",
        "question": "Give the location for \"Officers meeting - January\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'Officers meeting - January'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"Officers meeting - January\"."
    },
    {
        "question_id": 385,
        "db_id": "student_club",
        "question": "Calculate the amount budgeted for 'Officers meeting - January' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted. 'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Officers meeting - January' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "difficulty": "simple",
        "raw_question": "Calculate the amount budgeted for 'Officers meeting - January' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
    },
    {
        "question_id": 386,
        "db_id": "student_club",
        "question": "What category was budgeted for the 'Officers meeting - January' event and how much was the amount budgeted for that category? amount budgeted refers to amount, 'January Speaker' is the event name;",
        "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Officers meeting - January'",
        "difficulty": "simple",
        "raw_question": "What category was budgeted for the 'Officers meeting - January' event and how much was the amount budgeted for that category?"
    },
    {
        "question_id": 387,
        "db_id": "thrombosis_prediction",
        "question": "Lists all patients by ID who were diagnosed with MCTD, AMI's and had their exams between 01/01/197 and 12/31/1997. 'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'MCTD, AMI'",
        "difficulty": "simple",
        "raw_question": "Lists all patients by ID who were diagnosed with MCTD, AMI's and had their exams between 01/01/197 and 12/31/1997."
    },
    {
        "question_id": 388,
        "db_id": "thrombosis_prediction",
        "question": "What is the most common sign of patients with MCTD, AMI disease? the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'MCTD, AMI' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common sign of patients with MCTD, AMI disease?"
    },
    {
        "question_id": 389,
        "db_id": "student_club",
        "question": "Which budget category does the expense 'Post Cards, Posters' fall to? 'Posters' refers to expense description",
        "evidence": "'Posters' refers to expense description",
        "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Post Cards, Posters'",
        "difficulty": "simple",
        "raw_question": "Which budget category does the expense 'Post Cards, Posters' fall to?"
    },
    {
        "question_id": 390,
        "db_id": "card_games",
        "question": "Name all the cards which have alternative language in Portuguese (Brazil). Japanese' is the language;",
        "evidence": "Japanese' is the language;",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
        "difficulty": "simple",
        "raw_question": "Name all the cards which have alternative language in Portuguese (Brazil)."
    },
    {
        "question_id": 391,
        "db_id": "card_games",
        "question": "Please provide the names of the artists who illustrated the card art in Portuguese (Brazil). Phyrexian' is the language; name of artists refers to artist;",
        "evidence": "Phyrexian' is the language; name of artists refers to artist;",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
        "difficulty": "simple",
        "raw_question": "Please provide the names of the artists who illustrated the card art in Portuguese (Brazil)."
    },
    {
        "question_id": 392,
        "db_id": "card_games",
        "question": "List down the name of artists for cards in Portuguese (Brazil). Chinese Simplified' is the language;",
        "evidence": "Chinese Simplified' is the language;",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
        "difficulty": "simple",
        "raw_question": "List down the name of artists for cards in Portuguese (Brazil)."
    },
    {
        "question_id": 393,
        "db_id": "card_games",
        "question": "What are the cards that only available in paper and Portuguese (Brazil) language? available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Portuguese (Brazil)'",
        "difficulty": "simple",
        "raw_question": "What are the cards that only available in paper and Portuguese (Brazil) language?"
    },
    {
        "question_id": 394,
        "db_id": "card_games",
        "question": "Calculate the percentage of cards in Portuguese (Brazil). List them by name. Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Portuguese (Brazil)'",
        "difficulty": "simple",
        "raw_question": "Calculate the percentage of cards in Portuguese (Brazil). List them by name."
    },
    {
        "question_id": 395,
        "db_id": "card_games",
        "question": "Lists all types of cards in Portuguese (Brazil). German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
        "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
        "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Lists all types of cards in Portuguese (Brazil)."
    },
    {
        "question_id": 396,
        "db_id": "card_games",
        "question": "Please list the Portuguese (Brazil) text ruling of all the cards in the set Coldsnap. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)'",
        "difficulty": "simple",
        "raw_question": "Please list the Portuguese (Brazil) text ruling of all the cards in the set Coldsnap."
    },
    {
        "question_id": 397,
        "db_id": "card_games",
        "question": "Please list the Portuguese (Brazil) names of the cards in the set Coldsnap with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)' ORDER BY T2.convertedManaCost DESC",
        "difficulty": "simple",
        "raw_question": "Please list the Portuguese (Brazil) names of the cards in the set Coldsnap with the highest converted mana cost."
    },
    {
        "question_id": 398,
        "db_id": "thrombosis_prediction",
        "question": "The oldest RA, SLE susp patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'RA, SLE susp' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "The oldest RA, SLE susp patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?"
    },
    {
        "question_id": 399,
        "db_id": "thrombosis_prediction",
        "question": "What was the gender of the first RA, SLE susp diagnosed patient? gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'RA, SLE susp' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What was the gender of the first RA, SLE susp diagnosed patient?"
    },
    {
        "question_id": 400,
        "db_id": "thrombosis_prediction",
        "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with RA, SLE susp. PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
        "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
        "SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'RA, SLE susp' AND T2.PLT BETWEEN 100 AND 400",
        "difficulty": "simple",
        "raw_question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with RA, SLE susp."
    },
    {
        "question_id": 401,
        "db_id": "european_football_2",
        "question": "What is the attacking work rate of the football playerr Abdul-Yakinu Iddi?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
        "difficulty": "simple",
        "raw_question": "What is the attacking work rate of the football playerr Abdul-Yakinu Iddi?"
    },
    {
        "question_id": 402,
        "db_id": "european_football_2",
        "question": "What is the overall rating of the football player Abdul-Yakinu Iddi in year 2011? in year 2011 refers to strftime('%Y', date) = '2011';",
        "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi' AND strftime('%Y', t2.date) = '2011'",
        "difficulty": "simple",
        "raw_question": "What is the overall rating of the football player Abdul-Yakinu Iddi in year 2011?"
    },
    {
        "question_id": 403,
        "db_id": "european_football_2",
        "question": "What is the defensive work rate of the football player Abdul-Yakinu Iddi\n?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
        "difficulty": "simple",
        "raw_question": "What is the defensive work rate of the football player Abdul-Yakinu Iddi\n?"
    },
    {
        "question_id": 404,
        "db_id": "european_football_2",
        "question": "What is Abdul-Yakinu Iddi's potential score? potential score refers to potential;",
        "evidence": "potential score refers to potential;",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
        "difficulty": "simple",
        "raw_question": "What is Abdul-Yakinu Iddi's potential score?"
    },
    {
        "question_id": 405,
        "db_id": "european_football_2",
        "question": "What's the heading accuracy of Abdul-Yakinu Iddi?",
        "evidence": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
        "difficulty": "simple",
        "raw_question": "What's the heading accuracy of Abdul-Yakinu Iddi?"
    },
    {
        "question_id": 406,
        "db_id": "european_football_2",
        "question": "Which foot is preferred by Abdul-Yakinu Iddi? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
        "difficulty": "simple",
        "raw_question": "Which foot is preferred by Abdul-Yakinu Iddi?"
    },
    {
        "question_id": 407,
        "db_id": "european_football_2",
        "question": "What was the potiential for Abdul-Yakinu Iddi on 2010/8/30? Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Abdul-Yakinu Iddi'",
        "difficulty": "simple",
        "raw_question": "What was the potiential for Abdul-Yakinu Iddi on 2010/8/30?"
    },
    {
        "question_id": 408,
        "db_id": "european_football_2",
        "question": "Tell the defensive work rate for Abdul-Yakinu Iddi on 2013/2/22. Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
        "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
        "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Abdul-Yakinu Iddi'",
        "difficulty": "simple",
        "raw_question": "Tell the defensive work rate for Abdul-Yakinu Iddi on 2013/2/22."
    },
    {
        "question_id": 409,
        "db_id": "european_football_2",
        "question": "When was the first time did Abdul-Yakinu Iddi have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the first time did Abdul-Yakinu Iddi have his highest crossing score? Give the date."
    },
    {
        "question_id": 410,
        "db_id": "bbc_channels",
        "question": "What is the name of the director who is in the \"Caesar III: An Empire Without End\" program?",
        "evidence": "",
        "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Caesar III: An Empire Without End'",
        "difficulty": "simple",
        "raw_question": "What is the name of the director who is in the \"Caesar III: An Empire Without End\" program?"
    },
    {
        "question_id": 411,
        "db_id": "superhero",
        "question": "Rank heroes published by Hanna-Barbera by their height in descending order. name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Hanna-Barbera'",
        "difficulty": "simple",
        "raw_question": "Rank heroes published by Hanna-Barbera by their height in descending order."
    },
    {
        "question_id": 412,
        "db_id": "superhero",
        "question": "Rank superheroes from Hanna-Barbera by their eye color popularity, starting with the most common color. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Hanna-Barbera' GROUP BY colour.colour",
        "difficulty": "simple",
        "raw_question": "Rank superheroes from Hanna-Barbera by their eye color popularity, starting with the most common color."
    },
    {
        "question_id": 413,
        "db_id": "superhero",
        "question": "List the superheroes from Hanna-Barbera who have the super power of 'Super Strength'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Hanna-Barbera' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Hanna-Barbera who have the super power of 'Super Strength'."
    },
    {
        "question_id": 414,
        "db_id": "superhero",
        "question": "Give the publisher ID of Hanna-Barbera. Star Trek is the publisher_name;",
        "evidence": "Star Trek is the publisher_name;",
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Hanna-Barbera'",
        "difficulty": "simple",
        "raw_question": "Give the publisher ID of Hanna-Barbera."
    },
    {
        "question_id": 415,
        "db_id": "superhero",
        "question": "Which superhero has the most durability published by Hanna-Barbera? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Hanna-Barbera' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which superhero has the most durability published by Hanna-Barbera?"
    },
    {
        "question_id": 416,
        "db_id": "superhero",
        "question": "Identify the heaviest superhero in Hanna-Barbera. heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Hanna-Barbera' ORDER BY T1.weight_kg DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the heaviest superhero in Hanna-Barbera."
    },
    {
        "question_id": 417,
        "db_id": "superhero",
        "question": "Give the name of the God / Eternal superheroes. alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'God / Eternal'",
        "difficulty": "simple",
        "raw_question": "Give the name of the God / Eternal superheroes."
    },
    {
        "question_id": 418,
        "db_id": "superhero",
        "question": "List down at least five full name of God / Eternal superheroes. Demi-God superheroes refers to race = 'Demi-God'",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'God / Eternal'",
        "difficulty": "simple",
        "raw_question": "List down at least five full name of God / Eternal superheroes."
    },
    {
        "question_id": 419,
        "db_id": "superhero",
        "question": "Provide the full names of God / Eternal heroes. vampire heroes refers to race = 'Vampire';",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'God / Eternal'",
        "difficulty": "simple",
        "raw_question": "Provide the full names of God / Eternal heroes."
    },
    {
        "question_id": 420,
        "db_id": "california_schools",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Frank (Butch). List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Frank (Butch)'",
        "difficulty": "simple",
        "raw_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Frank (Butch). List the district code of the school."
    },
    {
        "question_id": 421,
        "db_id": "california_schools",
        "question": "What is the most common type of grade span served in the city of Agua-Dulce?",
        "evidence": "",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Agua-Dulce' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common type of grade span served in the city of Agua-Dulce?"
    },
    {
        "question_id": 422,
        "db_id": "card_games",
        "question": "List all the sets available in Portuguese (Brazil) translation. State the total number of cards per set. Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
        "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
        "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)'",
        "difficulty": "simple",
        "raw_question": "List all the sets available in Portuguese (Brazil) translation. State the total number of cards per set."
    },
    {
        "question_id": 423,
        "db_id": "card_games",
        "question": "Lists the set code of all cards translated into Portuguese (Brazil). Spanish refer to language; set code refers to setCode",
        "evidence": "Spanish refer to language; set code refers to setCode",
        "SQL": "SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)'",
        "difficulty": "simple",
        "raw_question": "Lists the set code of all cards translated into Portuguese (Brazil)."
    },
    {
        "question_id": 424,
        "db_id": "card_games",
        "question": "Please list top two sets of cards with their IDs that have Portuguese (Brazil)-language cards and are located in the Shadowmoor block in alphabetical order.",
        "evidence": "",
        "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Portuguese (Brazil)' ORDER BY T1.id LIMIT 2",
        "difficulty": "simple",
        "raw_question": "Please list top two sets of cards with their IDs that have Portuguese (Brazil)-language cards and are located in the Shadowmoor block in alphabetical order."
    },
    {
        "question_id": 425,
        "db_id": "card_games",
        "question": "Which Portuguese (Brazil) set of cards contains the most cards overall? Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)",
        "evidence": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)",
        "SQL": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which Portuguese (Brazil) set of cards contains the most cards overall?"
    },
    {
        "question_id": 426,
        "db_id": "card_games",
        "question": "What's the Portuguese (Brazil) name of the set of cards with \"Tendo Ice Bridge\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'Portuguese (Brazil)' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the Portuguese (Brazil) name of the set of cards with \"Tendo Ice Bridge\" is in?"
    },
    {
        "question_id": 427,
        "db_id": "card_games",
        "question": "Tell the Portuguese (Brazil) name of the set which card \"Fellwar Stone\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Portuguese (Brazil)' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Portuguese (Brazil) name of the set which card \"Fellwar Stone\" is in it."
    },
    {
        "question_id": 428,
        "db_id": "card_games",
        "question": "Please list the names of the cards in the set \"From The Vault: Lore\". card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
        "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'From The Vault: Lore'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the cards in the set \"From The Vault: Lore\"."
    },
    {
        "question_id": 429,
        "db_id": "card_games",
        "question": "How many cards are there in the base set of \"From The Vault: Lore\"? \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
        "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
        "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
        "difficulty": "simple",
        "raw_question": "How many cards are there in the base set of \"From The Vault: Lore\"?"
    },
    {
        "question_id": 430,
        "db_id": "card_games",
        "question": "What is the expansion type of the set \"From The Vault: Lore\"? card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
        "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
        "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
        "difficulty": "simple",
        "raw_question": "What is the expansion type of the set \"From The Vault: Lore\"?"
    },
    {
        "question_id": 431,
        "db_id": "card_games",
        "question": "What is the number of cards are there in the set of \"From The Vault: Lore\"? number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
        "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
        "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
        "difficulty": "simple",
        "raw_question": "What is the number of cards are there in the set of \"From The Vault: Lore\"?"
    },
    {
        "question_id": 432,
        "db_id": "card_games",
        "question": "What is the release date for the set \"From The Vault: Lore\"? release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'",
        "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'",
        "SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
        "difficulty": "simple",
        "raw_question": "What is the release date for the set \"From The Vault: Lore\"?"
    },
    {
        "question_id": 433,
        "db_id": "card_games",
        "question": "Give the code of sets have draft_innovation type of 'expansion'? code of sets refers to setCode",
        "evidence": "code of sets refers to setCode",
        "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'draft_innovation' GROUP BY T2.setCode",
        "difficulty": "simple",
        "raw_question": "Give the code of sets have draft_innovation type of 'expansion'?"
    },
    {
        "question_id": 434,
        "db_id": "card_games",
        "question": "Give the code of sets have expansion draft_innovation type? code of sets refers to setCode",
        "evidence": "code of sets refers to setCode",
        "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'draft_innovation'",
        "difficulty": "simple",
        "raw_question": "Give the code of sets have expansion draft_innovation type?"
    },
    {
        "question_id": 435,
        "db_id": "card_games",
        "question": "Among the sets whose expansion type is draft_innovation, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "SQL": "SELECT id FROM sets WHERE type = 'draft_innovation' ORDER BY totalSetSize DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among the sets whose expansion type is draft_innovation, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set."
    },
    {
        "question_id": 436,
        "db_id": "superhero",
        "question": "What is the eyes colour of Teth-Adam? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Teth-Adam'",
        "difficulty": "simple",
        "raw_question": "What is the eyes colour of Teth-Adam?"
    },
    {
        "question_id": 437,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Teth-Adam. hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Teth-Adam'",
        "difficulty": "simple",
        "raw_question": "Provide the hero name and race of Teth-Adam."
    },
    {
        "question_id": 438,
        "db_id": "superhero",
        "question": "List the powers of Teth-Adam. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Teth-Adam'",
        "difficulty": "simple",
        "raw_question": "List the powers of Teth-Adam."
    },
    {
        "question_id": 439,
        "db_id": "superhero",
        "question": "Provide the eye colour of the superhero who has Teth-Adam as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Teth-Adam'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colour of the superhero who has Teth-Adam as their full name."
    },
    {
        "question_id": 440,
        "db_id": "superhero",
        "question": "What is the superpowers of the superhero has Teth-Adam as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Teth-Adam'",
        "difficulty": "simple",
        "raw_question": "What is the superpowers of the superhero has Teth-Adam as their full name?"
    },
    {
        "question_id": 441,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Teth-Adam. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Teth-Adam'",
        "difficulty": "simple",
        "raw_question": "Name the superhero, otherwise known as Teth-Adam."
    },
    {
        "question_id": 442,
        "db_id": "superhero",
        "question": "Please list all the superpowers of Ant-Man. 3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "Please list all the superpowers of Ant-Man."
    },
    {
        "question_id": 443,
        "db_id": "superhero",
        "question": "What is the colour of Ant-Man's skin? Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "What is the colour of Ant-Man's skin?"
    },
    {
        "question_id": 444,
        "db_id": "superhero",
        "question": "Who is the publisher of Ant-Man? the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "Who is the publisher of Ant-Man?"
    },
    {
        "question_id": 445,
        "db_id": "superhero",
        "question": "What is the publisher's name of Ant-Man? Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "What is the publisher's name of Ant-Man?"
    },
    {
        "question_id": 446,
        "db_id": "superhero",
        "question": "What is Ant-Man's race? Copycat is the superhero_name;",
        "evidence": "Copycat is the superhero_name;",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "What is Ant-Man's race?"
    },
    {
        "question_id": 447,
        "db_id": "superhero",
        "question": "Provide the superpowers of the superhero called Ant-Man. superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "Provide the superpowers of the superhero called Ant-Man."
    },
    {
        "question_id": 448,
        "db_id": "superhero",
        "question": "Indicate the attribute value of superhero Ant-Man. Abomination refers to superhero_name = 'Abomination';",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "Indicate the attribute value of superhero Ant-Man."
    },
    {
        "question_id": 449,
        "db_id": "superhero",
        "question": "Which group does superhero Ant-Man belong to? group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "Which group does superhero Ant-Man belong to?"
    },
    {
        "question_id": 450,
        "db_id": "superhero",
        "question": "What is the gender of Ant-Man hero? Agent 13 hero refers to superhero_name = 'Agent 13';",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "What is the gender of Ant-Man hero?"
    },
    {
        "question_id": 451,
        "db_id": "superhero",
        "question": "What are the race and alignment of Ant-Man? Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "What are the race and alignment of Ant-Man?"
    },
    {
        "question_id": 452,
        "db_id": "superhero",
        "question": "What is Ant-Man's superpower? Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "What is Ant-Man's superpower?"
    },
    {
        "question_id": 453,
        "db_id": "superhero",
        "question": "State all of Ant-Man's attributes along with their values. 3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "State all of Ant-Man's attributes along with their values."
    },
    {
        "question_id": 454,
        "db_id": "superhero",
        "question": "Give the alignment and superpowers of the superhero named Ant-Man. superpowers refers to power_name;",
        "evidence": "superpowers refers to power_name;",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "Give the alignment and superpowers of the superhero named Ant-Man."
    },
    {
        "question_id": 455,
        "db_id": "superhero",
        "question": "List down Ant-Man's superpowers. Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "List down Ant-Man's superpowers."
    },
    {
        "question_id": 456,
        "db_id": "superhero",
        "question": "Identify the weakest attribute of the Ant-Man. weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Ant-Man' ORDER BY T2.attribute_value ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the weakest attribute of the Ant-Man."
    },
    {
        "question_id": 457,
        "db_id": "superhero",
        "question": "What is Ant-Man's eye colour? Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "What is Ant-Man's eye colour?"
    },
    {
        "question_id": 458,
        "db_id": "superhero",
        "question": "Provide the full name of the superhero named Ant-Man.",
        "evidence": "",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "Provide the full name of the superhero named Ant-Man."
    },
    {
        "question_id": 459,
        "db_id": "superhero",
        "question": "List the attribute value of the superhero named Ant-Man.",
        "evidence": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "List the attribute value of the superhero named Ant-Man."
    },
    {
        "question_id": 460,
        "db_id": "superhero",
        "question": "Give the eye colour of Ant-Man. eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
        "difficulty": "simple",
        "raw_question": "Give the eye colour of Ant-Man."
    },
    {
        "question_id": 461,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Technopath/Cyberpath'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Technopath/Cyberpath' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Technopath/Cyberpath'."
    },
    {
        "question_id": 462,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Technopath/Cyberpath? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Technopath/Cyberpath'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Technopath/Cyberpath?"
    },
    {
        "question_id": 463,
        "db_id": "superhero",
        "question": "List the name of superheroes with Technopath/Cyberpath power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Technopath/Cyberpath'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Technopath/Cyberpath power."
    },
    {
        "question_id": 464,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Technopath/Cyberpath power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Technopath/Cyberpath'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Technopath/Cyberpath power."
    },
    {
        "question_id": 465,
        "db_id": "superhero",
        "question": "What is the power ID of Technopath/Cyberpath? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Technopath/Cyberpath'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Technopath/Cyberpath?"
    },
    {
        "question_id": 466,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Technopath/Cyberpath. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Technopath/Cyberpath'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Technopath/Cyberpath."
    },
    {
        "question_id": 467,
        "db_id": "codebase_community",
        "question": "From which post is the tag \"hypothesis-testing\" excerpted from? Please give the body of the post. \"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'hypothesis-testing'",
        "difficulty": "simple",
        "raw_question": "From which post is the tag \"hypothesis-testing\" excerpted from? Please give the body of the post."
    },
    {
        "question_id": 468,
        "db_id": "codebase_community",
        "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag. user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "difficulty": "simple",
        "raw_question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag."
    },
    {
        "question_id": 469,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named hypothesis-testing? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'hypothesis-testing'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named hypothesis-testing?"
    },
    {
        "question_id": 470,
        "db_id": "european_football_2",
        "question": "What is the passing class of B-M team? passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';",
        "evidence": "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'B-M'",
        "difficulty": "simple",
        "raw_question": "What is the passing class of B-M team?"
    },
    {
        "question_id": 471,
        "db_id": "european_football_2",
        "question": "What's the long name for the team B-M? long name for the team refers to team_long_name; team_short_name = 'GEN';",
        "evidence": "long name for the team refers to team_long_name; team_short_name = 'GEN';",
        "SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'B-M'",
        "difficulty": "simple",
        "raw_question": "What's the long name for the team B-M?"
    },
    {
        "question_id": 472,
        "db_id": "codebase_community",
        "question": "Please list the titles of the posts owned by the user hannes.koller? \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "Please list the titles of the posts owned by the user hannes.koller?"
    },
    {
        "question_id": 473,
        "db_id": "codebase_community",
        "question": "What is the title of the post that is owned by hannes.koller and has the highest popularity? \"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'hannes.koller' ORDER BY T1.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the title of the post that is owned by hannes.koller and has the highest popularity?"
    },
    {
        "question_id": 474,
        "db_id": "codebase_community",
        "question": "Please list the names of the badges obtained by hannes.koller. \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the badges obtained by hannes.koller."
    },
    {
        "question_id": 475,
        "db_id": "codebase_community",
        "question": "For the user whose display name is \"hannes.koller\", what is his/her badge's name? \"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "For the user whose display name is \"hannes.koller\", what is his/her badge's name?"
    },
    {
        "question_id": 476,
        "db_id": "codebase_community",
        "question": "What is the badge name that user 'hannes.koller' obtained? \"SilentGhost\" is the DisplayName of user;",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "What is the badge name that user 'hannes.koller' obtained?"
    },
    {
        "question_id": 477,
        "db_id": "codebase_community",
        "question": "List the title of posts which were edited by hannes.koller. \"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "List the title of posts which were edited by hannes.koller."
    },
    {
        "question_id": 478,
        "db_id": "codebase_community",
        "question": "What is the name of badge that the user whose display name is \"hannes.koller\" obtained?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "What is the name of badge that the user whose display name is \"hannes.koller\" obtained?"
    },
    {
        "question_id": 479,
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"hannes.koller\" obtained. \"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "State the name of badge that the user whose display name is \"hannes.koller\" obtained."
    },
    {
        "question_id": 480,
        "db_id": "codebase_community",
        "question": "What is the name of tags used by hannes.koller's? DisplayName = 'John Salvatier';",
        "evidence": "DisplayName = 'John Salvatier';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "What is the name of tags used by hannes.koller's?"
    },
    {
        "question_id": 481,
        "db_id": "codebase_community",
        "question": "Which post by hannes.koller has the most answers count? State the post ID. most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'hannes.koller' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by hannes.koller has the most answers count? State the post ID."
    },
    {
        "question_id": 482,
        "db_id": "codebase_community",
        "question": "Among posts by hannes.koller and Noah Snyder, which one has higher popularity? Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'hannes.koller' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among posts by hannes.koller and Noah Snyder, which one has higher popularity?"
    },
    {
        "question_id": 483,
        "db_id": "codebase_community",
        "question": "Which post by hannes.koller has the most views? Please give the id and title of this post. DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'hannes.koller' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by hannes.koller has the most views? Please give the id and title of this post."
    },
    {
        "question_id": 484,
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name hannes.koller. the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'hannes.koller' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the latest badge awarded to the user with the display name hannes.koller."
    },
    {
        "question_id": 485,
        "db_id": "codebase_community",
        "question": "How long did it take the user, known by his or her display name 'hannes.koller' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "How long did it take the user, known by his or her display name 'hannes.koller' to get the badge? Count from the date the user's account was created."
    },
    {
        "question_id": 486,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'hannes.koller'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'hannes.koller'?"
    },
    {
        "question_id": 487,
        "db_id": "codebase_community",
        "question": "When did the user known as 'hannes.koller' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'hannes.koller'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'hannes.koller' create his or her account?"
    },
    {
        "question_id": 488,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Self-Learner.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Self-Learner' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Self-Learner.'"
    },
    {
        "question_id": 489,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Self-Learner Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Self-Learner'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Self-Learner Badges."
    },
    {
        "question_id": 490,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Self-Learner badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Self-Learner'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Self-Learner badge."
    },
    {
        "question_id": 491,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Self-Learner badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Self-Learner' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Self-Learner badge?"
    },
    {
        "question_id": 492,
        "db_id": "student_club",
        "question": "With the biggest budget for the \"Club T-Shirts\", what was the remaining of it? remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "SQL": "SELECT remaining FROM budget WHERE category = 'Club T-Shirts' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Club T-Shirts' )",
        "difficulty": "simple",
        "raw_question": "With the biggest budget for the \"Club T-Shirts\", what was the remaining of it?"
    },
    {
        "question_id": 493,
        "db_id": "student_club",
        "question": "Name the event with the highest amount spent on Club T-Shirts. Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Club T-Shirts' ORDER BY T1.spent DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Name the event with the highest amount spent on Club T-Shirts."
    },
    {
        "question_id": 494,
        "db_id": "student_club",
        "question": "List the event names which were budgeted for the Club T-Shirts. budgeted for food refers to category = 'Food'",
        "evidence": "budgeted for food refers to category = 'Food'",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Club T-Shirts'",
        "difficulty": "simple",
        "raw_question": "List the event names which were budgeted for the Club T-Shirts."
    },
    {
        "question_id": 495,
        "db_id": "student_club",
        "question": "Calculate the total amount spent on Club T-Shirts and list the name of the event they were spent on. total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Club T-Shirts' GROUP BY T2.event_name",
        "difficulty": "simple",
        "raw_question": "Calculate the total amount spent on Club T-Shirts and list the name of the event they were spent on."
    },
    {
        "question_id": 496,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Matthew D. Wilson. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Matthew D. Wilson'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Matthew D. Wilson."
    },
    {
        "question_id": 497,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Matthew D. Wilson cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Matthew D. Wilson'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Matthew D. Wilson cost in total?"
    },
    {
        "question_id": 498,
        "db_id": "card_games",
        "question": "Is there any card from Matthew D. Wilson artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Matthew D. Wilson' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Matthew D. Wilson artist in pauper format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 499,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Matthew D. Wilson created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Matthew D. Wilson'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Matthew D. Wilson created?"
    },
    {
        "question_id": 500,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Matthew D. Wilson? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Matthew D. Wilson' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Matthew D. Wilson? List them in descending order of dates."
    },
    {
        "question_id": 501,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Matthew D. Wilson worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Matthew D. Wilson'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Matthew D. Wilson worked on and find any banned cards if there are any."
    },
    {
        "question_id": 502,
        "db_id": "card_games",
        "question": "What are the cards that only available in mtgo,paper and Japanese language? available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'mtgo,paper' AND T2.language = 'Japanese'",
        "difficulty": "simple",
        "raw_question": "What are the cards that only available in mtgo,paper and Japanese language?"
    },
    {
        "question_id": 503,
        "db_id": "card_games",
        "question": "Lists all types of cards available in mtgo,paper. all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
        "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'mtgo,paper' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Lists all types of cards available in mtgo,paper."
    },
    {
        "question_id": 504,
        "db_id": "card_games",
        "question": "Is there any card from Erica Yang artist in pauper format and available in mtgo,paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'mtgo,paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Erica Yang artist in pauper format and available in mtgo,paper? If so, indicate its ID."
    },
    {
        "question_id": 505,
        "db_id": "card_games",
        "question": "List the artists who illustrated cards with black borders which are available only in mtgo,paper. black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'mtgo,paper' AND BorderColor = 'black'",
        "difficulty": "simple",
        "raw_question": "List the artists who illustrated cards with black borders which are available only in mtgo,paper."
    },
    {
        "question_id": 506,
        "db_id": "card_games",
        "question": "Which artist designed the card whose promotional name is \"King Caesar, Ancient Guardian\"? promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
        "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
        "SQL": "SELECT artist FROM cards WHERE flavorName = 'King Caesar, Ancient Guardian'",
        "difficulty": "simple",
        "raw_question": "Which artist designed the card whose promotional name is \"King Caesar, Ancient Guardian\"?"
    },
    {
        "question_id": 507,
        "db_id": "card_games",
        "question": "How many cards have frame effect as legendary,etched? List out the id of those cards. \nframe effect as extendedart refers to frameEffects = 'extendedart'",
        "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
        "SQL": "SELECT id FROM cards WHERE frameEffects = 'legendary,etched' GROUP BY id",
        "difficulty": "simple",
        "raw_question": "How many cards have frame effect as legendary,etched? List out the id of those cards."
    },
    {
        "question_id": 508,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Islandwalk,Landwalk?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Islandwalk,Landwalk'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Islandwalk,Landwalk?"
    },
    {
        "question_id": 509,
        "db_id": "card_games",
        "question": "Please list the websites where I can purchase the cards that have the promotional type of \"prerelease,datestamped\". promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'prerelease,datestamped'",
        "difficulty": "simple",
        "raw_question": "Please list the websites where I can purchase the cards that have the promotional type of \"prerelease,datestamped\"."
    },
    {
        "question_id": 510,
        "db_id": "card_games",
        "question": "For Artifact Creature \u2014 Assembly-Worker type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact Creature \u2014 Assembly-Worker' AND T2.format = 'vintage' AND T1.side IS NULL",
        "difficulty": "simple",
        "raw_question": "For Artifact Creature \u2014 Assembly-Worker type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
    },
    {
        "question_id": 511,
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by J. M. DeMatteis?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'J. M. DeMatteis'",
        "difficulty": "simple",
        "raw_question": "which countries' tv channels are playing some cartoon written by J. M. DeMatteis?"
    },
    {
        "question_id": 512,
        "db_id": "tvshow",
        "question": "What are the countries that have cartoons on TV that were written by J. M. DeMatteis?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'J. M. DeMatteis'",
        "difficulty": "simple",
        "raw_question": "What are the countries that have cartoons on TV that were written by J. M. DeMatteis?"
    },
    {
        "question_id": 513,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Dijon-Prenois be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Dijon-Prenois be found?"
    },
    {
        "question_id": 514,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Dijon-Prenois? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Dijon-Prenois?"
    },
    {
        "question_id": 515,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Dijon-Prenois.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Dijon-Prenois."
    },
    {
        "question_id": 516,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Dijon-Prenois? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Dijon-Prenois'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Dijon-Prenois?"
    },
    {
        "question_id": 517,
        "db_id": "formula_1",
        "question": "What's the reference name of Dijon-Prenois? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Dijon-Prenois'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Dijon-Prenois?"
    },
    {
        "question_id": 518,
        "db_id": "formula_1",
        "question": "Please list all the years that Dijon-Prenois was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Dijon-Prenois was used in a Formula_1 race."
    },
    {
        "question_id": 519,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Dijon-Prenois. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Dijon-Prenois."
    },
    {
        "question_id": 520,
        "db_id": "formula_1",
        "question": "In which location does the Dijon-Prenois circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Dijon-Prenois'",
        "difficulty": "simple",
        "raw_question": "In which location does the Dijon-Prenois circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 521,
        "db_id": "formula_1",
        "question": "Please list the positions of the circuits built by the constructor BRM-Ford. Renault is a name of constructor;",
        "evidence": "Renault is a name of constructor;",
        "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'BRM-Ford'",
        "difficulty": "simple",
        "raw_question": "Please list the positions of the circuits built by the constructor BRM-Ford."
    },
    {
        "question_id": 522,
        "db_id": "financial",
        "question": "List account ID and account opening date for accounts from 'Jablonec n. Nisou'. A2 refers to the names of districts.",
        "evidence": "A2 refers to the names of districts.",
        "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jablonec n. Nisou'",
        "difficulty": "simple",
        "raw_question": "List account ID and account opening date for accounts from 'Jablonec n. Nisou'."
    },
    {
        "question_id": 523,
        "db_id": "formula_1",
        "question": "How old is the youngest American-Italian driver? What is his name? date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'American-Italian' ORDER BY dob DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "How old is the youngest American-Italian driver? What is his name?"
    },
    {
        "question_id": 524,
        "db_id": "formula_1",
        "question": "Please list the surnames of all the American-Italian drivers. Italian refers to nationality = 'italian'",
        "evidence": "Italian refers to nationality = 'italian'",
        "SQL": "SELECT surname FROM drivers WHERE nationality = 'American-Italian'",
        "difficulty": "simple",
        "raw_question": "Please list the surnames of all the American-Italian drivers."
    },
    {
        "question_id": 525,
        "db_id": "formula_1",
        "question": "Please state the reference name of the oldest American-Italian driver. oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'American-Italian' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please state the reference name of the oldest American-Italian driver."
    },
    {
        "question_id": 526,
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the St. Petersburg tourney.",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'St. Petersburg' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Find the name of the winner who has the highest rank points and participated in the St. Petersburg tourney."
    },
    {
        "question_id": 527,
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the St. Petersburg tournament?",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'St. Petersburg' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the name of the winner with the most rank points who participated in the St. Petersburg tournament?"
    },
    {
        "question_id": 528,
        "db_id": "student_club",
        "question": "What kind of expenses incurred by members who have X-Large in size of tee shirt? kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
        "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
        "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
        "difficulty": "simple",
        "raw_question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?"
    },
    {
        "question_id": 529,
        "db_id": "european_football_2",
        "question": "What is the attacking work rate of the football playerr Aaron Taylor-Sinclair?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
        "difficulty": "simple",
        "raw_question": "What is the attacking work rate of the football playerr Aaron Taylor-Sinclair?"
    },
    {
        "question_id": 530,
        "db_id": "european_football_2",
        "question": "What is the football player Aaron Taylor-Sinclair header's finishing rate on 18/09/2014? header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "difficulty": "simple",
        "raw_question": "What is the football player Aaron Taylor-Sinclair header's finishing rate on 18/09/2014?"
    },
    {
        "question_id": 531,
        "db_id": "european_football_2",
        "question": "What is the defensive work rate of the football player Aaron Taylor-Sinclair\n?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
        "difficulty": "simple",
        "raw_question": "What is the defensive work rate of the football player Aaron Taylor-Sinclair\n?"
    },
    {
        "question_id": 532,
        "db_id": "european_football_2",
        "question": "What is Aaron Taylor-Sinclair's potential score? potential score refers to potential;",
        "evidence": "potential score refers to potential;",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
        "difficulty": "simple",
        "raw_question": "What is Aaron Taylor-Sinclair's potential score?"
    },
    {
        "question_id": 533,
        "db_id": "european_football_2",
        "question": "What's the heading accuracy of Aaron Taylor-Sinclair?",
        "evidence": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
        "difficulty": "simple",
        "raw_question": "What's the heading accuracy of Aaron Taylor-Sinclair?"
    },
    {
        "question_id": 534,
        "db_id": "european_football_2",
        "question": "Which foot is preferred by Aaron Taylor-Sinclair? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
        "difficulty": "simple",
        "raw_question": "Which foot is preferred by Aaron Taylor-Sinclair?"
    },
    {
        "question_id": 535,
        "db_id": "european_football_2",
        "question": "When was the first time did Aaron Taylor-Sinclair have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the first time did Aaron Taylor-Sinclair have his highest crossing score? Give the date."
    },
    {
        "question_id": 536,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"PLINK meta-analysis method\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'PLINK meta-analysis method'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"PLINK meta-analysis method\"?"
    },
    {
        "question_id": 537,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"PLINK meta-analysis method\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'PLINK meta-analysis method'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"PLINK meta-analysis method\"?"
    },
    {
        "question_id": 538,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"PLINK meta-analysis method\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'PLINK meta-analysis method'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"PLINK meta-analysis method\"?"
    },
    {
        "question_id": 539,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'PLINK meta-analysis method' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'PLINK meta-analysis method'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'PLINK meta-analysis method' get?"
    },
    {
        "question_id": 540,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"PLINK meta-analysis method\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'PLINK meta-analysis method'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"PLINK meta-analysis method\"."
    },
    {
        "question_id": 541,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'PLINK meta-analysis method'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'PLINK meta-analysis method'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'PLINK meta-analysis method'?"
    },
    {
        "question_id": 542,
        "db_id": "superhero",
        "question": "Rank heroes published by J. R. R. Tolkien by their height in descending order. name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'J. R. R. Tolkien'",
        "difficulty": "simple",
        "raw_question": "Rank heroes published by J. R. R. Tolkien by their height in descending order."
    },
    {
        "question_id": 543,
        "db_id": "superhero",
        "question": "Rank superheroes from J. R. R. Tolkien by their eye color popularity, starting with the most common color. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'J. R. R. Tolkien' GROUP BY colour.colour",
        "difficulty": "simple",
        "raw_question": "Rank superheroes from J. R. R. Tolkien by their eye color popularity, starting with the most common color."
    },
    {
        "question_id": 544,
        "db_id": "superhero",
        "question": "List the superheroes from J. R. R. Tolkien who have the super power of 'Super Strength'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'J. R. R. Tolkien' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from J. R. R. Tolkien who have the super power of 'Super Strength'."
    },
    {
        "question_id": 545,
        "db_id": "superhero",
        "question": "Give the publisher ID of J. R. R. Tolkien. Star Trek is the publisher_name;",
        "evidence": "Star Trek is the publisher_name;",
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'J. R. R. Tolkien'",
        "difficulty": "simple",
        "raw_question": "Give the publisher ID of J. R. R. Tolkien."
    },
    {
        "question_id": 546,
        "db_id": "superhero",
        "question": "Which superhero has the most durability published by J. R. R. Tolkien? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'J. R. R. Tolkien' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which superhero has the most durability published by J. R. R. Tolkien?"
    },
    {
        "question_id": 547,
        "db_id": "superhero",
        "question": "Identify the heaviest superhero in J. R. R. Tolkien. heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'J. R. R. Tolkien' ORDER BY T1.weight_kg DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the heaviest superhero in J. R. R. Tolkien."
    },
    {
        "question_id": 548,
        "db_id": "superhero",
        "question": "Give the name of the Demi-God superheroes. alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "difficulty": "simple",
        "raw_question": "Give the name of the Demi-God superheroes."
    },
    {
        "question_id": 549,
        "db_id": "superhero",
        "question": "List down at least five full name of Demi-God superheroes. Demi-God superheroes refers to race = 'Demi-God'",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "difficulty": "simple",
        "raw_question": "List down at least five full name of Demi-God superheroes."
    },
    {
        "question_id": 550,
        "db_id": "superhero",
        "question": "Provide the full names of Demi-God heroes. vampire heroes refers to race = 'Vampire';",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
        "difficulty": "simple",
        "raw_question": "Provide the full names of Demi-God heroes."
    },
    {
        "question_id": 551,
        "db_id": "california_schools",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Lysbeth (Lissa). List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Lysbeth (Lissa)'",
        "difficulty": "simple",
        "raw_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Lysbeth (Lissa). List the district code of the school."
    },
    {
        "question_id": 552,
        "db_id": "california_schools",
        "question": "What is the most common type of grade span served in the city of Placerville Dr.?",
        "evidence": "",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Placerville Dr.' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common type of grade span served in the city of Placerville Dr.?"
    },
    {
        "question_id": 553,
        "db_id": "california_schools",
        "question": "How many test takers are there at the school/s whose mailing city address is in Mt. Shasta?",
        "evidence": "",
        "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Mt. Shasta'",
        "difficulty": "simple",
        "raw_question": "How many test takers are there at the school/s whose mailing city address is in Mt. Shasta?"
    },
    {
        "question_id": 554,
        "db_id": "card_games",
        "question": "Please list the name of the cards in the set Intl. Collectors\u2019 Edition with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Intl. Collectors\u2019 Edition' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please list the name of the cards in the set Intl. Collectors\u2019 Edition with the highest converted mana cost."
    },
    {
        "question_id": 555,
        "db_id": "card_games",
        "question": "What is card number 4 in the set Intl. Collectors\u2019 Edition? card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Intl. Collectors\u2019 Edition' AND T1.number = 4",
        "difficulty": "simple",
        "raw_question": "What is card number 4 in the set Intl. Collectors\u2019 Edition?"
    },
    {
        "question_id": 556,
        "db_id": "card_games",
        "question": "For the set \"Intl. Collectors\u2019 Edition\" , give its parent code. the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Intl. Collectors\u2019 Edition'",
        "difficulty": "simple",
        "raw_question": "For the set \"Intl. Collectors\u2019 Edition\" , give its parent code."
    },
    {
        "question_id": 557,
        "db_id": "superhero",
        "question": "What is the eyes colour of Alexander J. Mercer? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Alexander J. Mercer'",
        "difficulty": "simple",
        "raw_question": "What is the eyes colour of Alexander J. Mercer?"
    },
    {
        "question_id": 558,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Alexander J. Mercer. hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Alexander J. Mercer'",
        "difficulty": "simple",
        "raw_question": "Provide the hero name and race of Alexander J. Mercer."
    },
    {
        "question_id": 559,
        "db_id": "superhero",
        "question": "List the powers of Alexander J. Mercer. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Alexander J. Mercer'",
        "difficulty": "simple",
        "raw_question": "List the powers of Alexander J. Mercer."
    },
    {
        "question_id": 560,
        "db_id": "superhero",
        "question": "Provide the eye colour of the superhero who has Alexander J. Mercer as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Alexander J. Mercer'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colour of the superhero who has Alexander J. Mercer as their full name."
    },
    {
        "question_id": 561,
        "db_id": "superhero",
        "question": "What is the superpowers of the superhero has Alexander J. Mercer as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Alexander J. Mercer'",
        "difficulty": "simple",
        "raw_question": "What is the superpowers of the superhero has Alexander J. Mercer as their full name?"
    },
    {
        "question_id": 562,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Alexander J. Mercer. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Alexander J. Mercer'",
        "difficulty": "simple",
        "raw_question": "Name the superhero, otherwise known as Alexander J. Mercer."
    },
    {
        "question_id": 563,
        "db_id": "superhero",
        "question": "Please list all the superpowers of A-Bomb. 3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "Please list all the superpowers of A-Bomb."
    },
    {
        "question_id": 564,
        "db_id": "superhero",
        "question": "What is the colour of A-Bomb's skin? Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "What is the colour of A-Bomb's skin?"
    },
    {
        "question_id": 565,
        "db_id": "superhero",
        "question": "Who is the publisher of A-Bomb? the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "Who is the publisher of A-Bomb?"
    },
    {
        "question_id": 566,
        "db_id": "superhero",
        "question": "What is the publisher's name of A-Bomb? Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "What is the publisher's name of A-Bomb?"
    },
    {
        "question_id": 567,
        "db_id": "superhero",
        "question": "What is A-Bomb's race? Copycat is the superhero_name;",
        "evidence": "Copycat is the superhero_name;",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "What is A-Bomb's race?"
    },
    {
        "question_id": 568,
        "db_id": "superhero",
        "question": "Provide the superpowers of the superhero called A-Bomb. superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "Provide the superpowers of the superhero called A-Bomb."
    },
    {
        "question_id": 569,
        "db_id": "superhero",
        "question": "Indicate the attribute value of superhero A-Bomb. Abomination refers to superhero_name = 'Abomination';",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "Indicate the attribute value of superhero A-Bomb."
    },
    {
        "question_id": 570,
        "db_id": "superhero",
        "question": "Which group does superhero A-Bomb belong to? group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "Which group does superhero A-Bomb belong to?"
    },
    {
        "question_id": 571,
        "db_id": "superhero",
        "question": "What is the gender of A-Bomb hero? Agent 13 hero refers to superhero_name = 'Agent 13';",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "What is the gender of A-Bomb hero?"
    },
    {
        "question_id": 572,
        "db_id": "superhero",
        "question": "What are the race and alignment of A-Bomb? Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "What are the race and alignment of A-Bomb?"
    },
    {
        "question_id": 573,
        "db_id": "superhero",
        "question": "What is A-Bomb's superpower? Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "What is A-Bomb's superpower?"
    },
    {
        "question_id": 574,
        "db_id": "superhero",
        "question": "State all of A-Bomb's attributes along with their values. 3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "State all of A-Bomb's attributes along with their values."
    },
    {
        "question_id": 575,
        "db_id": "superhero",
        "question": "Give the alignment and superpowers of the superhero named A-Bomb. superpowers refers to power_name;",
        "evidence": "superpowers refers to power_name;",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "Give the alignment and superpowers of the superhero named A-Bomb."
    },
    {
        "question_id": 576,
        "db_id": "superhero",
        "question": "List down A-Bomb's superpowers. Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "List down A-Bomb's superpowers."
    },
    {
        "question_id": 577,
        "db_id": "superhero",
        "question": "Identify the weakest attribute of the A-Bomb. weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'A-Bomb' ORDER BY T2.attribute_value ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the weakest attribute of the A-Bomb."
    },
    {
        "question_id": 578,
        "db_id": "superhero",
        "question": "What is A-Bomb's eye colour? Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "What is A-Bomb's eye colour?"
    },
    {
        "question_id": 579,
        "db_id": "superhero",
        "question": "Provide the full name of the superhero named A-Bomb.",
        "evidence": "",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "Provide the full name of the superhero named A-Bomb."
    },
    {
        "question_id": 580,
        "db_id": "superhero",
        "question": "List the attribute value of the superhero named A-Bomb.",
        "evidence": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "List the attribute value of the superhero named A-Bomb."
    },
    {
        "question_id": 581,
        "db_id": "superhero",
        "question": "Give the eye colour of A-Bomb. eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
        "difficulty": "simple",
        "raw_question": "Give the eye colour of A-Bomb."
    },
    {
        "question_id": 582,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named open-source? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'open-source'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named open-source?"
    },
    {
        "question_id": 583,
        "db_id": "european_football_2",
        "question": "What is the short name of the football team SV Zulte-Waregem? short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'SV Zulte-Waregem'",
        "difficulty": "simple",
        "raw_question": "What is the short name of the football team SV Zulte-Waregem?"
    },
    {
        "question_id": 584,
        "db_id": "european_football_2",
        "question": "What is the SV Zulte-Waregem team freedom of movement in the 1st two thirds of the pitch? ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem'",
        "difficulty": "simple",
        "raw_question": "What is the SV Zulte-Waregem team freedom of movement in the 1st two thirds of the pitch?"
    },
    {
        "question_id": 585,
        "db_id": "european_football_2",
        "question": "What is SV Zulte-Waregem's highest chance creation passing score and what is it classified as? Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is SV Zulte-Waregem's highest chance creation passing score and what is it classified as?"
    },
    {
        "question_id": 586,
        "db_id": "european_football_2",
        "question": "What was the build up play speed class for \"SV Zulte-Waregem\" on 2011/2/22? \"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the build up play speed class for \"SV Zulte-Waregem\" on 2011/2/22?"
    },
    {
        "question_id": 587,
        "db_id": "european_football_2",
        "question": "State the chance creation passing class for \"SV Zulte-Waregem\" on 2013/9/20. \"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "difficulty": "simple",
        "raw_question": "State the chance creation passing class for \"SV Zulte-Waregem\" on 2013/9/20."
    },
    {
        "question_id": 588,
        "db_id": "european_football_2",
        "question": "What was the chance creation crossing class for \"SV Zulte-Waregem\" on 2010/2/22? \"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the chance creation crossing class for \"SV Zulte-Waregem\" on 2010/2/22?"
    },
    {
        "question_id": 589,
        "db_id": "european_football_2",
        "question": "Does the SV Zulte-Waregem team have a slow, balanced or fast speed class? KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'SV Zulte-Waregem'",
        "difficulty": "simple",
        "raw_question": "Does the SV Zulte-Waregem team have a slow, balanced or fast speed class?"
    },
    {
        "question_id": 590,
        "db_id": "codebase_community",
        "question": "Please list the titles of the posts owned by the user Christopher D. Long? \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "Please list the titles of the posts owned by the user Christopher D. Long?"
    },
    {
        "question_id": 591,
        "db_id": "codebase_community",
        "question": "What is the title of the post that is owned by Christopher D. Long and has the highest popularity? \"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long' ORDER BY T1.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the title of the post that is owned by Christopher D. Long and has the highest popularity?"
    },
    {
        "question_id": 592,
        "db_id": "codebase_community",
        "question": "Please list the names of the badges obtained by Christopher D. Long. \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the badges obtained by Christopher D. Long."
    },
    {
        "question_id": 593,
        "db_id": "codebase_community",
        "question": "For the user whose display name is \"Christopher D. Long\", what is his/her badge's name? \"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "For the user whose display name is \"Christopher D. Long\", what is his/her badge's name?"
    },
    {
        "question_id": 594,
        "db_id": "codebase_community",
        "question": "What is the badge name that user 'Christopher D. Long' obtained? \"SilentGhost\" is the DisplayName of user;",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "What is the badge name that user 'Christopher D. Long' obtained?"
    },
    {
        "question_id": 595,
        "db_id": "codebase_community",
        "question": "List the title of posts which were edited by Christopher D. Long. \"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "List the title of posts which were edited by Christopher D. Long."
    },
    {
        "question_id": 596,
        "db_id": "codebase_community",
        "question": "What is the total score of the posts edited by Christopher D. Long and include the user's website URL. \"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
        "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
        "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long' GROUP BY T2.WebsiteUrl",
        "difficulty": "simple",
        "raw_question": "What is the total score of the posts edited by Christopher D. Long and include the user's website URL."
    },
    {
        "question_id": 597,
        "db_id": "codebase_community",
        "question": "What is the name of badge that the user whose display name is \"Christopher D. Long\" obtained?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "What is the name of badge that the user whose display name is \"Christopher D. Long\" obtained?"
    },
    {
        "question_id": 598,
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"Christopher D. Long\" obtained. \"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "State the name of badge that the user whose display name is \"Christopher D. Long\" obtained."
    },
    {
        "question_id": 599,
        "db_id": "codebase_community",
        "question": "What is the name of tags used by Christopher D. Long's? DisplayName = 'John Salvatier';",
        "evidence": "DisplayName = 'John Salvatier';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "What is the name of tags used by Christopher D. Long's?"
    },
    {
        "question_id": 600,
        "db_id": "codebase_community",
        "question": "Which post by Christopher D. Long has the most answers count? State the post ID. most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Christopher D. Long has the most answers count? State the post ID."
    },
    {
        "question_id": 601,
        "db_id": "codebase_community",
        "question": "Among posts by Christopher D. Long and Noah Snyder, which one has higher popularity? Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among posts by Christopher D. Long and Noah Snyder, which one has higher popularity?"
    },
    {
        "question_id": 602,
        "db_id": "codebase_community",
        "question": "How many posts by Christopher D. Long have more than 4 votes? more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
        "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
        "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "difficulty": "simple",
        "raw_question": "How many posts by Christopher D. Long have more than 4 votes?"
    },
    {
        "question_id": 603,
        "db_id": "codebase_community",
        "question": "Which post by Christopher D. Long has the most views? Please give the id and title of this post. DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Christopher D. Long' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Christopher D. Long has the most views? Please give the id and title of this post."
    },
    {
        "question_id": 604,
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name Christopher D. Long. the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the latest badge awarded to the user with the display name Christopher D. Long."
    },
    {
        "question_id": 605,
        "db_id": "codebase_community",
        "question": "How long did it take the user, known by his or her display name 'Christopher D. Long' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "How long did it take the user, known by his or her display name 'Christopher D. Long' to get the badge? Count from the date the user's account was created."
    },
    {
        "question_id": 606,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Christopher D. Long'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'Christopher D. Long'?"
    },
    {
        "question_id": 607,
        "db_id": "codebase_community",
        "question": "When did the user known as 'Christopher D. Long' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Christopher D. Long'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'Christopher D. Long' create his or her account?"
    },
    {
        "question_id": 608,
        "db_id": "codebase_community",
        "question": "List out the dates that users who are located in Corvallis, OR obtained their badges? \"Rochester, NY\" is the Location of user; user refers to UserId",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Corvallis, OR'",
        "difficulty": "simple",
        "raw_question": "List out the dates that users who are located in Corvallis, OR obtained their badges?"
    },
    {
        "question_id": 609,
        "db_id": "codebase_community",
        "question": "List out the age of users who located in Corvallis, OR obtained the badge? \"Vienna, Austria\" is the Location",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Corvallis, OR'",
        "difficulty": "simple",
        "raw_question": "List out the age of users who located in Corvallis, OR obtained the badge?"
    },
    {
        "question_id": 610,
        "db_id": "superhero",
        "question": "Which superheroes have a Durability attribute value of less than 50? durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "difficulty": "simple",
        "raw_question": "Which superheroes have a Durability attribute value of less than 50?"
    },
    {
        "question_id": 611,
        "db_id": "superhero",
        "question": "What is the hero's full name with the highest attribute in Durability? highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the hero's full name with the highest attribute in Durability?"
    },
    {
        "question_id": 612,
        "db_id": "superhero",
        "question": "Which superhero has the most Durability published by Dark Horse Comics? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which superhero has the most Durability published by Dark Horse Comics?"
    },
    {
        "question_id": 613,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Editor.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Editor' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Editor.'"
    },
    {
        "question_id": 614,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Editor Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Editor'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Editor Badges."
    },
    {
        "question_id": 615,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Editor badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Editor'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Editor badge."
    },
    {
        "question_id": 616,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Editor badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Editor' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Editor badge?"
    },
    {
        "question_id": 617,
        "db_id": "car_1",
        "question": "For model  volkswagen, how many cylinders does the car with the least accelerate have?",
        "evidence": "",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  ' volkswagen' ORDER BY T1.accelerate ASC LIMIT 1;",
        "difficulty": "simple",
        "raw_question": "For model  volkswagen, how many cylinders does the car with the least accelerate have?"
    },
    {
        "question_id": 618,
        "db_id": "car_1",
        "question": "For a  volkswagen model, how many cylinders does the version with least accelerate have?",
        "evidence": "",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  ' volkswagen' ORDER BY T1.accelerate ASC LIMIT 1;",
        "difficulty": "simple",
        "raw_question": "For a  volkswagen model, how many cylinders does the version with least accelerate have?"
    },
    {
        "question_id": 619,
        "db_id": "card_games",
        "question": "Lists all types of cards available in arena. all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
        "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Lists all types of cards available in arena."
    },
    {
        "question_id": 620,
        "db_id": "card_games",
        "question": "List the artists who illustrated cards with black borders which are available only in arena. black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "difficulty": "simple",
        "raw_question": "List the artists who illustrated cards with black borders which are available only in arena."
    },
    {
        "question_id": 621,
        "db_id": "card_games",
        "question": "How many cards have frame effect as etched,legendary? List out the id of those cards. \nframe effect as extendedart refers to frameEffects = 'extendedart'",
        "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
        "SQL": "SELECT id FROM cards WHERE frameEffects = 'etched,legendary' GROUP BY id",
        "difficulty": "simple",
        "raw_question": "How many cards have frame effect as etched,legendary? List out the id of those cards."
    },
    {
        "question_id": 622,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Aquamorph Entity'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Aquamorph Entity'?"
    },
    {
        "question_id": 623,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Aquamorph Entity\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Aquamorph Entity\"?"
    },
    {
        "question_id": 624,
        "db_id": "card_games",
        "question": "What is the status of card \"Aquamorph Entity\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Aquamorph Entity\"?"
    },
    {
        "question_id": 625,
        "db_id": "card_games",
        "question": "What is the type of card \"Aquamorph Entity\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Aquamorph Entity\"?"
    },
    {
        "question_id": 626,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Aquamorph Entity\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Aquamorph Entity\"?"
    },
    {
        "question_id": 627,
        "db_id": "card_games",
        "question": "Write down the ruling of Aquamorph Entity. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Aquamorph Entity."
    },
    {
        "question_id": 628,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Aquamorph Entity\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Aquamorph Entity\"?"
    },
    {
        "question_id": 629,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Aquamorph Entity\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Aquamorph Entity\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 630,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Aquamorph Entity' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Aquamorph Entity' created?"
    },
    {
        "question_id": 631,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Aquamorph Entity\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Aquamorph Entity'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Aquamorph Entity\" in it?"
    },
    {
        "question_id": 632,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Aquamorph Entity\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Aquamorph Entity' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Aquamorph Entity\" is in?"
    },
    {
        "question_id": 633,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Aquamorph Entity\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Aquamorph Entity' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Aquamorph Entity\" is in it."
    },
    {
        "question_id": 634,
        "db_id": "card_games",
        "question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\". promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
        "difficulty": "simple",
        "raw_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\"."
    },
    {
        "question_id": 635,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Silverstone Circuit be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Silverstone Circuit be found?"
    },
    {
        "question_id": 636,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Silverstone Circuit? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Silverstone Circuit?"
    },
    {
        "question_id": 637,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Silverstone Circuit.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Silverstone Circuit."
    },
    {
        "question_id": 638,
        "db_id": "formula_1",
        "question": "When was the last f1 season whereby Silverstone Circuit hosted the British Grand Prix? the last refers to max(year);",
        "evidence": "the last refers to max(year);",
        "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the last f1 season whereby Silverstone Circuit hosted the British Grand Prix?"
    },
    {
        "question_id": 639,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Silverstone Circuit? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Silverstone Circuit?"
    },
    {
        "question_id": 640,
        "db_id": "formula_1",
        "question": "What's the reference name of Silverstone Circuit? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Silverstone Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Silverstone Circuit?"
    },
    {
        "question_id": 641,
        "db_id": "formula_1",
        "question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race."
    },
    {
        "question_id": 642,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit."
    },
    {
        "question_id": 643,
        "db_id": "formula_1",
        "question": "In which location does the Silverstone Circuit circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "difficulty": "simple",
        "raw_question": "In which location does the Silverstone Circuit circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 644,
        "db_id": "conference",
        "question": "Show all staff names who have been both Participant and sponsor in some conference.",
        "evidence": "",
        "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Participant' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "difficulty": "simple",
        "raw_question": "Show all staff names who have been both Participant and sponsor in some conference."
    },
    {
        "question_id": 645,
        "db_id": "conference",
        "question": "What are the names of the staff members who have been both a Participant and a sponsor at some conference?",
        "evidence": "",
        "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Participant' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
        "difficulty": "simple",
        "raw_question": "What are the names of the staff members who have been both a Participant and a sponsor at some conference?"
    },
    {
        "question_id": 646,
        "db_id": "student_transcripts_tracking",
        "question": "How is the math course described?",
        "evidence": "",
        "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "difficulty": "simple",
        "raw_question": "How is the math course described?"
    },
    {
        "question_id": 647,
        "db_id": "student_transcripts_tracking",
        "question": "What are the descriptions for all the math courses?",
        "evidence": "",
        "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "difficulty": "simple",
        "raw_question": "What are the descriptions for all the math courses?"
    },
    {
        "question_id": 648,
        "db_id": "student_transcripts_tracking",
        "question": "Who is enrolled in a Master degree program? List the first name, middle name, last name.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Master'",
        "difficulty": "simple",
        "raw_question": "Who is enrolled in a Master degree program? List the first name, middle name, last name."
    },
    {
        "question_id": 649,
        "db_id": "financial",
        "question": "Who is the OWNER of the account with the largest loan amount?",
        "evidence": "",
        "SQL": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Who is the OWNER of the account with the largest loan amount?"
    },
    {
        "question_id": 650,
        "db_id": "cre_Doc_and_collections",
        "question": "What is the owner of document with the Description 'Marlin Collection'?",
        "evidence": "",
        "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Marlin Collection'",
        "difficulty": "simple",
        "raw_question": "What is the owner of document with the Description 'Marlin Collection'?"
    },
    {
        "question_id": 651,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the owners of the document objects described as the 'Marlin Collection'?",
        "evidence": "",
        "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Marlin Collection'",
        "difficulty": "simple",
        "raw_question": "What are the owners of the document objects described as the 'Marlin Collection'?"
    },
    {
        "question_id": 652,
        "db_id": "student_club",
        "question": "Give the location for \"February Speaker\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'February Speaker'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"February Speaker\"."
    },
    {
        "question_id": 653,
        "db_id": "student_club",
        "question": "Calculate the amount budgeted for 'February Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted. 'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'February Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "difficulty": "simple",
        "raw_question": "Calculate the amount budgeted for 'February Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
    },
    {
        "question_id": 654,
        "db_id": "student_club",
        "question": "What category was budgeted for the 'February Speaker' event and how much was the amount budgeted for that category? amount budgeted refers to amount, 'January Speaker' is the event name;",
        "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'February Speaker'",
        "difficulty": "simple",
        "raw_question": "What category was budgeted for the 'February Speaker' event and how much was the amount budgeted for that category?"
    },
    {
        "question_id": 655,
        "db_id": "student_club",
        "question": "Indicate the cost of Posters for 'September Speaker' event. 'Posters' is the expense description; 'September Speaker' is an event name",
        "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
        "SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
        "difficulty": "simple",
        "raw_question": "Indicate the cost of Posters for 'September Speaker' event."
    },
    {
        "question_id": 656,
        "db_id": "student_club",
        "question": "Which budget category does the expense 'Posters' fall to? 'Posters' refers to expense description",
        "evidence": "'Posters' refers to expense description",
        "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
        "difficulty": "simple",
        "raw_question": "Which budget category does the expense 'Posters' fall to?"
    },
    {
        "question_id": 657,
        "db_id": "student_club",
        "question": "Indicate the cost of Pizza for 'September Speaker' event. 'Posters' is the expense description; 'September Speaker' is an event name",
        "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
        "SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Pizza'",
        "difficulty": "simple",
        "raw_question": "Indicate the cost of Pizza for 'September Speaker' event."
    },
    {
        "question_id": 658,
        "db_id": "student_club",
        "question": "Which budget category does the expense 'Pizza' fall to? 'Posters' refers to expense description",
        "evidence": "'Posters' refers to expense description",
        "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Pizza'",
        "difficulty": "simple",
        "raw_question": "Which budget category does the expense 'Pizza' fall to?"
    },
    {
        "question_id": 659,
        "db_id": "real_estate_rentals",
        "question": "How is the feature rooftop described?",
        "evidence": "",
        "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "difficulty": "simple",
        "raw_question": "How is the feature rooftop described?"
    },
    {
        "question_id": 660,
        "db_id": "real_estate_rentals",
        "question": "Return the description of the feature 'rooftop'.",
        "evidence": "",
        "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
        "difficulty": "simple",
        "raw_question": "Return the description of the feature 'rooftop'."
    },
    {
        "question_id": 661,
        "db_id": "real_estate_rentals",
        "question": "In which cities are there any properties equipped with a rooftop?",
        "evidence": "",
        "SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'rooftop';",
        "difficulty": "simple",
        "raw_question": "In which cities are there any properties equipped with a rooftop?"
    },
    {
        "question_id": 662,
        "db_id": "european_football_2",
        "question": "Which country is the league Netherlands Eredivisie from? Italy Serie A from refers to League.name = 'Italy Serie A';",
        "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Netherlands Eredivisie'",
        "difficulty": "simple",
        "raw_question": "Which country is the league Netherlands Eredivisie from?"
    },
    {
        "question_id": 663,
        "db_id": "european_football_2",
        "question": "Which country is the Netherlands Eredivisie from? Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
        "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
        "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Netherlands Eredivisie'",
        "difficulty": "simple",
        "raw_question": "Which country is the Netherlands Eredivisie from?"
    },
    {
        "question_id": 664,
        "db_id": "card_games",
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for penny play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'penny' AND T1.side IS NULL",
        "difficulty": "simple",
        "raw_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for penny play format."
    },
    {
        "question_id": 665,
        "db_id": "card_games",
        "question": "List down the uuid for penny cards and the foreign language of these cards. legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'penny'",
        "difficulty": "simple",
        "raw_question": "List down the uuid for penny cards and the foreign language of these cards."
    },
    {
        "question_id": 666,
        "db_id": "card_games",
        "question": "Is there any card from Erica Yang artist in penny format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'penny' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Erica Yang artist in penny format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 667,
        "db_id": "student_club",
        "question": "Which college is the Member of the Student_Club from? Vice President is a position of the Student Club",
        "evidence": "Vice President is a position of the Student Club",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Member'",
        "difficulty": "simple",
        "raw_question": "Which college is the Member of the Student_Club from?"
    },
    {
        "question_id": 668,
        "db_id": "student_club",
        "question": "What is the amount of the funds that the Member received? 'Vice President' is a position of Student Club; funds received refers to amount.",
        "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member'",
        "difficulty": "simple",
        "raw_question": "What is the amount of the funds that the Member received?"
    },
    {
        "question_id": 669,
        "db_id": "student_club",
        "question": "What city and state did the Member of the Student_Club grow up? 'President' is a position of Student Club;",
        "evidence": "'President' is a position of Student Club;",
        "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'Member'",
        "difficulty": "simple",
        "raw_question": "What city and state did the Member of the Student_Club grow up?"
    },
    {
        "question_id": 670,
        "db_id": "student_club",
        "question": "State the major name for the Member of the club. 'Vice President' is a position of Student Club",
        "evidence": "'Vice President' is a position of Student Club",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Member'",
        "difficulty": "simple",
        "raw_question": "State the major name for the Member of the club."
    },
    {
        "question_id": 671,
        "db_id": "student_club",
        "question": "Which department was the Member of the club in? 'President' is a position of Student Club",
        "evidence": "'President' is a position of Student Club",
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Member'",
        "difficulty": "simple",
        "raw_question": "Which department was the Member of the club in?"
    },
    {
        "question_id": 672,
        "db_id": "student_club",
        "question": "Provide the full name and email address of the Student_Club's Member. full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Member'",
        "difficulty": "simple",
        "raw_question": "Provide the full name and email address of the Student_Club's Member."
    },
    {
        "question_id": 673,
        "db_id": "student_club",
        "question": "State the name of major that Member has joined. name of major refers to major_name; 'Vice President' is position of Student Club",
        "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member'",
        "difficulty": "simple",
        "raw_question": "State the name of major that Member has joined."
    },
    {
        "question_id": 674,
        "db_id": "student_club",
        "question": "What is the name of the social event that was attended by the Member of the Student_Club located at 900 E. Washington St.? name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Member' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
        "difficulty": "simple",
        "raw_question": "What is the name of the social event that was attended by the Member of the Student_Club located at 900 E. Washington St.?"
    },
    {
        "question_id": 675,
        "db_id": "student_club",
        "question": "Write the full name of the club member with the position of 'Member' and list which college the club member belongs to. full name refers to first_name, last name",
        "evidence": "full name refers to first_name, last name",
        "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'",
        "difficulty": "simple",
        "raw_question": "Write the full name of the club member with the position of 'Member' and list which college the club member belongs to."
    },
    {
        "question_id": 676,
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "evidence": "",
        "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "difficulty": "simple",
        "raw_question": "Find the first name and age of students who have a dog but do not have a cat as a pet."
    },
    {
        "question_id": 677,
        "db_id": "pets_1",
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "evidence": "",
        "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "difficulty": "simple",
        "raw_question": "What is the first name of every student who has a dog but does not have a cat?"
    },
    {
        "question_id": 678,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Data transformation\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Data transformation'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Data transformation\"?"
    },
    {
        "question_id": 679,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Data transformation\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Data transformation'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"Data transformation\"?"
    },
    {
        "question_id": 680,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Data transformation\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Data transformation'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Data transformation\"?"
    },
    {
        "question_id": 681,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Data transformation' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Data transformation'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Data transformation' get?"
    },
    {
        "question_id": 682,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Data transformation\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Data transformation'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Data transformation\"."
    },
    {
        "question_id": 683,
        "db_id": "codebase_community",
        "question": "Provide the text of the latest 10 comments to the post with the title 'Data transformation' and the display name of the user who left it. the latest comment refers to MAX(CreationDate);",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Data transformation' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Provide the text of the latest 10 comments to the post with the title 'Data transformation' and the display name of the user who left it."
    },
    {
        "question_id": 684,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Data transformation'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Data transformation'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Data transformation'?"
    },
    {
        "question_id": 685,
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Data transformation\"? Title = 'Group differences on a five point Likert item';",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Data transformation'",
        "difficulty": "simple",
        "raw_question": "What is the post ID and the comments commented in the post titled by \"Data transformation\"?"
    },
    {
        "question_id": 686,
        "db_id": "bbc_channels",
        "question": "What is the name of the director who is in the \"Dracula\" program?",
        "evidence": "",
        "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
        "difficulty": "simple",
        "raw_question": "What is the name of the director who is in the \"Dracula\" program?"
    },
    {
        "question_id": 687,
        "db_id": "california_schools",
        "question": "How many test takers are there at the school/s whose mailing city address is in Oakland?",
        "evidence": "",
        "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Oakland'",
        "difficulty": "simple",
        "raw_question": "How many test takers are there at the school/s whose mailing city address is in Oakland?"
    },
    {
        "question_id": 688,
        "db_id": "card_games",
        "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Core Set block in alphabetical order.",
        "evidence": "",
        "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Core Set' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "difficulty": "simple",
        "raw_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Core Set block in alphabetical order."
    },
    {
        "question_id": 689,
        "db_id": "card_games",
        "question": "Please list the name of the cards in the set Anthologies with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Anthologies' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please list the name of the cards in the set Anthologies with the highest converted mana cost."
    },
    {
        "question_id": 690,
        "db_id": "card_games",
        "question": "What is card number 4 in the set Anthologies? card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Anthologies' AND T1.number = 4",
        "difficulty": "simple",
        "raw_question": "What is card number 4 in the set Anthologies?"
    },
    {
        "question_id": 691,
        "db_id": "card_games",
        "question": "For the set \"Anthologies\" , give its parent code. the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Anthologies'",
        "difficulty": "simple",
        "raw_question": "For the set \"Anthologies\" , give its parent code."
    },
    {
        "question_id": 692,
        "db_id": "card_games",
        "question": "Give the code of sets have masters type of 'expansion'? code of sets refers to setCode",
        "evidence": "code of sets refers to setCode",
        "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'masters' GROUP BY T2.setCode",
        "difficulty": "simple",
        "raw_question": "Give the code of sets have masters type of 'expansion'?"
    },
    {
        "question_id": 693,
        "db_id": "card_games",
        "question": "Give the code of sets have expansion masters type? code of sets refers to setCode",
        "evidence": "code of sets refers to setCode",
        "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'masters'",
        "difficulty": "simple",
        "raw_question": "Give the code of sets have expansion masters type?"
    },
    {
        "question_id": 694,
        "db_id": "card_games",
        "question": "Among the sets whose expansion type is masters, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "SQL": "SELECT id FROM sets WHERE type = 'masters' ORDER BY totalSetSize DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among the sets whose expansion type is masters, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set."
    },
    {
        "question_id": 695,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Energy Blasts'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Energy Blasts'."
    },
    {
        "question_id": 696,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Energy Blasts? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Energy Blasts?"
    },
    {
        "question_id": 697,
        "db_id": "superhero",
        "question": "List the name of superheroes with Energy Blasts power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Energy Blasts power."
    },
    {
        "question_id": 698,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Energy Blasts power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Energy Blasts power."
    },
    {
        "question_id": 699,
        "db_id": "superhero",
        "question": "What is the power ID of Energy Blasts? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Energy Blasts'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Energy Blasts?"
    },
    {
        "question_id": 700,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Energy Blasts. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Energy Blasts'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Energy Blasts."
    },
    {
        "question_id": 701,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named standard? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'standard'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named standard?"
    },
    {
        "question_id": 702,
        "db_id": "real_estate_rentals",
        "question": "Find the login names of all Student users ordered by their first names.",
        "evidence": "",
        "SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Student' ORDER BY first_name",
        "difficulty": "simple",
        "raw_question": "Find the login names of all Student users ordered by their first names."
    },
    {
        "question_id": 703,
        "db_id": "superhero",
        "question": "Describe the names of Bad alignment superheroes. names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
        "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
        "difficulty": "simple",
        "raw_question": "Describe the names of Bad alignment superheroes."
    },
    {
        "question_id": 704,
        "db_id": "superhero",
        "question": "Which superheroes have a Strength attribute value of less than 50? durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "difficulty": "simple",
        "raw_question": "Which superheroes have a Strength attribute value of less than 50?"
    },
    {
        "question_id": 705,
        "db_id": "superhero",
        "question": "What is the hero's full name with the highest attribute in Strength? highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the hero's full name with the highest attribute in Strength?"
    },
    {
        "question_id": 706,
        "db_id": "superhero",
        "question": "Which superhero has the most Strength published by Dark Horse Comics? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which superhero has the most Strength published by Dark Horse Comics?"
    },
    {
        "question_id": 707,
        "db_id": "superhero",
        "question": "Which superheroes have a Speed attribute value of less than 50? durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
        "difficulty": "simple",
        "raw_question": "Which superheroes have a Speed attribute value of less than 50?"
    },
    {
        "question_id": 708,
        "db_id": "superhero",
        "question": "What is the hero's full name with the highest attribute in Speed? highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the hero's full name with the highest attribute in Speed?"
    },
    {
        "question_id": 709,
        "db_id": "superhero",
        "question": "Which superhero has the most Speed published by Dark Horse Comics? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which superhero has the most Speed published by Dark Horse Comics?"
    },
    {
        "question_id": 710,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Teacher.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Teacher.'"
    },
    {
        "question_id": 711,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Teacher Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Teacher'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Teacher Badges."
    },
    {
        "question_id": 712,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Teacher badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Teacher badge."
    },
    {
        "question_id": 713,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Teacher badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Teacher' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Teacher badge?"
    },
    {
        "question_id": 714,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Student.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Student' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Student.'"
    },
    {
        "question_id": 715,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Student Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Student'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Student Badges."
    },
    {
        "question_id": 716,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Student badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Student'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Student badge."
    },
    {
        "question_id": 717,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Student badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Student' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Student badge?"
    },
    {
        "question_id": 718,
        "db_id": "warehouse_1",
        "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
        "evidence": "",
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "difficulty": "simple",
        "raw_question": "Find the location of the warehouses which have contents Rocks but not Scissors."
    },
    {
        "question_id": 719,
        "db_id": "warehouse_1",
        "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
        "evidence": "",
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "difficulty": "simple",
        "raw_question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?"
    },
    {
        "question_id": 720,
        "db_id": "warehouse_1",
        "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
        "evidence": "",
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "difficulty": "simple",
        "raw_question": "Find the location of the warehouses which store contents Rocks and Scissors."
    },
    {
        "question_id": 721,
        "db_id": "warehouse_1",
        "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
        "evidence": "",
        "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
        "difficulty": "simple",
        "raw_question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?"
    },
    {
        "question_id": 722,
        "db_id": "warehouse_1",
        "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
        "evidence": "",
        "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "difficulty": "simple",
        "raw_question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content."
    },
    {
        "question_id": 723,
        "db_id": "warehouse_1",
        "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
        "evidence": "",
        "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
        "difficulty": "simple",
        "raw_question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?"
    },
    {
        "question_id": 724,
        "db_id": "card_games",
        "question": "How many cards have frame effect as inverted? List out the id of those cards. \nframe effect as extendedart refers to frameEffects = 'extendedart'",
        "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
        "SQL": "SELECT id FROM cards WHERE frameEffects = 'inverted' GROUP BY id",
        "difficulty": "simple",
        "raw_question": "How many cards have frame effect as inverted? List out the id of those cards."
    },
    {
        "question_id": 725,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Defender?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Defender'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Defender?"
    },
    {
        "question_id": 726,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Instant and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Instant'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Instant and the date of rulings for these cards."
    },
    {
        "question_id": 727,
        "db_id": "card_games",
        "question": "Among the Instant cards, which are black color and comes with foreign languague translation? Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Instant' AND T1.colors = 'B'",
        "difficulty": "simple",
        "raw_question": "Among the Instant cards, which are black color and comes with foreign languague translation?"
    },
    {
        "question_id": 728,
        "db_id": "card_games",
        "question": "Please list the websites where I can purchase the cards that have the promotional type of \"prerelease\". promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'prerelease'",
        "difficulty": "simple",
        "raw_question": "Please list the websites where I can purchase the cards that have the promotional type of \"prerelease\"."
    },
    {
        "question_id": 729,
        "db_id": "formula_1",
        "question": "Please give the name of the race held on the circuits in Germany. Germany is a name of country;",
        "evidence": "Germany is a name of country;",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
        "difficulty": "simple",
        "raw_question": "Please give the name of the race held on the circuits in Germany."
    },
    {
        "question_id": 730,
        "db_id": "formula_1",
        "question": "Please give the names of the races held on the circuits in Germany. Spain is a name of country;",
        "evidence": "Spain is a name of country;",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
        "difficulty": "simple",
        "raw_question": "Please give the names of the races held on the circuits in Germany."
    },
    {
        "question_id": 731,
        "db_id": "formula_1",
        "question": "List circuits in Germany which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
        "evidence": "",
        "SQL": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany' AND T2.year = 2006",
        "difficulty": "simple",
        "raw_question": "List circuits in Germany which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted."
    },
    {
        "question_id": 732,
        "db_id": "formula_1",
        "question": "How many times the circuits were held in Germany? Please give their location and coordinates. location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Germany'",
        "difficulty": "simple",
        "raw_question": "How many times the circuits were held in Germany? Please give their location and coordinates."
    },
    {
        "question_id": 733,
        "db_id": "formula_1",
        "question": "Please list the lap records for the circuits in Germany. lap record means the fastest time recorded which refers to time",
        "evidence": "lap record means the fastest time recorded which refers to time",
        "SQL": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Germany' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please list the lap records for the circuits in Germany."
    },
    {
        "question_id": 734,
        "db_id": "formula_1",
        "question": "Please give the name of the race held on the circuits in Netherlands. Germany is a name of country;",
        "evidence": "Germany is a name of country;",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Netherlands'",
        "difficulty": "simple",
        "raw_question": "Please give the name of the race held on the circuits in Netherlands."
    },
    {
        "question_id": 735,
        "db_id": "formula_1",
        "question": "Please give the names of the races held on the circuits in Netherlands. Spain is a name of country;",
        "evidence": "Spain is a name of country;",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Netherlands'",
        "difficulty": "simple",
        "raw_question": "Please give the names of the races held on the circuits in Netherlands."
    },
    {
        "question_id": 736,
        "db_id": "formula_1",
        "question": "How many times the circuits were held in Netherlands? Please give their location and coordinates. location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Netherlands'",
        "difficulty": "simple",
        "raw_question": "How many times the circuits were held in Netherlands? Please give their location and coordinates."
    },
    {
        "question_id": 737,
        "db_id": "superhero",
        "question": "Please list the superhero names of all the superheroes that have Blue eyes and blond hair. blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
        "difficulty": "simple",
        "raw_question": "Please list the superhero names of all the superheroes that have Blue eyes and blond hair."
    },
    {
        "question_id": 738,
        "db_id": "superhero",
        "question": "Provide the heights of the heroes whose eye colours are Blue. heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
        "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
        "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "difficulty": "simple",
        "raw_question": "Provide the heights of the heroes whose eye colours are Blue."
    },
    {
        "question_id": 739,
        "db_id": "superhero",
        "question": "List the heroes' names whose eyes and hair colours are both Blue. heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
        "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Blue'",
        "difficulty": "simple",
        "raw_question": "List the heroes' names whose eyes and hair colours are both Blue."
    },
    {
        "question_id": 740,
        "db_id": "superhero",
        "question": "Provide the eye colours of the heroes whose skin colours are Blue. skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;",
        "evidence": "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Blue'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colours of the heroes whose skin colours are Blue."
    },
    {
        "question_id": 741,
        "db_id": "superhero",
        "question": "Which superheroes have Blue eyes with brown hair? which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
        "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
        "difficulty": "simple",
        "raw_question": "Which superheroes have Blue eyes with brown hair?"
    },
    {
        "question_id": 742,
        "db_id": "superhero",
        "question": "List down at least five full names of superheroes with Blue eyes. blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
        "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
        "difficulty": "simple",
        "raw_question": "List down at least five full names of superheroes with Blue eyes."
    },
    {
        "question_id": 743,
        "db_id": "superhero",
        "question": "Give the race of the Blue-haired male superhero. blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
        "difficulty": "simple",
        "raw_question": "Give the race of the Blue-haired male superhero."
    },
    {
        "question_id": 744,
        "db_id": "superhero",
        "question": "In superheroes with weight less than 100, list the full name of the superheroes with Blue eyes. weight less than 100 refers to weight_kg < 100",
        "evidence": "weight less than 100 refers to weight_kg < 100",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Blue'",
        "difficulty": "simple",
        "raw_question": "In superheroes with weight less than 100, list the full name of the superheroes with Blue eyes."
    },
    {
        "question_id": 745,
        "db_id": "formula_1",
        "question": "Which of the Swiss constructor got the highest point to date? Give its introduction website? introduction website refers to url; Italian is a nationality",
        "evidence": "introduction website refers to url; Italian is a nationality",
        "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Swiss' ORDER BY T2.points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which of the Swiss constructor got the highest point to date? Give its introduction website?"
    },
    {
        "question_id": 746,
        "db_id": "european_football_2",
        "question": "What is the name of the football league in the country of Netherlands? name of the football league refers to League.name;",
        "evidence": "name of the football league refers to League.name;",
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
        "difficulty": "simple",
        "raw_question": "What is the name of the football league in the country of Netherlands?"
    },
    {
        "question_id": 747,
        "db_id": "european_football_2",
        "question": "Please list the leagues from Netherlands. Germany refers to Country.name = 'Germany';",
        "evidence": "Germany refers to Country.name = 'Germany';",
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
        "difficulty": "simple",
        "raw_question": "Please list the leagues from Netherlands."
    },
    {
        "question_id": 748,
        "db_id": "european_football_2",
        "question": "State the name of players who came from Netherlands. name of players refers to player_name; Belgium is name of country",
        "evidence": "name of players refers to player_name; Belgium is name of country",
        "SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Netherlands'",
        "difficulty": "simple",
        "raw_question": "State the name of players who came from Netherlands."
    },
    {
        "question_id": 749,
        "db_id": "e_commerce",
        "question": "List all the distinct product names, price and descriptions which are bought by Female customers.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "difficulty": "simple",
        "raw_question": "List all the distinct product names, price and descriptions which are bought by Female customers."
    },
    {
        "question_id": 750,
        "db_id": "e_commerce",
        "question": "What are the different names, prices, and descriptions for all products bought by Female customers?",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
        "difficulty": "simple",
        "raw_question": "What are the different names, prices, and descriptions for all products bought by Female customers?"
    },
    {
        "question_id": 751,
        "db_id": "e_commerce",
        "question": "List all the distinct product names, price and descriptions which are bought by Male customers.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Male'",
        "difficulty": "simple",
        "raw_question": "List all the distinct product names, price and descriptions which are bought by Male customers."
    },
    {
        "question_id": 752,
        "db_id": "e_commerce",
        "question": "What are the different names, prices, and descriptions for all products bought by Male customers?",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Male'",
        "difficulty": "simple",
        "raw_question": "What are the different names, prices, and descriptions for all products bought by Male customers?"
    },
    {
        "question_id": 753,
        "db_id": "student_transcripts_tracking",
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "difficulty": "simple",
        "raw_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name."
    },
    {
        "question_id": 754,
        "db_id": "student_club",
        "question": "List the full name of all the members of the Student_Club who attended the \"Registration\" event. full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Registration'",
        "difficulty": "simple",
        "raw_question": "List the full name of all the members of the Student_Club who attended the \"Registration\" event."
    },
    {
        "question_id": 755,
        "db_id": "student_club",
        "question": "Give the location for \"Registration\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'Registration'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"Registration\"."
    },
    {
        "question_id": 756,
        "db_id": "student_club",
        "question": "List all the members who attended the event \"Registration\". 'October Meeting' is an event name;",
        "evidence": "'October Meeting' is an event name;",
        "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Registration'",
        "difficulty": "simple",
        "raw_question": "List all the members who attended the event \"Registration\"."
    },
    {
        "question_id": 757,
        "db_id": "student_club",
        "question": "Among the students majored in interior design, who have attended the Registration event? majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Registration' AND T1.major_name = 'Interior Design'",
        "difficulty": "simple",
        "raw_question": "Among the students majored in interior design, who have attended the Registration event?"
    },
    {
        "question_id": 758,
        "db_id": "student_club",
        "question": "Which student has been entrusted to manage the budget for the Registration? name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
        "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
        "SQL": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Registration'",
        "difficulty": "simple",
        "raw_question": "Which student has been entrusted to manage the budget for the Registration?"
    },
    {
        "question_id": 759,
        "db_id": "student_club",
        "question": "Calculate the amount budgeted for 'Registration' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted. 'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Registration' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "difficulty": "simple",
        "raw_question": "Calculate the amount budgeted for 'Registration' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
    },
    {
        "question_id": 760,
        "db_id": "student_club",
        "question": "What category was budgeted for the 'Registration' event and how much was the amount budgeted for that category? amount budgeted refers to amount, 'January Speaker' is the event name;",
        "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Registration'",
        "difficulty": "simple",
        "raw_question": "What category was budgeted for the 'Registration' event and how much was the amount budgeted for that category?"
    },
    {
        "question_id": 761,
        "db_id": "student_club",
        "question": "Among all the Planning events, which event has the highest spend-to-budget ratio? closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
        "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Planning' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among all the Planning events, which event has the highest spend-to-budget ratio?"
    },
    {
        "question_id": 762,
        "db_id": "student_club",
        "question": "List the names of Planning event as \"game\" that was closed from 3/15/2019 to 3/20/2020. name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20';",
        "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
        "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Planning'",
        "difficulty": "simple",
        "raw_question": "List the names of Planning event as \"game\" that was closed from 3/15/2019 to 3/20/2020."
    },
    {
        "question_id": 763,
        "db_id": "student_club",
        "question": "List the names of closed event as \"Registration\" that was closed from 3/15/2019 to 3/20/2020. name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20';",
        "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
        "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Registration' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
        "difficulty": "simple",
        "raw_question": "List the names of closed event as \"Registration\" that was closed from 3/15/2019 to 3/20/2020."
    },
    {
        "question_id": 764,
        "db_id": "student_club",
        "question": "Indicate the cost of Parking for 'September Speaker' event. 'Posters' is the expense description; 'September Speaker' is an event name",
        "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
        "SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Parking'",
        "difficulty": "simple",
        "raw_question": "Indicate the cost of Parking for 'September Speaker' event."
    },
    {
        "question_id": 765,
        "db_id": "student_club",
        "question": "Which budget category does the expense 'Parking' fall to? 'Posters' refers to expense description",
        "evidence": "'Posters' refers to expense description",
        "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Parking'",
        "difficulty": "simple",
        "raw_question": "Which budget category does the expense 'Parking' fall to?"
    },
    {
        "question_id": 766,
        "db_id": "card_games",
        "question": "Name all the cards which have alternative language in German. Japanese' is the language;",
        "evidence": "Japanese' is the language;",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German'",
        "difficulty": "simple",
        "raw_question": "Name all the cards which have alternative language in German."
    },
    {
        "question_id": 767,
        "db_id": "card_games",
        "question": "Please provide the names of the artists who illustrated the card art in German. Phyrexian' is the language; name of artists refers to artist;",
        "evidence": "Phyrexian' is the language; name of artists refers to artist;",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German'",
        "difficulty": "simple",
        "raw_question": "Please provide the names of the artists who illustrated the card art in German."
    },
    {
        "question_id": 768,
        "db_id": "card_games",
        "question": "List down the name of artists for cards in German. Chinese Simplified' is the language;",
        "evidence": "Chinese Simplified' is the language;",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German'",
        "difficulty": "simple",
        "raw_question": "List down the name of artists for cards in German."
    },
    {
        "question_id": 769,
        "db_id": "card_games",
        "question": "What are the cards that only available in paper and German language? available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'German'",
        "difficulty": "simple",
        "raw_question": "What are the cards that only available in paper and German language?"
    },
    {
        "question_id": 770,
        "db_id": "card_games",
        "question": "Calculate the percentage of cards in German. List them by name. Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'German' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'German'",
        "difficulty": "simple",
        "raw_question": "Calculate the percentage of cards in German. List them by name."
    },
    {
        "question_id": 771,
        "db_id": "card_games",
        "question": "Lists all types of cards in German. German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
        "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
        "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Lists all types of cards in German."
    },
    {
        "question_id": 772,
        "db_id": "card_games",
        "question": "Please list the German text ruling of all the cards in the set Coldsnap. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
        "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'German'",
        "difficulty": "simple",
        "raw_question": "Please list the German text ruling of all the cards in the set Coldsnap."
    },
    {
        "question_id": 773,
        "db_id": "card_games",
        "question": "Please list the German names of the cards in the set Coldsnap with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
        "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'German' ORDER BY T2.convertedManaCost DESC",
        "difficulty": "simple",
        "raw_question": "Please list the German names of the cards in the set Coldsnap with the highest converted mana cost."
    },
    {
        "question_id": 774,
        "db_id": "advertising_agencies",
        "question": "Show all payment ids and details for invoices whose status is 'Starting'.",
        "evidence": "",
        "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Starting'",
        "difficulty": "simple",
        "raw_question": "Show all payment ids and details for invoices whose status is 'Starting'."
    },
    {
        "question_id": 775,
        "db_id": "advertising_agencies",
        "question": "What are all payment ids and payment details for invoices with status Starting?",
        "evidence": "",
        "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Starting'",
        "difficulty": "simple",
        "raw_question": "What are all payment ids and payment details for invoices with status Starting?"
    },
    {
        "question_id": 776,
        "db_id": "advertising_agencies",
        "question": "Show all payment ids and details for invoices whose status is 'Finish'.",
        "evidence": "",
        "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Finish'",
        "difficulty": "simple",
        "raw_question": "Show all payment ids and details for invoices whose status is 'Finish'."
    },
    {
        "question_id": 777,
        "db_id": "advertising_agencies",
        "question": "What are all payment ids and payment details for invoices with status Finish?",
        "evidence": "",
        "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Finish'",
        "difficulty": "simple",
        "raw_question": "What are all payment ids and payment details for invoices with status Finish?"
    },
    {
        "question_id": 778,
        "db_id": "card_games",
        "question": "List all the mythic rarity print cards banned in modern format. mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'modern' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "difficulty": "simple",
        "raw_question": "List all the mythic rarity print cards banned in modern format."
    },
    {
        "question_id": 779,
        "db_id": "card_games",
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for modern play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'modern' AND T1.side IS NULL",
        "difficulty": "simple",
        "raw_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for modern play format."
    },
    {
        "question_id": 780,
        "db_id": "card_games",
        "question": "List down the uuid for modern cards and the foreign language of these cards. legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'modern'",
        "difficulty": "simple",
        "raw_question": "List down the uuid for modern cards and the foreign language of these cards."
    },
    {
        "question_id": 781,
        "db_id": "card_games",
        "question": "Is there any card from Erica Yang artist in modern format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'modern' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Erica Yang artist in modern format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 782,
        "db_id": "student_club",
        "question": "What kind of expenses incurred by members who have Large in size of tee shirt? kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
        "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
        "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Large'",
        "difficulty": "simple",
        "raw_question": "What kind of expenses incurred by members who have Large in size of tee shirt?"
    },
    {
        "question_id": 783,
        "db_id": "thrombosis_prediction",
        "question": "What was the gender of the first arthralgia diagnosed patient? gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'arthralgia' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What was the gender of the first arthralgia diagnosed patient?"
    },
    {
        "question_id": 784,
        "db_id": "superhero",
        "question": "Give the name of the Alien superheroes. alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "difficulty": "simple",
        "raw_question": "Give the name of the Alien superheroes."
    },
    {
        "question_id": 785,
        "db_id": "superhero",
        "question": "List down at least five full name of Alien superheroes. Demi-God superheroes refers to race = 'Demi-God'",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "difficulty": "simple",
        "raw_question": "List down at least five full name of Alien superheroes."
    },
    {
        "question_id": 786,
        "db_id": "superhero",
        "question": "Provide the hair colour of the Alien superhero who is 185 cm tall. 185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Alien'",
        "difficulty": "simple",
        "raw_question": "Provide the hair colour of the Alien superhero who is 185 cm tall."
    },
    {
        "question_id": 787,
        "db_id": "superhero",
        "question": "Provide the full names of Alien heroes. vampire heroes refers to race = 'Vampire';",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
        "difficulty": "simple",
        "raw_question": "Provide the full names of Alien heroes."
    },
    {
        "question_id": 788,
        "db_id": "california_schools",
        "question": "Which Merged district has the highest average score in Reading?",
        "evidence": "",
        "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' ORDER BY T2.AvgScrRead DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which Merged district has the highest average score in Reading?"
    },
    {
        "question_id": 789,
        "db_id": "california_schools",
        "question": "Which different county has the most number of Merged schools? Please provide the name of each school as well as the closure date. Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
        "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
        "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Merged' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Merged' AND school IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Which different county has the most number of Merged schools? Please provide the name of each school as well as the closure date."
    },
    {
        "question_id": 790,
        "db_id": "card_games",
        "question": "Among the sets whose expansion type is starter, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "SQL": "SELECT id FROM sets WHERE type = 'starter' ORDER BY totalSetSize DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among the sets whose expansion type is starter, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set."
    },
    {
        "question_id": 791,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Intelligence'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Intelligence'."
    },
    {
        "question_id": 792,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Intelligence? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Intelligence?"
    },
    {
        "question_id": 793,
        "db_id": "superhero",
        "question": "List the name of superheroes with Intelligence power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Intelligence power."
    },
    {
        "question_id": 794,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Intelligence power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Intelligence power."
    },
    {
        "question_id": 795,
        "db_id": "superhero",
        "question": "What is the power ID of Intelligence? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Intelligence'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Intelligence?"
    },
    {
        "question_id": 796,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Intelligence. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Intelligence'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Intelligence."
    },
    {
        "question_id": 797,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named teaching? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'teaching'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named teaching?"
    },
    {
        "question_id": 798,
        "db_id": "european_football_2",
        "question": "For the teams with Normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing. normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;",
        "evidence": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;",
        "SQL": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
        "difficulty": "simple",
        "raw_question": "For the teams with Normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing."
    },
    {
        "question_id": 799,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'nonparametric.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'nonparametric' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'nonparametric.'"
    },
    {
        "question_id": 800,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the nonparametric Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'nonparametric'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the nonparametric Badges."
    },
    {
        "question_id": 801,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the nonparametric badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'nonparametric'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the nonparametric badge."
    },
    {
        "question_id": 802,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first nonparametric badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'nonparametric' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first nonparametric badge?"
    },
    {
        "question_id": 803,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Paul Bonner. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Paul Bonner'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Paul Bonner."
    },
    {
        "question_id": 804,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Paul Bonner cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Paul Bonner'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Paul Bonner cost in total?"
    },
    {
        "question_id": 805,
        "db_id": "card_games",
        "question": "Is there any card from Paul Bonner artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Paul Bonner' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Paul Bonner artist in pauper format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 806,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Paul Bonner created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Paul Bonner'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Paul Bonner created?"
    },
    {
        "question_id": 807,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Paul Bonner? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Paul Bonner' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Paul Bonner? List them in descending order of dates."
    },
    {
        "question_id": 808,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Paul Bonner worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Paul Bonner'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Paul Bonner worked on and find any banned cards if there are any."
    },
    {
        "question_id": 809,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Horsemanship?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Horsemanship'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Horsemanship?"
    },
    {
        "question_id": 810,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Blazing Hellhound'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Blazing Hellhound'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Blazing Hellhound'?"
    },
    {
        "question_id": 811,
        "db_id": "card_games",
        "question": "What is the status of card \"Blazing Hellhound\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Blazing Hellhound'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Blazing Hellhound\"?"
    },
    {
        "question_id": 812,
        "db_id": "card_games",
        "question": "What is the type of card \"Blazing Hellhound\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Blazing Hellhound'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Blazing Hellhound\"?"
    },
    {
        "question_id": 813,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Blazing Hellhound\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Blazing Hellhound'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Blazing Hellhound\"?"
    },
    {
        "question_id": 814,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Blazing Hellhound\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Blazing Hellhound'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Blazing Hellhound\"?"
    },
    {
        "question_id": 815,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Blazing Hellhound\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Blazing Hellhound'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Blazing Hellhound\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 816,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Blazing Hellhound\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Blazing Hellhound'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Blazing Hellhound\" in it?"
    },
    {
        "question_id": 817,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Blazing Hellhound\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Blazing Hellhound' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Blazing Hellhound\" is in?"
    },
    {
        "question_id": 818,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Blazing Hellhound\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Blazing Hellhound' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Blazing Hellhound\" is in it."
    },
    {
        "question_id": 819,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Charade Circuit be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Charade Circuit be found?"
    },
    {
        "question_id": 820,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Charade Circuit? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Charade Circuit?"
    },
    {
        "question_id": 821,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Charade Circuit.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Charade Circuit."
    },
    {
        "question_id": 822,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Charade Circuit? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Charade Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Charade Circuit?"
    },
    {
        "question_id": 823,
        "db_id": "formula_1",
        "question": "What's the reference name of Charade Circuit? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Charade Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Charade Circuit?"
    },
    {
        "question_id": 824,
        "db_id": "formula_1",
        "question": "Please list all the years that Charade Circuit was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Charade Circuit was used in a Formula_1 race."
    },
    {
        "question_id": 825,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Charade Circuit. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Charade Circuit."
    },
    {
        "question_id": 826,
        "db_id": "formula_1",
        "question": "In which location does the Charade Circuit circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Charade Circuit'",
        "difficulty": "simple",
        "raw_question": "In which location does the Charade Circuit circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 827,
        "db_id": "student_club",
        "question": "List the full name of all the members of the Student_Club who attended the \"Football game\" event. full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Football game'",
        "difficulty": "simple",
        "raw_question": "List the full name of all the members of the Student_Club who attended the \"Football game\" event."
    },
    {
        "question_id": 828,
        "db_id": "student_club",
        "question": "Give the location for \"Football game\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'Football game'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"Football game\"."
    },
    {
        "question_id": 829,
        "db_id": "student_club",
        "question": "List all the members who attended the event \"Football game\". 'October Meeting' is an event name;",
        "evidence": "'October Meeting' is an event name;",
        "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Football game'",
        "difficulty": "simple",
        "raw_question": "List all the members who attended the event \"Football game\"."
    },
    {
        "question_id": 830,
        "db_id": "student_club",
        "question": "Among the students majored in interior design, who have attended the Football game event? majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Football game' AND T1.major_name = 'Interior Design'",
        "difficulty": "simple",
        "raw_question": "Among the students majored in interior design, who have attended the Football game event?"
    },
    {
        "question_id": 831,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Rite de duplication\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Rite de duplication'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Rite de duplication\"?"
    },
    {
        "question_id": 832,
        "db_id": "european_football_2",
        "question": "What is the attacking work rate of the football playerr Angel Rodriguez?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
        "difficulty": "simple",
        "raw_question": "What is the attacking work rate of the football playerr Angel Rodriguez?"
    },
    {
        "question_id": 833,
        "db_id": "european_football_2",
        "question": "What is the football player Angel Rodriguez header's finishing rate on 18/09/2014? header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "difficulty": "simple",
        "raw_question": "What is the football player Angel Rodriguez header's finishing rate on 18/09/2014?"
    },
    {
        "question_id": 834,
        "db_id": "european_football_2",
        "question": "What is the overall rating of the football player Angel Rodriguez in year 2011? in year 2011 refers to strftime('%Y', date) = '2011';",
        "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez' AND strftime('%Y', t2.date) = '2011'",
        "difficulty": "simple",
        "raw_question": "What is the overall rating of the football player Angel Rodriguez in year 2011?"
    },
    {
        "question_id": 835,
        "db_id": "european_football_2",
        "question": "What is the defensive work rate of the football player Angel Rodriguez\n?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
        "difficulty": "simple",
        "raw_question": "What is the defensive work rate of the football player Angel Rodriguez\n?"
    },
    {
        "question_id": 836,
        "db_id": "european_football_2",
        "question": "What is Angel Rodriguez's potential score? potential score refers to potential;",
        "evidence": "potential score refers to potential;",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
        "difficulty": "simple",
        "raw_question": "What is Angel Rodriguez's potential score?"
    },
    {
        "question_id": 837,
        "db_id": "european_football_2",
        "question": "What's the heading accuracy of Angel Rodriguez?",
        "evidence": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
        "difficulty": "simple",
        "raw_question": "What's the heading accuracy of Angel Rodriguez?"
    },
    {
        "question_id": 838,
        "db_id": "european_football_2",
        "question": "Which foot is preferred by Angel Rodriguez? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
        "difficulty": "simple",
        "raw_question": "Which foot is preferred by Angel Rodriguez?"
    },
    {
        "question_id": 839,
        "db_id": "european_football_2",
        "question": "What was the potiential for Angel Rodriguez on 2010/8/30? Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Angel Rodriguez'",
        "difficulty": "simple",
        "raw_question": "What was the potiential for Angel Rodriguez on 2010/8/30?"
    },
    {
        "question_id": 840,
        "db_id": "european_football_2",
        "question": "Tell the defensive work rate for Angel Rodriguez on 2013/2/22. Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
        "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
        "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Angel Rodriguez'",
        "difficulty": "simple",
        "raw_question": "Tell the defensive work rate for Angel Rodriguez on 2013/2/22."
    },
    {
        "question_id": 841,
        "db_id": "european_football_2",
        "question": "When was the first time did Angel Rodriguez have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Angel Rodriguez' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the first time did Angel Rodriguez have his highest crossing score? Give the date."
    },
    {
        "question_id": 842,
        "db_id": "codebase_community",
        "question": "Identify the total views on the post 'Chi Squared Distribution Question'. Name the user who posted it last time. total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Chi Squared Distribution Question'",
        "difficulty": "simple",
        "raw_question": "Identify the total views on the post 'Chi Squared Distribution Question'. Name the user who posted it last time."
    },
    {
        "question_id": 843,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Problem on interpretation of data\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Problem on interpretation of data'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Problem on interpretation of data\"?"
    },
    {
        "question_id": 844,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Problem on interpretation of data\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Problem on interpretation of data'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"Problem on interpretation of data\"?"
    },
    {
        "question_id": 845,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Problem on interpretation of data\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Problem on interpretation of data'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Problem on interpretation of data\"?"
    },
    {
        "question_id": 846,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Problem on interpretation of data' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Problem on interpretation of data'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Problem on interpretation of data' get?"
    },
    {
        "question_id": 847,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Problem on interpretation of data\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Problem on interpretation of data'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Problem on interpretation of data\"."
    },
    {
        "question_id": 848,
        "db_id": "codebase_community",
        "question": "Provide the text of the latest 10 comments to the post with the title 'Problem on interpretation of data' and the display name of the user who left it. the latest comment refers to MAX(CreationDate);",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Problem on interpretation of data' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Provide the text of the latest 10 comments to the post with the title 'Problem on interpretation of data' and the display name of the user who left it."
    },
    {
        "question_id": 849,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Problem on interpretation of data'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Problem on interpretation of data'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Problem on interpretation of data'?"
    },
    {
        "question_id": 850,
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Problem on interpretation of data\"? Title = 'Group differences on a five point Likert item';",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Problem on interpretation of data'",
        "difficulty": "simple",
        "raw_question": "What is the post ID and the comments commented in the post titled by \"Problem on interpretation of data\"?"
    },
    {
        "question_id": 851,
        "db_id": "california_schools",
        "question": "What is the most common type of grade span served in the city of Princeton?",
        "evidence": "",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Princeton' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common type of grade span served in the city of Princeton?"
    },
    {
        "question_id": 852,
        "db_id": "superhero",
        "question": "What is the eyes colour of Moses Magnum? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Moses Magnum'",
        "difficulty": "simple",
        "raw_question": "What is the eyes colour of Moses Magnum?"
    },
    {
        "question_id": 853,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Moses Magnum. hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Moses Magnum'",
        "difficulty": "simple",
        "raw_question": "Provide the hero name and race of Moses Magnum."
    },
    {
        "question_id": 854,
        "db_id": "superhero",
        "question": "List the powers of Moses Magnum. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Moses Magnum'",
        "difficulty": "simple",
        "raw_question": "List the powers of Moses Magnum."
    },
    {
        "question_id": 855,
        "db_id": "superhero",
        "question": "Provide the eye colour of the superhero who has Moses Magnum as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Moses Magnum'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colour of the superhero who has Moses Magnum as their full name."
    },
    {
        "question_id": 856,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Moses Magnum. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Moses Magnum'",
        "difficulty": "simple",
        "raw_question": "Name the superhero, otherwise known as Moses Magnum."
    },
    {
        "question_id": 857,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Super Breath'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Breath' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Super Breath'."
    },
    {
        "question_id": 858,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Super Breath? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Breath'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Super Breath?"
    },
    {
        "question_id": 859,
        "db_id": "superhero",
        "question": "List the name of superheroes with Super Breath power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Breath'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Super Breath power."
    },
    {
        "question_id": 860,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Super Breath power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Breath'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Super Breath power."
    },
    {
        "question_id": 861,
        "db_id": "superhero",
        "question": "What is the power ID of Super Breath? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Super Breath'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Super Breath?"
    },
    {
        "question_id": 862,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Super Breath. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Super Breath'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Super Breath."
    },
    {
        "question_id": 863,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named discriminant? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'discriminant'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named discriminant?"
    },
    {
        "question_id": 864,
        "db_id": "codebase_community",
        "question": "Please list the titles of the posts owned by the user Sam Saffron? \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "Please list the titles of the posts owned by the user Sam Saffron?"
    },
    {
        "question_id": 865,
        "db_id": "codebase_community",
        "question": "What is the title of the post that is owned by Sam Saffron and has the highest popularity? \"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron' ORDER BY T1.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the title of the post that is owned by Sam Saffron and has the highest popularity?"
    },
    {
        "question_id": 866,
        "db_id": "codebase_community",
        "question": "Please list the names of the badges obtained by Sam Saffron. \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the badges obtained by Sam Saffron."
    },
    {
        "question_id": 867,
        "db_id": "codebase_community",
        "question": "For the user whose display name is \"Sam Saffron\", what is his/her badge's name? \"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "For the user whose display name is \"Sam Saffron\", what is his/her badge's name?"
    },
    {
        "question_id": 868,
        "db_id": "codebase_community",
        "question": "What is the badge name that user 'Sam Saffron' obtained? \"SilentGhost\" is the DisplayName of user;",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "What is the badge name that user 'Sam Saffron' obtained?"
    },
    {
        "question_id": 869,
        "db_id": "codebase_community",
        "question": "Write all comments made by user 'Sam Saffron.' \"A Lion\" is the DisplayName of user; comment refers to Text",
        "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
        "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "Write all comments made by user 'Sam Saffron.'"
    },
    {
        "question_id": 870,
        "db_id": "codebase_community",
        "question": "List the title of posts which were edited by Sam Saffron. \"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "List the title of posts which were edited by Sam Saffron."
    },
    {
        "question_id": 871,
        "db_id": "codebase_community",
        "question": "What is the name of badge that the user whose display name is \"Sam Saffron\" obtained?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "What is the name of badge that the user whose display name is \"Sam Saffron\" obtained?"
    },
    {
        "question_id": 872,
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"Sam Saffron\" obtained. \"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "State the name of badge that the user whose display name is \"Sam Saffron\" obtained."
    },
    {
        "question_id": 873,
        "db_id": "codebase_community",
        "question": "What is the name of tags used by Sam Saffron's? DisplayName = 'John Salvatier';",
        "evidence": "DisplayName = 'John Salvatier';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "What is the name of tags used by Sam Saffron's?"
    },
    {
        "question_id": 874,
        "db_id": "codebase_community",
        "question": "Which post by Sam Saffron has the most answers count? State the post ID. most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Sam Saffron' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Sam Saffron has the most answers count? State the post ID."
    },
    {
        "question_id": 875,
        "db_id": "codebase_community",
        "question": "Among posts by Sam Saffron and Noah Snyder, which one has higher popularity? Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Sam Saffron' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among posts by Sam Saffron and Noah Snyder, which one has higher popularity?"
    },
    {
        "question_id": 876,
        "db_id": "codebase_community",
        "question": "Which post by Sam Saffron has the most views? Please give the id and title of this post. DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Sam Saffron' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Sam Saffron has the most views? Please give the id and title of this post."
    },
    {
        "question_id": 877,
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name Sam Saffron. the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the latest badge awarded to the user with the display name Sam Saffron."
    },
    {
        "question_id": 878,
        "db_id": "codebase_community",
        "question": "How long did it take the user, known by his or her display name 'Sam Saffron' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "How long did it take the user, known by his or her display name 'Sam Saffron' to get the badge? Count from the date the user's account was created."
    },
    {
        "question_id": 879,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Sam Saffron'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'Sam Saffron'?"
    },
    {
        "question_id": 880,
        "db_id": "codebase_community",
        "question": "When did the user known as 'Sam Saffron' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'Sam Saffron' create his or her account?"
    },
    {
        "question_id": 881,
        "db_id": "codebase_community",
        "question": "List the comments commented by the user with a username of Sam Saffron. comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
        "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
        "difficulty": "simple",
        "raw_question": "List the comments commented by the user with a username of Sam Saffron."
    },
    {
        "question_id": 882,
        "db_id": "codebase_community",
        "question": "List out the dates that users who are located in Saint Moscow obtained their badges? \"Rochester, NY\" is the Location of user; user refers to UserId",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Saint Moscow'",
        "difficulty": "simple",
        "raw_question": "List out the dates that users who are located in Saint Moscow obtained their badges?"
    },
    {
        "question_id": 883,
        "db_id": "codebase_community",
        "question": "List out the age of users who located in Saint Moscow obtained the badge? \"Vienna, Austria\" is the Location",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Saint Moscow'",
        "difficulty": "simple",
        "raw_question": "List out the age of users who located in Saint Moscow obtained the badge?"
    },
    {
        "question_id": 884,
        "db_id": "codebase_community",
        "question": "Provide the badge names received in 2011 for the user whose location is in the Saint Moscow. received in 2011 refers to year(Date) = 2011;",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'Saint Moscow'",
        "difficulty": "simple",
        "raw_question": "Provide the badge names received in 2011 for the user whose location is in the Saint Moscow."
    },
    {
        "question_id": 885,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code of the address in the city South Palma?",
        "evidence": "",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'South Palma'",
        "difficulty": "simple",
        "raw_question": "What is the zip code of the address in the city South Palma?"
    },
    {
        "question_id": 886,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code for South Palma?",
        "evidence": "",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'South Palma'",
        "difficulty": "simple",
        "raw_question": "What is the zip code for South Palma?"
    },
    {
        "question_id": 887,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Constituent.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Constituent' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Constituent.'"
    },
    {
        "question_id": 888,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Constituent Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Constituent'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Constituent Badges."
    },
    {
        "question_id": 889,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Constituent badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Constituent'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Constituent badge."
    },
    {
        "question_id": 890,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Constituent badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Constituent' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Constituent badge?"
    },
    {
        "question_id": 891,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Stephanie Mitchell. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Stephanie Mitchell'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Stephanie Mitchell."
    },
    {
        "question_id": 892,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Stephanie Mitchell cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Stephanie Mitchell'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Stephanie Mitchell cost in total?"
    },
    {
        "question_id": 893,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Stephanie Mitchell created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Stephanie Mitchell'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Stephanie Mitchell created?"
    },
    {
        "question_id": 894,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Stephanie Mitchell? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Stephanie Mitchell' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Stephanie Mitchell? List them in descending order of dates."
    },
    {
        "question_id": 895,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Faceless Devourer'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Faceless Devourer'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Faceless Devourer'?"
    },
    {
        "question_id": 896,
        "db_id": "card_games",
        "question": "What is the status of card \"Faceless Devourer\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Faceless Devourer'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Faceless Devourer\"?"
    },
    {
        "question_id": 897,
        "db_id": "card_games",
        "question": "What is the type of card \"Faceless Devourer\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Faceless Devourer'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Faceless Devourer\"?"
    },
    {
        "question_id": 898,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Faceless Devourer\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Faceless Devourer'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Faceless Devourer\"?"
    },
    {
        "question_id": 899,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Faceless Devourer\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Faceless Devourer'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Faceless Devourer\"?"
    },
    {
        "question_id": 900,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Faceless Devourer\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Faceless Devourer'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Faceless Devourer\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 901,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Faceless Devourer\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Faceless Devourer'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Faceless Devourer\" in it?"
    },
    {
        "question_id": 902,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Faceless Devourer\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Faceless Devourer' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Faceless Devourer\" is in?"
    },
    {
        "question_id": 903,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Faceless Devourer\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Faceless Devourer' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Faceless Devourer\" is in it."
    },
    {
        "question_id": 904,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Snow Sorcery and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Snow Sorcery'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Snow Sorcery and the date of rulings for these cards."
    },
    {
        "question_id": 905,
        "db_id": "card_games",
        "question": "For Snow Sorcery type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Snow Sorcery' AND T2.format = 'vintage' AND T1.side IS NULL",
        "difficulty": "simple",
        "raw_question": "For Snow Sorcery type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
    },
    {
        "question_id": 906,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Indianapolis Motor Speedway be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Indianapolis Motor Speedway be found?"
    },
    {
        "question_id": 907,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Indianapolis Motor Speedway? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Indianapolis Motor Speedway?"
    },
    {
        "question_id": 908,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Indianapolis Motor Speedway.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Indianapolis Motor Speedway."
    },
    {
        "question_id": 909,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Indianapolis Motor Speedway? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Indianapolis Motor Speedway'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Indianapolis Motor Speedway?"
    },
    {
        "question_id": 910,
        "db_id": "formula_1",
        "question": "What's the reference name of Indianapolis Motor Speedway? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Indianapolis Motor Speedway'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Indianapolis Motor Speedway?"
    },
    {
        "question_id": 911,
        "db_id": "formula_1",
        "question": "Please list all the years that Indianapolis Motor Speedway was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Indianapolis Motor Speedway was used in a Formula_1 race."
    },
    {
        "question_id": 912,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Indianapolis Motor Speedway. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Indianapolis Motor Speedway."
    },
    {
        "question_id": 913,
        "db_id": "formula_1",
        "question": "In which location does the Indianapolis Motor Speedway circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Indianapolis Motor Speedway'",
        "difficulty": "simple",
        "raw_question": "In which location does the Indianapolis Motor Speedway circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 914,
        "db_id": "world_1",
        "question": "Return the different names of cities that are in Asia and for which Mandarin Chinese is the official language.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Mandarin Chinese' AND T1.Continent  =  \"Asia\"",
        "difficulty": "simple",
        "raw_question": "Return the different names of cities that are in Asia and for which Mandarin Chinese is the official language."
    },
    {
        "question_id": 915,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Remover a Alma\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Remover a Alma'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Remover a Alma\"?"
    },
    {
        "question_id": 916,
        "db_id": "european_football_2",
        "question": "What is the attacking work rate of the football playerr Claudio?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
        "difficulty": "simple",
        "raw_question": "What is the attacking work rate of the football playerr Claudio?"
    },
    {
        "question_id": 917,
        "db_id": "european_football_2",
        "question": "What is the overall rating of the football player Claudio in year 2011? in year 2011 refers to strftime('%Y', date) = '2011';",
        "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio' AND strftime('%Y', t2.date) = '2011'",
        "difficulty": "simple",
        "raw_question": "What is the overall rating of the football player Claudio in year 2011?"
    },
    {
        "question_id": 918,
        "db_id": "european_football_2",
        "question": "What is the defensive work rate of the football player Claudio\n?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
        "difficulty": "simple",
        "raw_question": "What is the defensive work rate of the football player Claudio\n?"
    },
    {
        "question_id": 919,
        "db_id": "european_football_2",
        "question": "What is Claudio's potential score? potential score refers to potential;",
        "evidence": "potential score refers to potential;",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
        "difficulty": "simple",
        "raw_question": "What is Claudio's potential score?"
    },
    {
        "question_id": 920,
        "db_id": "european_football_2",
        "question": "What's the heading accuracy of Claudio?",
        "evidence": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
        "difficulty": "simple",
        "raw_question": "What's the heading accuracy of Claudio?"
    },
    {
        "question_id": 921,
        "db_id": "european_football_2",
        "question": "Which foot is preferred by Claudio? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
        "difficulty": "simple",
        "raw_question": "Which foot is preferred by Claudio?"
    },
    {
        "question_id": 922,
        "db_id": "european_football_2",
        "question": "When was the first time did Claudio have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Claudio' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the first time did Claudio have his highest crossing score? Give the date."
    },
    {
        "question_id": 923,
        "db_id": "bbc_channels",
        "question": "What is the name of the director who is in the \"The Leopard\" program?",
        "evidence": "",
        "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'The Leopard'",
        "difficulty": "simple",
        "raw_question": "What is the name of the director who is in the \"The Leopard\" program?"
    },
    {
        "question_id": 924,
        "db_id": "california_schools",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Stephanie. List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Stephanie'",
        "difficulty": "simple",
        "raw_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Stephanie. List the district code of the school."
    },
    {
        "question_id": 925,
        "db_id": "california_schools",
        "question": "What is the most common type of grade span served in the city of Lafayette?",
        "evidence": "",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Lafayette' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common type of grade span served in the city of Lafayette?"
    },
    {
        "question_id": 926,
        "db_id": "california_schools",
        "question": "What is the telephone number for the school with the lowest average score in reading in El Segundo Unified? Fresno Unified is a name of district;",
        "evidence": "Fresno Unified is a name of district;",
        "SQL": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'El Segundo Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the telephone number for the school with the lowest average score in reading in El Segundo Unified?"
    },
    {
        "question_id": 927,
        "db_id": "california_schools",
        "question": "How many test takers are there at the school/s whose mailing city address is in Lake Forest?",
        "evidence": "",
        "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lake Forest'",
        "difficulty": "simple",
        "raw_question": "How many test takers are there at the school/s whose mailing city address is in Lake Forest?"
    },
    {
        "question_id": 928,
        "db_id": "superhero",
        "question": "What is the eyes colour of Mick Rory? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Mick Rory'",
        "difficulty": "simple",
        "raw_question": "What is the eyes colour of Mick Rory?"
    },
    {
        "question_id": 929,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Mick Rory. hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Mick Rory'",
        "difficulty": "simple",
        "raw_question": "Provide the hero name and race of Mick Rory."
    },
    {
        "question_id": 930,
        "db_id": "superhero",
        "question": "List the powers of Mick Rory. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Mick Rory'",
        "difficulty": "simple",
        "raw_question": "List the powers of Mick Rory."
    },
    {
        "question_id": 931,
        "db_id": "superhero",
        "question": "Provide the eye colour of the superhero who has Mick Rory as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Mick Rory'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colour of the superhero who has Mick Rory as their full name."
    },
    {
        "question_id": 932,
        "db_id": "superhero",
        "question": "What is the superpowers of the superhero has Mick Rory as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Mick Rory'",
        "difficulty": "simple",
        "raw_question": "What is the superpowers of the superhero has Mick Rory as their full name?"
    },
    {
        "question_id": 933,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Mick Rory. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Mick Rory'",
        "difficulty": "simple",
        "raw_question": "Name the superhero, otherwise known as Mick Rory."
    },
    {
        "question_id": 934,
        "db_id": "superhero",
        "question": "Please list all the superpowers of Triton. 3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "Please list all the superpowers of Triton."
    },
    {
        "question_id": 935,
        "db_id": "superhero",
        "question": "What is the colour of Triton's skin? Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "What is the colour of Triton's skin?"
    },
    {
        "question_id": 936,
        "db_id": "superhero",
        "question": "Who is the publisher of Triton? the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "Who is the publisher of Triton?"
    },
    {
        "question_id": 937,
        "db_id": "superhero",
        "question": "What is the publisher's name of Triton? Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "What is the publisher's name of Triton?"
    },
    {
        "question_id": 938,
        "db_id": "superhero",
        "question": "What is Triton's race? Copycat is the superhero_name;",
        "evidence": "Copycat is the superhero_name;",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "What is Triton's race?"
    },
    {
        "question_id": 939,
        "db_id": "superhero",
        "question": "Provide the superpowers of the superhero called Triton. superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "Provide the superpowers of the superhero called Triton."
    },
    {
        "question_id": 940,
        "db_id": "superhero",
        "question": "Indicate the attribute value of superhero Triton. Abomination refers to superhero_name = 'Abomination';",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "Indicate the attribute value of superhero Triton."
    },
    {
        "question_id": 941,
        "db_id": "superhero",
        "question": "Which group does superhero Triton belong to? group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "Which group does superhero Triton belong to?"
    },
    {
        "question_id": 942,
        "db_id": "superhero",
        "question": "What is the gender of Triton hero? Agent 13 hero refers to superhero_name = 'Agent 13';",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "What is the gender of Triton hero?"
    },
    {
        "question_id": 943,
        "db_id": "superhero",
        "question": "What are the race and alignment of Triton? Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "What are the race and alignment of Triton?"
    },
    {
        "question_id": 944,
        "db_id": "superhero",
        "question": "What is Triton's superpower? Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "What is Triton's superpower?"
    },
    {
        "question_id": 945,
        "db_id": "superhero",
        "question": "State all of Triton's attributes along with their values. 3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "State all of Triton's attributes along with their values."
    },
    {
        "question_id": 946,
        "db_id": "superhero",
        "question": "Give the alignment and superpowers of the superhero named Triton. superpowers refers to power_name;",
        "evidence": "superpowers refers to power_name;",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "Give the alignment and superpowers of the superhero named Triton."
    },
    {
        "question_id": 947,
        "db_id": "superhero",
        "question": "List down Triton's superpowers. Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "List down Triton's superpowers."
    },
    {
        "question_id": 948,
        "db_id": "superhero",
        "question": "Identify the weakest attribute of the Triton. weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Triton' ORDER BY T2.attribute_value ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the weakest attribute of the Triton."
    },
    {
        "question_id": 949,
        "db_id": "superhero",
        "question": "What is Triton's eye colour? Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "What is Triton's eye colour?"
    },
    {
        "question_id": 950,
        "db_id": "superhero",
        "question": "Provide the full name of the superhero named Triton.",
        "evidence": "",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "Provide the full name of the superhero named Triton."
    },
    {
        "question_id": 951,
        "db_id": "superhero",
        "question": "List the attribute value of the superhero named Triton.",
        "evidence": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "List the attribute value of the superhero named Triton."
    },
    {
        "question_id": 952,
        "db_id": "superhero",
        "question": "Give the eye colour of Triton. eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Triton'",
        "difficulty": "simple",
        "raw_question": "Give the eye colour of Triton."
    },
    {
        "question_id": 953,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named truncation? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'truncation'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named truncation?"
    },
    {
        "question_id": 954,
        "db_id": "codebase_community",
        "question": "Please list the titles of the posts owned by the user Anthony? \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "Please list the titles of the posts owned by the user Anthony?"
    },
    {
        "question_id": 955,
        "db_id": "codebase_community",
        "question": "What is the title of the post that is owned by Anthony and has the highest popularity? \"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Anthony' ORDER BY T1.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the title of the post that is owned by Anthony and has the highest popularity?"
    },
    {
        "question_id": 956,
        "db_id": "codebase_community",
        "question": "Please list the names of the badges obtained by Anthony. \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the badges obtained by Anthony."
    },
    {
        "question_id": 957,
        "db_id": "codebase_community",
        "question": "For the user whose display name is \"Anthony\", what is his/her badge's name? \"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "For the user whose display name is \"Anthony\", what is his/her badge's name?"
    },
    {
        "question_id": 958,
        "db_id": "codebase_community",
        "question": "What is the badge name that user 'Anthony' obtained? \"SilentGhost\" is the DisplayName of user;",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "What is the badge name that user 'Anthony' obtained?"
    },
    {
        "question_id": 959,
        "db_id": "codebase_community",
        "question": "Write all comments made by user 'Anthony.' \"A Lion\" is the DisplayName of user; comment refers to Text",
        "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
        "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "Write all comments made by user 'Anthony.'"
    },
    {
        "question_id": 960,
        "db_id": "codebase_community",
        "question": "List the title of posts which were edited by Anthony. \"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "List the title of posts which were edited by Anthony."
    },
    {
        "question_id": 961,
        "db_id": "codebase_community",
        "question": "What is the total score of the posts edited by Anthony and include the user's website URL. \"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
        "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
        "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Anthony' GROUP BY T2.WebsiteUrl",
        "difficulty": "simple",
        "raw_question": "What is the total score of the posts edited by Anthony and include the user's website URL."
    },
    {
        "question_id": 962,
        "db_id": "codebase_community",
        "question": "What is the name of badge that the user whose display name is \"Anthony\" obtained?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "What is the name of badge that the user whose display name is \"Anthony\" obtained?"
    },
    {
        "question_id": 963,
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"Anthony\" obtained. \"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "State the name of badge that the user whose display name is \"Anthony\" obtained."
    },
    {
        "question_id": 964,
        "db_id": "codebase_community",
        "question": "What is the name of tags used by Anthony's? DisplayName = 'John Salvatier';",
        "evidence": "DisplayName = 'John Salvatier';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "What is the name of tags used by Anthony's?"
    },
    {
        "question_id": 965,
        "db_id": "codebase_community",
        "question": "Which post by Anthony has the most answers count? State the post ID. most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Anthony' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Anthony has the most answers count? State the post ID."
    },
    {
        "question_id": 966,
        "db_id": "codebase_community",
        "question": "Among posts by Anthony and Noah Snyder, which one has higher popularity? Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Anthony' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among posts by Anthony and Noah Snyder, which one has higher popularity?"
    },
    {
        "question_id": 967,
        "db_id": "codebase_community",
        "question": "Which post by Anthony has the most views? Please give the id and title of this post. DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Anthony' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Anthony has the most views? Please give the id and title of this post."
    },
    {
        "question_id": 968,
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name Anthony. the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Anthony' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the latest badge awarded to the user with the display name Anthony."
    },
    {
        "question_id": 969,
        "db_id": "codebase_community",
        "question": "How long did it take the user, known by his or her display name 'Anthony' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "How long did it take the user, known by his or her display name 'Anthony' to get the badge? Count from the date the user's account was created."
    },
    {
        "question_id": 970,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Anthony'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'Anthony'?"
    },
    {
        "question_id": 971,
        "db_id": "codebase_community",
        "question": "When did the user known as 'Anthony' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'Anthony' create his or her account?"
    },
    {
        "question_id": 972,
        "db_id": "codebase_community",
        "question": "List the comments commented by the user with a username of Anthony. comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
        "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
        "difficulty": "simple",
        "raw_question": "List the comments commented by the user with a username of Anthony."
    },
    {
        "question_id": 973,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Autobiographer.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Autobiographer.'"
    },
    {
        "question_id": 974,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Autobiographer Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Autobiographer Badges."
    },
    {
        "question_id": 975,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Autobiographer badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Autobiographer badge."
    },
    {
        "question_id": 976,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Autobiographer badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Autobiographer badge?"
    },
    {
        "question_id": 977,
        "db_id": "student_club",
        "question": "With the biggest budget for the \"Parking\", what was the remaining of it? remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
        "SQL": "SELECT remaining FROM budget WHERE category = 'Parking' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Parking' )",
        "difficulty": "simple",
        "raw_question": "With the biggest budget for the \"Parking\", what was the remaining of it?"
    },
    {
        "question_id": 978,
        "db_id": "student_club",
        "question": "Name the event with the highest amount spent on Parking. Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
        "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Parking' ORDER BY T1.spent DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Name the event with the highest amount spent on Parking."
    },
    {
        "question_id": 979,
        "db_id": "student_club",
        "question": "List the name of events with less than average Parking cost. name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "difficulty": "simple",
        "raw_question": "List the name of events with less than average Parking cost."
    },
    {
        "question_id": 980,
        "db_id": "student_club",
        "question": "List the event names which were budgeted for the Parking. budgeted for food refers to category = 'Food'",
        "evidence": "budgeted for food refers to category = 'Food'",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Parking'",
        "difficulty": "simple",
        "raw_question": "List the event names which were budgeted for the Parking."
    },
    {
        "question_id": 981,
        "db_id": "student_club",
        "question": "Calculate the total amount spent on Parking and list the name of the event they were spent on. total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
        "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Parking' GROUP BY T2.event_name",
        "difficulty": "simple",
        "raw_question": "Calculate the total amount spent on Parking and list the name of the event they were spent on."
    },
    {
        "question_id": 982,
        "db_id": "car_1",
        "question": "For model plymouth, how many cylinders does the car with the least accelerate have?",
        "evidence": "",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'plymouth' ORDER BY T1.accelerate ASC LIMIT 1;",
        "difficulty": "simple",
        "raw_question": "For model plymouth, how many cylinders does the car with the least accelerate have?"
    },
    {
        "question_id": 983,
        "db_id": "car_1",
        "question": "For a plymouth model, how many cylinders does the version with least accelerate have?",
        "evidence": "",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'plymouth' ORDER BY T1.accelerate ASC LIMIT 1;",
        "difficulty": "simple",
        "raw_question": "For a plymouth model, how many cylinders does the version with least accelerate have?"
    },
    {
        "question_id": 984,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Chippy. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Chippy'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Chippy."
    },
    {
        "question_id": 985,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Chippy cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Chippy'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Chippy cost in total?"
    },
    {
        "question_id": 986,
        "db_id": "card_games",
        "question": "Is there any card from Chippy artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Chippy' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Chippy artist in pauper format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 987,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Chippy created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Chippy'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Chippy created?"
    },
    {
        "question_id": 988,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Chippy? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Chippy' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Chippy? List them in descending order of dates."
    },
    {
        "question_id": 989,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Chippy worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Chippy'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Chippy worked on and find any banned cards if there are any."
    },
    {
        "question_id": 990,
        "db_id": "card_games",
        "question": "How many cards have frame effect as devoid? List out the id of those cards. \nframe effect as extendedart refers to frameEffects = 'extendedart'",
        "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
        "SQL": "SELECT id FROM cards WHERE frameEffects = 'devoid' GROUP BY id",
        "difficulty": "simple",
        "raw_question": "How many cards have frame effect as devoid? List out the id of those cards."
    },
    {
        "question_id": 991,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Menace?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Menace'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Menace?"
    },
    {
        "question_id": 992,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Discombobulate'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Discombobulate'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Discombobulate'?"
    },
    {
        "question_id": 993,
        "db_id": "card_games",
        "question": "What is the status of card \"Discombobulate\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Discombobulate'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Discombobulate\"?"
    },
    {
        "question_id": 994,
        "db_id": "card_games",
        "question": "What is the type of card \"Discombobulate\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Discombobulate'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Discombobulate\"?"
    },
    {
        "question_id": 995,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Discombobulate\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Discombobulate'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Discombobulate\"?"
    },
    {
        "question_id": 996,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Discombobulate\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Discombobulate'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Discombobulate\"?"
    },
    {
        "question_id": 997,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Discombobulate\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Discombobulate'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Discombobulate\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 998,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Discombobulate\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Discombobulate'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Discombobulate\" in it?"
    },
    {
        "question_id": 999,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Discombobulate\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Discombobulate' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Discombobulate\" is in?"
    },
    {
        "question_id": 1000,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Discombobulate\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Discombobulate' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Discombobulate\" is in it."
    },
    {
        "question_id": 1001,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Sorcery and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Sorcery and the date of rulings for these cards."
    },
    {
        "question_id": 1002,
        "db_id": "card_games",
        "question": "Among the Sorcery cards, which are black color and comes with foreign languague translation? Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery' AND T1.colors = 'B'",
        "difficulty": "simple",
        "raw_question": "Among the Sorcery cards, which are black color and comes with foreign languague translation?"
    },
    {
        "question_id": 1003,
        "db_id": "formula_1",
        "question": "Please list the year during which the race is held on circuits in Indianapolis. Shanghai is a name of location;",
        "evidence": "Shanghai is a name of location;",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Indianapolis'",
        "difficulty": "simple",
        "raw_question": "Please list the year during which the race is held on circuits in Indianapolis."
    },
    {
        "question_id": 1004,
        "db_id": "advertising_agencies",
        "question": "Show agency details for client with detail 'Eloise'.",
        "evidence": "",
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Eloise'",
        "difficulty": "simple",
        "raw_question": "Show agency details for client with detail 'Eloise'."
    },
    {
        "question_id": 1005,
        "db_id": "advertising_agencies",
        "question": "What are the agency details for clients with the detail Eloise?",
        "evidence": "",
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Eloise'",
        "difficulty": "simple",
        "raw_question": "What are the agency details for clients with the detail Eloise?"
    },
    {
        "question_id": 1006,
        "db_id": "formula_1",
        "question": "Please list the positions of the circuits built by the constructor Footwork. Renault is a name of constructor;",
        "evidence": "Renault is a name of constructor;",
        "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Footwork'",
        "difficulty": "simple",
        "raw_question": "Please list the positions of the circuits built by the constructor Footwork."
    },
    {
        "question_id": 1007,
        "db_id": "european_football_2",
        "question": "What is the name of the football league in the country of Scotland? name of the football league refers to League.name;",
        "evidence": "name of the football league refers to League.name;",
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Scotland'",
        "difficulty": "simple",
        "raw_question": "What is the name of the football league in the country of Scotland?"
    },
    {
        "question_id": 1008,
        "db_id": "european_football_2",
        "question": "Please list the leagues from Scotland. Germany refers to Country.name = 'Germany';",
        "evidence": "Germany refers to Country.name = 'Germany';",
        "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Scotland'",
        "difficulty": "simple",
        "raw_question": "Please list the leagues from Scotland."
    },
    {
        "question_id": 1009,
        "db_id": "european_football_2",
        "question": "State the name of players who came from Scotland. name of players refers to player_name; Belgium is name of country",
        "evidence": "name of players refers to player_name; Belgium is name of country",
        "SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Scotland'",
        "difficulty": "simple",
        "raw_question": "State the name of players who came from Scotland."
    },
    {
        "question_id": 1010,
        "db_id": "world_1",
        "question": "Return the different names of cities that are in Asia and for which Azerbaijani is the official language.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Azerbaijani' AND T1.Continent  =  \"Asia\"",
        "difficulty": "simple",
        "raw_question": "Return the different names of cities that are in Asia and for which Azerbaijani is the official language."
    },
    {
        "question_id": 1011,
        "db_id": "card_games",
        "question": "Name all the cards which have alternative language in Hebrew. Japanese' is the language;",
        "evidence": "Japanese' is the language;",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Hebrew'",
        "difficulty": "simple",
        "raw_question": "Name all the cards which have alternative language in Hebrew."
    },
    {
        "question_id": 1012,
        "db_id": "card_games",
        "question": "Please provide the names of the artists who illustrated the card art in Hebrew. Phyrexian' is the language; name of artists refers to artist;",
        "evidence": "Phyrexian' is the language; name of artists refers to artist;",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Hebrew'",
        "difficulty": "simple",
        "raw_question": "Please provide the names of the artists who illustrated the card art in Hebrew."
    },
    {
        "question_id": 1013,
        "db_id": "card_games",
        "question": "List down the name of artists for cards in Hebrew. Chinese Simplified' is the language;",
        "evidence": "Chinese Simplified' is the language;",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Hebrew'",
        "difficulty": "simple",
        "raw_question": "List down the name of artists for cards in Hebrew."
    },
    {
        "question_id": 1014,
        "db_id": "card_games",
        "question": "What are the cards that only available in paper and Hebrew language? available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Hebrew'",
        "difficulty": "simple",
        "raw_question": "What are the cards that only available in paper and Hebrew language?"
    },
    {
        "question_id": 1015,
        "db_id": "card_games",
        "question": "Calculate the percentage of cards in Hebrew. List them by name. Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
        "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Hebrew' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Hebrew'",
        "difficulty": "simple",
        "raw_question": "Calculate the percentage of cards in Hebrew. List them by name."
    },
    {
        "question_id": 1016,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Solfatara\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Solfatara'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Solfatara\"?"
    },
    {
        "question_id": 1017,
        "db_id": "card_games",
        "question": "List all the mythic rarity print cards banned in premodern format. mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'premodern' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "difficulty": "simple",
        "raw_question": "List all the mythic rarity print cards banned in premodern format."
    },
    {
        "question_id": 1018,
        "db_id": "card_games",
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for premodern play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'premodern' AND T1.side IS NULL",
        "difficulty": "simple",
        "raw_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for premodern play format."
    },
    {
        "question_id": 1019,
        "db_id": "card_games",
        "question": "List down the uuid for premodern cards and the foreign language of these cards. legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern'",
        "difficulty": "simple",
        "raw_question": "List down the uuid for premodern cards and the foreign language of these cards."
    },
    {
        "question_id": 1020,
        "db_id": "card_games",
        "question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in premodern play format that has sensitive content or Wizards of the Coast? version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status",
        "evidence": "version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'premodern'",
        "difficulty": "simple",
        "raw_question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in premodern play format that has sensitive content or Wizards of the Coast?"
    },
    {
        "question_id": 1021,
        "db_id": "wta_1",
        "question": "What are the country code and first name of the players who won in both tourney Kaohsiung and Australian Open?",
        "evidence": "",
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Kaohsiung' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "difficulty": "simple",
        "raw_question": "What are the country code and first name of the players who won in both tourney Kaohsiung and Australian Open?"
    },
    {
        "question_id": 1022,
        "db_id": "wta_1",
        "question": "What are the first names and country codes for players who won both the Kaohsiung and the Australian Open?",
        "evidence": "",
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Kaohsiung' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "difficulty": "simple",
        "raw_question": "What are the first names and country codes for players who won both the Kaohsiung and the Australian Open?"
    },
    {
        "question_id": 1023,
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Kaohsiung tourney.",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Kaohsiung' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Find the name of the winner who has the highest rank points and participated in the Kaohsiung tourney."
    },
    {
        "question_id": 1024,
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the Kaohsiung tournament?",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Kaohsiung' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the name of the winner with the most rank points who participated in the Kaohsiung tournament?"
    },
    {
        "question_id": 1025,
        "db_id": "student_club",
        "question": "What is the amount of the funds that the Inactive received? 'Vice President' is a position of Student Club; funds received refers to amount.",
        "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Inactive'",
        "difficulty": "simple",
        "raw_question": "What is the amount of the funds that the Inactive received?"
    },
    {
        "question_id": 1026,
        "db_id": "student_club",
        "question": "State the major name for the Inactive of the club. 'Vice President' is a position of Student Club",
        "evidence": "'Vice President' is a position of Student Club",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Inactive'",
        "difficulty": "simple",
        "raw_question": "State the major name for the Inactive of the club."
    },
    {
        "question_id": 1027,
        "db_id": "student_club",
        "question": "Provide the full name and email address of the Student_Club's Inactive. full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Inactive'",
        "difficulty": "simple",
        "raw_question": "Provide the full name and email address of the Student_Club's Inactive."
    },
    {
        "question_id": 1028,
        "db_id": "student_club",
        "question": "State the name of major that Inactive has joined. name of major refers to major_name; 'Vice President' is position of Student Club",
        "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Inactive'",
        "difficulty": "simple",
        "raw_question": "State the name of major that Inactive has joined."
    },
    {
        "question_id": 1029,
        "db_id": "student_club",
        "question": "What is the name of the social event that was attended by the Inactive of the Student_Club located at 900 E. Washington St.? name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
        "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Inactive' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
        "difficulty": "simple",
        "raw_question": "What is the name of the social event that was attended by the Inactive of the Student_Club located at 900 E. Washington St.?"
    },
    {
        "question_id": 1030,
        "db_id": "student_club",
        "question": "Write the full name of the club member with the position of 'Inactive' and list which college the club member belongs to. full name refers to first_name, last name",
        "evidence": "full name refers to first_name, last name",
        "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Inactive'",
        "difficulty": "simple",
        "raw_question": "Write the full name of the club member with the position of 'Inactive' and list which college the club member belongs to."
    },
    {
        "question_id": 1031,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show paragraph details for paragraph with text 'Jersey ' .",
        "evidence": "",
        "SQL": "select other_details from paragraphs where paragraph_text like 'Jersey'",
        "difficulty": "simple",
        "raw_question": "Show paragraph details for paragraph with text 'Jersey ' ."
    },
    {
        "question_id": 1032,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the details for the paragraph that includes the text 'Jersey ' ?",
        "evidence": "",
        "SQL": "select other_details from paragraphs where paragraph_text like 'Jersey'",
        "difficulty": "simple",
        "raw_question": "What are the details for the paragraph that includes the text 'Jersey ' ?"
    },
    {
        "question_id": 1033,
        "db_id": "sing_contest",
        "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
        "evidence": "",
        "SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
        "difficulty": "simple",
        "raw_question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?"
    },
    {
        "question_id": 1034,
        "db_id": "european_football_2",
        "question": "What is the attacking work rate of the football playerr Joaquin?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "difficulty": "simple",
        "raw_question": "What is the attacking work rate of the football playerr Joaquin?"
    },
    {
        "question_id": 1035,
        "db_id": "european_football_2",
        "question": "What is the football player Joaquin header's finishing rate on 18/09/2014? header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "difficulty": "simple",
        "raw_question": "What is the football player Joaquin header's finishing rate on 18/09/2014?"
    },
    {
        "question_id": 1036,
        "db_id": "european_football_2",
        "question": "What is the overall rating of the football player Joaquin in year 2011? in year 2011 refers to strftime('%Y', date) = '2011';",
        "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin' AND strftime('%Y', t2.date) = '2011'",
        "difficulty": "simple",
        "raw_question": "What is the overall rating of the football player Joaquin in year 2011?"
    },
    {
        "question_id": 1037,
        "db_id": "european_football_2",
        "question": "What is the defensive work rate of the football player Joaquin\n?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "difficulty": "simple",
        "raw_question": "What is the defensive work rate of the football player Joaquin\n?"
    },
    {
        "question_id": 1038,
        "db_id": "european_football_2",
        "question": "What is Joaquin's potential score? potential score refers to potential;",
        "evidence": "potential score refers to potential;",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "difficulty": "simple",
        "raw_question": "What is Joaquin's potential score?"
    },
    {
        "question_id": 1039,
        "db_id": "european_football_2",
        "question": "What's the heading accuracy of Joaquin?",
        "evidence": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "difficulty": "simple",
        "raw_question": "What's the heading accuracy of Joaquin?"
    },
    {
        "question_id": 1040,
        "db_id": "european_football_2",
        "question": "Which foot is preferred by Joaquin? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
        "difficulty": "simple",
        "raw_question": "Which foot is preferred by Joaquin?"
    },
    {
        "question_id": 1041,
        "db_id": "european_football_2",
        "question": "What was the potiential for Joaquin on 2010/8/30? Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Joaquin'",
        "difficulty": "simple",
        "raw_question": "What was the potiential for Joaquin on 2010/8/30?"
    },
    {
        "question_id": 1042,
        "db_id": "european_football_2",
        "question": "When was the first time did Joaquin have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Joaquin' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the first time did Joaquin have his highest crossing score? Give the date."
    },
    {
        "question_id": 1043,
        "db_id": "codebase_community",
        "question": "Identify the total views on the post 'AutoCorrelation'. Name the user who posted it last time. total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'AutoCorrelation'",
        "difficulty": "simple",
        "raw_question": "Identify the total views on the post 'AutoCorrelation'. Name the user who posted it last time."
    },
    {
        "question_id": 1044,
        "db_id": "superhero",
        "question": "Rank heroes published by Rebellion by their height in descending order. name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Rebellion'",
        "difficulty": "simple",
        "raw_question": "Rank heroes published by Rebellion by their height in descending order."
    },
    {
        "question_id": 1045,
        "db_id": "superhero",
        "question": "Rank superheroes from Rebellion by their eye color popularity, starting with the most common color. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Rebellion' GROUP BY colour.colour",
        "difficulty": "simple",
        "raw_question": "Rank superheroes from Rebellion by their eye color popularity, starting with the most common color."
    },
    {
        "question_id": 1046,
        "db_id": "superhero",
        "question": "Give the publisher ID of Rebellion. Star Trek is the publisher_name;",
        "evidence": "Star Trek is the publisher_name;",
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Rebellion'",
        "difficulty": "simple",
        "raw_question": "Give the publisher ID of Rebellion."
    },
    {
        "question_id": 1047,
        "db_id": "superhero",
        "question": "Which superhero has the most durability published by Rebellion? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Rebellion' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which superhero has the most durability published by Rebellion?"
    },
    {
        "question_id": 1048,
        "db_id": "superhero",
        "question": "Identify the heaviest superhero in Rebellion. heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Rebellion' ORDER BY T1.weight_kg DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the heaviest superhero in Rebellion."
    },
    {
        "question_id": 1049,
        "db_id": "superhero",
        "question": "Give the name of the Atlantean superheroes. alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Atlantean'",
        "difficulty": "simple",
        "raw_question": "Give the name of the Atlantean superheroes."
    },
    {
        "question_id": 1050,
        "db_id": "superhero",
        "question": "List down at least five full name of Atlantean superheroes. Demi-God superheroes refers to race = 'Demi-God'",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Atlantean'",
        "difficulty": "simple",
        "raw_question": "List down at least five full name of Atlantean superheroes."
    },
    {
        "question_id": 1051,
        "db_id": "superhero",
        "question": "Provide the hair colour of the Atlantean superhero who is 185 cm tall. 185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
        "SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Atlantean'",
        "difficulty": "simple",
        "raw_question": "Provide the hair colour of the Atlantean superhero who is 185 cm tall."
    },
    {
        "question_id": 1052,
        "db_id": "superhero",
        "question": "Provide the full names of Atlantean heroes. vampire heroes refers to race = 'Vampire';",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Atlantean'",
        "difficulty": "simple",
        "raw_question": "Provide the full names of Atlantean heroes."
    },
    {
        "question_id": 1053,
        "db_id": "california_schools",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Carolyn. List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Carolyn'",
        "difficulty": "simple",
        "raw_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Carolyn. List the district code of the school."
    },
    {
        "question_id": 1054,
        "db_id": "card_games",
        "question": "Among the sets whose expansion type is memorabilia, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set. expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
        "SQL": "SELECT id FROM sets WHERE type = 'memorabilia' ORDER BY totalSetSize DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among the sets whose expansion type is memorabilia, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set."
    },
    {
        "question_id": 1055,
        "db_id": "superhero",
        "question": "What is the eyes colour of Abraxas? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraxas'",
        "difficulty": "simple",
        "raw_question": "What is the eyes colour of Abraxas?"
    },
    {
        "question_id": 1056,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Abraxas. hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Abraxas'",
        "difficulty": "simple",
        "raw_question": "Provide the hero name and race of Abraxas."
    },
    {
        "question_id": 1057,
        "db_id": "superhero",
        "question": "List the powers of Abraxas. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Abraxas'",
        "difficulty": "simple",
        "raw_question": "List the powers of Abraxas."
    },
    {
        "question_id": 1058,
        "db_id": "superhero",
        "question": "Provide the eye colour of the superhero who has Abraxas as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraxas'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colour of the superhero who has Abraxas as their full name."
    },
    {
        "question_id": 1059,
        "db_id": "superhero",
        "question": "What is the superpowers of the superhero has Abraxas as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Abraxas'",
        "difficulty": "simple",
        "raw_question": "What is the superpowers of the superhero has Abraxas as their full name?"
    },
    {
        "question_id": 1060,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Abraxas. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Abraxas'",
        "difficulty": "simple",
        "raw_question": "Name the superhero, otherwise known as Abraxas."
    },
    {
        "question_id": 1061,
        "db_id": "superhero",
        "question": "Please list all the superpowers of Banshee. 3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "Please list all the superpowers of Banshee."
    },
    {
        "question_id": 1062,
        "db_id": "superhero",
        "question": "What is the colour of Banshee's skin? Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "What is the colour of Banshee's skin?"
    },
    {
        "question_id": 1063,
        "db_id": "superhero",
        "question": "Who is the publisher of Banshee? the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "Who is the publisher of Banshee?"
    },
    {
        "question_id": 1064,
        "db_id": "superhero",
        "question": "What is the publisher's name of Banshee? Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "What is the publisher's name of Banshee?"
    },
    {
        "question_id": 1065,
        "db_id": "superhero",
        "question": "What is Banshee's race? Copycat is the superhero_name;",
        "evidence": "Copycat is the superhero_name;",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "What is Banshee's race?"
    },
    {
        "question_id": 1066,
        "db_id": "superhero",
        "question": "Provide the superpowers of the superhero called Banshee. superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "Provide the superpowers of the superhero called Banshee."
    },
    {
        "question_id": 1067,
        "db_id": "superhero",
        "question": "Indicate the attribute value of superhero Banshee. Abomination refers to superhero_name = 'Abomination';",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "Indicate the attribute value of superhero Banshee."
    },
    {
        "question_id": 1068,
        "db_id": "superhero",
        "question": "Which group does superhero Banshee belong to? group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "Which group does superhero Banshee belong to?"
    },
    {
        "question_id": 1069,
        "db_id": "superhero",
        "question": "What is the gender of Banshee hero? Agent 13 hero refers to superhero_name = 'Agent 13';",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "What is the gender of Banshee hero?"
    },
    {
        "question_id": 1070,
        "db_id": "superhero",
        "question": "What are the race and alignment of Banshee? Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "What are the race and alignment of Banshee?"
    },
    {
        "question_id": 1071,
        "db_id": "superhero",
        "question": "What is Banshee's superpower? Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "What is Banshee's superpower?"
    },
    {
        "question_id": 1072,
        "db_id": "superhero",
        "question": "State all of Banshee's attributes along with their values. 3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "State all of Banshee's attributes along with their values."
    },
    {
        "question_id": 1073,
        "db_id": "superhero",
        "question": "Give the alignment and superpowers of the superhero named Banshee. superpowers refers to power_name;",
        "evidence": "superpowers refers to power_name;",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "Give the alignment and superpowers of the superhero named Banshee."
    },
    {
        "question_id": 1074,
        "db_id": "superhero",
        "question": "List down Banshee's superpowers. Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "List down Banshee's superpowers."
    },
    {
        "question_id": 1075,
        "db_id": "superhero",
        "question": "Identify the weakest attribute of the Banshee. weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Banshee' ORDER BY T2.attribute_value ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the weakest attribute of the Banshee."
    },
    {
        "question_id": 1076,
        "db_id": "superhero",
        "question": "What is Banshee's eye colour? Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "What is Banshee's eye colour?"
    },
    {
        "question_id": 1077,
        "db_id": "superhero",
        "question": "Provide the full name of the superhero named Banshee.",
        "evidence": "",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "Provide the full name of the superhero named Banshee."
    },
    {
        "question_id": 1078,
        "db_id": "superhero",
        "question": "List the attribute value of the superhero named Banshee.",
        "evidence": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "List the attribute value of the superhero named Banshee."
    },
    {
        "question_id": 1079,
        "db_id": "superhero",
        "question": "Give the eye colour of Banshee. eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Banshee'",
        "difficulty": "simple",
        "raw_question": "Give the eye colour of Banshee."
    },
    {
        "question_id": 1080,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Telepathy'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Telepathy'."
    },
    {
        "question_id": 1081,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Telepathy? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Telepathy?"
    },
    {
        "question_id": 1082,
        "db_id": "superhero",
        "question": "List the name of superheroes with Telepathy power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Telepathy power."
    },
    {
        "question_id": 1083,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Telepathy power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Telepathy power."
    },
    {
        "question_id": 1084,
        "db_id": "superhero",
        "question": "What is the power ID of Telepathy? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Telepathy'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Telepathy?"
    },
    {
        "question_id": 1085,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Telepathy. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Telepathy'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Telepathy."
    },
    {
        "question_id": 1086,
        "db_id": "european_football_2",
        "question": "What is the short name of the football team Sunderland? short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Sunderland'",
        "difficulty": "simple",
        "raw_question": "What is the short name of the football team Sunderland?"
    },
    {
        "question_id": 1087,
        "db_id": "european_football_2",
        "question": "What is the Sunderland team freedom of movement in the 1st two thirds of the pitch? ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'Sunderland'",
        "difficulty": "simple",
        "raw_question": "What is the Sunderland team freedom of movement in the 1st two thirds of the pitch?"
    },
    {
        "question_id": 1088,
        "db_id": "european_football_2",
        "question": "What is Sunderland's highest chance creation passing score and what is it classified as? Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is Sunderland's highest chance creation passing score and what is it classified as?"
    },
    {
        "question_id": 1089,
        "db_id": "european_football_2",
        "question": "What was the build up play speed class for \"Sunderland\" on 2011/2/22? \"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the build up play speed class for \"Sunderland\" on 2011/2/22?"
    },
    {
        "question_id": 1090,
        "db_id": "european_football_2",
        "question": "State the chance creation passing class for \"Sunderland\" on 2013/9/20. \"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "difficulty": "simple",
        "raw_question": "State the chance creation passing class for \"Sunderland\" on 2013/9/20."
    },
    {
        "question_id": 1091,
        "db_id": "european_football_2",
        "question": "What was the chance creation crossing class for \"Sunderland\" on 2010/2/22? \"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the chance creation crossing class for \"Sunderland\" on 2010/2/22?"
    },
    {
        "question_id": 1092,
        "db_id": "european_football_2",
        "question": "Does the Sunderland team have a slow, balanced or fast speed class? KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'Sunderland'",
        "difficulty": "simple",
        "raw_question": "Does the Sunderland team have a slow, balanced or fast speed class?"
    },
    {
        "question_id": 1093,
        "db_id": "codebase_community",
        "question": "Please list the titles of the posts owned by the user Kurtosis? \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "Please list the titles of the posts owned by the user Kurtosis?"
    },
    {
        "question_id": 1094,
        "db_id": "codebase_community",
        "question": "What is the title of the post that is owned by Kurtosis and has the highest popularity? \"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Kurtosis' ORDER BY T1.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the title of the post that is owned by Kurtosis and has the highest popularity?"
    },
    {
        "question_id": 1095,
        "db_id": "codebase_community",
        "question": "Please list the names of the badges obtained by Kurtosis. \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the badges obtained by Kurtosis."
    },
    {
        "question_id": 1096,
        "db_id": "codebase_community",
        "question": "For the user whose display name is \"Kurtosis\", what is his/her badge's name? \"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "For the user whose display name is \"Kurtosis\", what is his/her badge's name?"
    },
    {
        "question_id": 1097,
        "db_id": "codebase_community",
        "question": "What is the badge name that user 'Kurtosis' obtained? \"SilentGhost\" is the DisplayName of user;",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "What is the badge name that user 'Kurtosis' obtained?"
    },
    {
        "question_id": 1098,
        "db_id": "codebase_community",
        "question": "List the title of posts which were edited by Kurtosis. \"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "List the title of posts which were edited by Kurtosis."
    },
    {
        "question_id": 1099,
        "db_id": "codebase_community",
        "question": "What is the name of badge that the user whose display name is \"Kurtosis\" obtained?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "What is the name of badge that the user whose display name is \"Kurtosis\" obtained?"
    },
    {
        "question_id": 1100,
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"Kurtosis\" obtained. \"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "State the name of badge that the user whose display name is \"Kurtosis\" obtained."
    },
    {
        "question_id": 1101,
        "db_id": "codebase_community",
        "question": "What is the name of tags used by Kurtosis's? DisplayName = 'John Salvatier';",
        "evidence": "DisplayName = 'John Salvatier';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "What is the name of tags used by Kurtosis's?"
    },
    {
        "question_id": 1102,
        "db_id": "codebase_community",
        "question": "Which post by Kurtosis has the most answers count? State the post ID. most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Kurtosis' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Kurtosis has the most answers count? State the post ID."
    },
    {
        "question_id": 1103,
        "db_id": "codebase_community",
        "question": "Among posts by Kurtosis and Noah Snyder, which one has higher popularity? Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Kurtosis' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among posts by Kurtosis and Noah Snyder, which one has higher popularity?"
    },
    {
        "question_id": 1104,
        "db_id": "codebase_community",
        "question": "When did 'Kurtosis' cast its first vote in a post? DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
        "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
        "SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis' ORDER BY T2.CreationDate LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When did 'Kurtosis' cast its first vote in a post?"
    },
    {
        "question_id": 1105,
        "db_id": "codebase_community",
        "question": "Which post by Kurtosis has the most views? Please give the id and title of this post. DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Kurtosis' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Kurtosis has the most views? Please give the id and title of this post."
    },
    {
        "question_id": 1106,
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name Kurtosis. the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Kurtosis' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the latest badge awarded to the user with the display name Kurtosis."
    },
    {
        "question_id": 1107,
        "db_id": "codebase_community",
        "question": "How long did it take the user, known by his or her display name 'Kurtosis' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "How long did it take the user, known by his or her display name 'Kurtosis' to get the badge? Count from the date the user's account was created."
    },
    {
        "question_id": 1108,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Kurtosis'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'Kurtosis'?"
    },
    {
        "question_id": 1109,
        "db_id": "codebase_community",
        "question": "When did the user known as 'Kurtosis' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Kurtosis'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'Kurtosis' create his or her account?"
    },
    {
        "question_id": 1110,
        "db_id": "real_estate_rentals",
        "question": "In which country does the user with first name Theresa live?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Theresa';",
        "difficulty": "simple",
        "raw_question": "In which country does the user with first name Theresa live?"
    },
    {
        "question_id": 1111,
        "db_id": "real_estate_rentals",
        "question": "Return the country in which the user with first name Theresa lives.",
        "evidence": "",
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Theresa';",
        "difficulty": "simple",
        "raw_question": "Return the country in which the user with first name Theresa lives."
    },
    {
        "question_id": 1112,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code of the address in the city Port Evanston?",
        "evidence": "",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Evanston'",
        "difficulty": "simple",
        "raw_question": "What is the zip code of the address in the city Port Evanston?"
    },
    {
        "question_id": 1113,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code for Port Evanston?",
        "evidence": "",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Evanston'",
        "difficulty": "simple",
        "raw_question": "What is the zip code for Port Evanston?"
    },
    {
        "question_id": 1114,
        "db_id": "battle_death",
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "evidence": "",
        "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "difficulty": "simple",
        "raw_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?"
    },
    {
        "question_id": 1115,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Adam Rex. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Adam Rex'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Adam Rex."
    },
    {
        "question_id": 1116,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Adam Rex cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Adam Rex'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Adam Rex cost in total?"
    },
    {
        "question_id": 1117,
        "db_id": "card_games",
        "question": "Is there any card from Adam Rex artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Adam Rex' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Adam Rex artist in pauper format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 1118,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Adam Rex created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Adam Rex'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Adam Rex created?"
    },
    {
        "question_id": 1119,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Adam Rex? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Adam Rex' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Adam Rex? List them in descending order of dates."
    },
    {
        "question_id": 1120,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Adam Rex worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Adam Rex'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Adam Rex worked on and find any banned cards if there are any."
    },
    {
        "question_id": 1121,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Hypnotic Specter'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Hypnotic Specter'?"
    },
    {
        "question_id": 1122,
        "db_id": "card_games",
        "question": "What type of promotion is of card 'Hypnotic Specter'? card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "SQL": "SELECT promoTypes FROM cards WHERE name = 'Hypnotic Specter' AND promoTypes IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What type of promotion is of card 'Hypnotic Specter'?"
    },
    {
        "question_id": 1123,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Hypnotic Specter\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Hypnotic Specter\"?"
    },
    {
        "question_id": 1124,
        "db_id": "card_games",
        "question": "What is the status of card \"Hypnotic Specter\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Hypnotic Specter\"?"
    },
    {
        "question_id": 1125,
        "db_id": "card_games",
        "question": "What is the type of card \"Hypnotic Specter\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Hypnotic Specter\"?"
    },
    {
        "question_id": 1126,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Hypnotic Specter\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Hypnotic Specter\"?"
    },
    {
        "question_id": 1127,
        "db_id": "card_games",
        "question": "Write down the ruling of Hypnotic Specter. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Hypnotic Specter."
    },
    {
        "question_id": 1128,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Hypnotic Specter\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Hypnotic Specter\"?"
    },
    {
        "question_id": 1129,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Hypnotic Specter\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Hypnotic Specter\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1130,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Hypnotic Specter' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Hypnotic Specter' created?"
    },
    {
        "question_id": 1131,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Hypnotic Specter\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Hypnotic Specter'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Hypnotic Specter\" in it?"
    },
    {
        "question_id": 1132,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Hypnotic Specter\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Hypnotic Specter' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Hypnotic Specter\" is in?"
    },
    {
        "question_id": 1133,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Hypnotic Specter\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Hypnotic Specter' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Hypnotic Specter\" is in it."
    },
    {
        "question_id": 1134,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Enchant Wall and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Wall'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Enchant Wall and the date of rulings for these cards."
    },
    {
        "question_id": 1135,
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by Adam Beechen?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
        "difficulty": "simple",
        "raw_question": "which countries' tv channels are playing some cartoon written by Adam Beechen?"
    },
    {
        "question_id": 1136,
        "db_id": "tvshow",
        "question": "What are the countries that have cartoons on TV that were written by Adam Beechen?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
        "difficulty": "simple",
        "raw_question": "What are the countries that have cartoons on TV that were written by Adam Beechen?"
    },
    {
        "question_id": 1137,
        "db_id": "formula_1",
        "question": "Please list the year during which the race is held on circuits in Le Mans. Shanghai is a name of location;",
        "evidence": "Shanghai is a name of location;",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Le Mans'",
        "difficulty": "simple",
        "raw_question": "Please list the year during which the race is held on circuits in Le Mans."
    },
    {
        "question_id": 1138,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Brands Hatch be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Brands Hatch be found?"
    },
    {
        "question_id": 1139,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Brands Hatch? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Brands Hatch?"
    },
    {
        "question_id": 1140,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Brands Hatch.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Brands Hatch."
    },
    {
        "question_id": 1141,
        "db_id": "formula_1",
        "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix? the last refers to max(year);",
        "evidence": "the last refers to max(year);",
        "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?"
    },
    {
        "question_id": 1142,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Brands Hatch? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Brands Hatch'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Brands Hatch?"
    },
    {
        "question_id": 1143,
        "db_id": "formula_1",
        "question": "What's the reference name of Brands Hatch? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Brands Hatch'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Brands Hatch?"
    },
    {
        "question_id": 1144,
        "db_id": "formula_1",
        "question": "Please list all the years that Brands Hatch was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Brands Hatch was used in a Formula_1 race."
    },
    {
        "question_id": 1145,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Brands Hatch. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Brands Hatch."
    },
    {
        "question_id": 1146,
        "db_id": "formula_1",
        "question": "In which location does the Brands Hatch circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Brands Hatch'",
        "difficulty": "simple",
        "raw_question": "In which location does the Brands Hatch circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 1147,
        "db_id": "thrombosis_prediction",
        "question": "What is the most common sign of patients with Bleeding Colitis disease? the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Bleeding Colitis' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common sign of patients with Bleeding Colitis disease?"
    },
    {
        "question_id": 1148,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Guide gobelin\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Guide gobelin'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Guide gobelin\"?"
    },
    {
        "question_id": 1149,
        "db_id": "pilot_1",
        "question": "Where is the plane Piper Cub located?",
        "evidence": "",
        "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
        "difficulty": "simple",
        "raw_question": "Where is the plane Piper Cub located?"
    },
    {
        "question_id": 1150,
        "db_id": "pilot_1",
        "question": "Return the location of the hangar in which Piper Cub is located.",
        "evidence": "",
        "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
        "difficulty": "simple",
        "raw_question": "Return the location of the hangar in which Piper Cub is located."
    },
    {
        "question_id": 1151,
        "db_id": "wta_1",
        "question": "What are the country code and first name of the players who won in both tourney New Haven and Australian Open?",
        "evidence": "",
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'New Haven' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "difficulty": "simple",
        "raw_question": "What are the country code and first name of the players who won in both tourney New Haven and Australian Open?"
    },
    {
        "question_id": 1152,
        "db_id": "wta_1",
        "question": "What are the first names and country codes for players who won both the New Haven and the Australian Open?",
        "evidence": "",
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'New Haven' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "difficulty": "simple",
        "raw_question": "What are the first names and country codes for players who won both the New Haven and the Australian Open?"
    },
    {
        "question_id": 1153,
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the New Haven tourney.",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'New Haven' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Find the name of the winner who has the highest rank points and participated in the New Haven tourney."
    },
    {
        "question_id": 1154,
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the New Haven tournament?",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'New Haven' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the name of the winner with the most rank points who participated in the New Haven tournament?"
    },
    {
        "question_id": 1155,
        "db_id": "thrombosis_prediction",
        "question": "The oldest Adult STILL patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital? The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
        "SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Adult STILL' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "The oldest Adult STILL patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?"
    },
    {
        "question_id": 1156,
        "db_id": "thrombosis_prediction",
        "question": "What was the gender of the first Adult STILL diagnosed patient? gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
        "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'Adult STILL' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What was the gender of the first Adult STILL diagnosed patient?"
    },
    {
        "question_id": 1157,
        "db_id": "thrombosis_prediction",
        "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with Adult STILL. PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
        "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
        "SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Adult STILL' AND T2.PLT BETWEEN 100 AND 400",
        "difficulty": "simple",
        "raw_question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with Adult STILL."
    },
    {
        "question_id": 1158,
        "db_id": "pilot_1",
        "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
        "evidence": "",
        "SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
        "difficulty": "simple",
        "raw_question": "Find the names of all pilots who have a plane named Piper Cub and is under 35."
    },
    {
        "question_id": 1159,
        "db_id": "pilot_1",
        "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
        "evidence": "",
        "SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
        "difficulty": "simple",
        "raw_question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?"
    },
    {
        "question_id": 1160,
        "db_id": "pilot_1",
        "question": "Who is the youngest pilot to fly the plane Piper Cub?",
        "evidence": "",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Who is the youngest pilot to fly the plane Piper Cub?"
    },
    {
        "question_id": 1161,
        "db_id": "pilot_1",
        "question": "Return the name of the youngest pilot to fly Piper Cub.",
        "evidence": "",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Return the name of the youngest pilot to fly Piper Cub."
    },
    {
        "question_id": 1162,
        "db_id": "pilot_1",
        "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
        "evidence": "",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
        "difficulty": "simple",
        "raw_question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub."
    },
    {
        "question_id": 1163,
        "db_id": "pilot_1",
        "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
        "evidence": "",
        "SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
        "difficulty": "simple",
        "raw_question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically."
    },
    {
        "question_id": 1164,
        "db_id": "european_football_2",
        "question": "What is the attacking work rate of the football playerr Aaron Hunt?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
        "difficulty": "simple",
        "raw_question": "What is the attacking work rate of the football playerr Aaron Hunt?"
    },
    {
        "question_id": 1165,
        "db_id": "european_football_2",
        "question": "What is the football player Aaron Hunt header's finishing rate on 18/09/2014? header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "difficulty": "simple",
        "raw_question": "What is the football player Aaron Hunt header's finishing rate on 18/09/2014?"
    },
    {
        "question_id": 1166,
        "db_id": "european_football_2",
        "question": "What is the overall rating of the football player Aaron Hunt in year 2011? in year 2011 refers to strftime('%Y', date) = '2011';",
        "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt' AND strftime('%Y', t2.date) = '2011'",
        "difficulty": "simple",
        "raw_question": "What is the overall rating of the football player Aaron Hunt in year 2011?"
    },
    {
        "question_id": 1167,
        "db_id": "european_football_2",
        "question": "What is the defensive work rate of the football player Aaron Hunt\n?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
        "difficulty": "simple",
        "raw_question": "What is the defensive work rate of the football player Aaron Hunt\n?"
    },
    {
        "question_id": 1168,
        "db_id": "european_football_2",
        "question": "What is Aaron Hunt's potential score? potential score refers to potential;",
        "evidence": "potential score refers to potential;",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
        "difficulty": "simple",
        "raw_question": "What is Aaron Hunt's potential score?"
    },
    {
        "question_id": 1169,
        "db_id": "european_football_2",
        "question": "What's the heading accuracy of Aaron Hunt?",
        "evidence": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
        "difficulty": "simple",
        "raw_question": "What's the heading accuracy of Aaron Hunt?"
    },
    {
        "question_id": 1170,
        "db_id": "european_football_2",
        "question": "Which foot is preferred by Aaron Hunt? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
        "difficulty": "simple",
        "raw_question": "Which foot is preferred by Aaron Hunt?"
    },
    {
        "question_id": 1171,
        "db_id": "european_football_2",
        "question": "What was the potiential for Aaron Hunt on 2010/8/30? Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Aaron Hunt'",
        "difficulty": "simple",
        "raw_question": "What was the potiential for Aaron Hunt on 2010/8/30?"
    },
    {
        "question_id": 1172,
        "db_id": "european_football_2",
        "question": "When was the first time did Aaron Hunt have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Aaron Hunt' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the first time did Aaron Hunt have his highest crossing score? Give the date."
    },
    {
        "question_id": 1173,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Unknown formula\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Unknown formula'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Unknown formula\"?"
    },
    {
        "question_id": 1174,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Unknown formula\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Unknown formula'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"Unknown formula\"?"
    },
    {
        "question_id": 1175,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Unknown formula\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Unknown formula'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Unknown formula\"?"
    },
    {
        "question_id": 1176,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Unknown formula' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Unknown formula'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Unknown formula' get?"
    },
    {
        "question_id": 1177,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Unknown formula\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Unknown formula'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Unknown formula\"."
    },
    {
        "question_id": 1178,
        "db_id": "codebase_community",
        "question": "Provide the text of the latest 10 comments to the post with the title 'Unknown formula' and the display name of the user who left it. the latest comment refers to MAX(CreationDate);",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Unknown formula' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Provide the text of the latest 10 comments to the post with the title 'Unknown formula' and the display name of the user who left it."
    },
    {
        "question_id": 1179,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Unknown formula'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Unknown formula'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Unknown formula'?"
    },
    {
        "question_id": 1180,
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Unknown formula\"? Title = 'Group differences on a five point Likert item';",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Unknown formula'",
        "difficulty": "simple",
        "raw_question": "What is the post ID and the comments commented in the post titled by \"Unknown formula\"?"
    },
    {
        "question_id": 1181,
        "db_id": "superhero",
        "question": "Rank heroes published by DC Comics by their height in descending order. name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'",
        "difficulty": "simple",
        "raw_question": "Rank heroes published by DC Comics by their height in descending order."
    },
    {
        "question_id": 1182,
        "db_id": "superhero",
        "question": "Rank superheroes from DC Comics by their eye color popularity, starting with the most common color. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' GROUP BY colour.colour",
        "difficulty": "simple",
        "raw_question": "Rank superheroes from DC Comics by their eye color popularity, starting with the most common color."
    },
    {
        "question_id": 1183,
        "db_id": "superhero",
        "question": "List the superheroes from DC Comics who have the super power of 'Super Strength'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'DC Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from DC Comics who have the super power of 'Super Strength'."
    },
    {
        "question_id": 1184,
        "db_id": "superhero",
        "question": "Give the publisher ID of DC Comics. Star Trek is the publisher_name;",
        "evidence": "Star Trek is the publisher_name;",
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'DC Comics'",
        "difficulty": "simple",
        "raw_question": "Give the publisher ID of DC Comics."
    },
    {
        "question_id": 1185,
        "db_id": "superhero",
        "question": "Which superhero has the most durability published by DC Comics? which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'DC Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which superhero has the most durability published by DC Comics?"
    },
    {
        "question_id": 1186,
        "db_id": "superhero",
        "question": "List the eyes, hair and skin colour of all female superheroes published by DC Comics. eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'DC Comics' AND T3.gender = 'Female'",
        "difficulty": "simple",
        "raw_question": "List the eyes, hair and skin colour of all female superheroes published by DC Comics."
    },
    {
        "question_id": 1187,
        "db_id": "superhero",
        "question": "Identify the heaviest superhero in DC Comics. heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the heaviest superhero in DC Comics."
    },
    {
        "question_id": 1188,
        "db_id": "superhero",
        "question": "Give the name of the New God superheroes. alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'New God'",
        "difficulty": "simple",
        "raw_question": "Give the name of the New God superheroes."
    },
    {
        "question_id": 1189,
        "db_id": "superhero",
        "question": "List down at least five full name of New God superheroes. Demi-God superheroes refers to race = 'Demi-God'",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'New God'",
        "difficulty": "simple",
        "raw_question": "List down at least five full name of New God superheroes."
    },
    {
        "question_id": 1190,
        "db_id": "superhero",
        "question": "Provide the full names of New God heroes. vampire heroes refers to race = 'Vampire';",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'New God'",
        "difficulty": "simple",
        "raw_question": "Provide the full names of New God heroes."
    },
    {
        "question_id": 1191,
        "db_id": "california_schools",
        "question": "Which school in San Diego has the highest number of test takers?",
        "evidence": "",
        "SQL": "SELECT sname FROM satscores WHERE cname = 'San Diego' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which school in San Diego has the highest number of test takers?"
    },
    {
        "question_id": 1192,
        "db_id": "california_schools",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Ann Marie. List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Ann Marie'",
        "difficulty": "simple",
        "raw_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Ann Marie. List the district code of the school."
    },
    {
        "question_id": 1193,
        "db_id": "california_schools",
        "question": "What is the most common type of grade span served in the city of San Lorenzo?",
        "evidence": "",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'San Lorenzo' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common type of grade span served in the city of San Lorenzo?"
    },
    {
        "question_id": 1194,
        "db_id": "superhero",
        "question": "What is the eyes colour of Laura Kinney? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Laura Kinney'",
        "difficulty": "simple",
        "raw_question": "What is the eyes colour of Laura Kinney?"
    },
    {
        "question_id": 1195,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Laura Kinney. hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Laura Kinney'",
        "difficulty": "simple",
        "raw_question": "Provide the hero name and race of Laura Kinney."
    },
    {
        "question_id": 1196,
        "db_id": "superhero",
        "question": "List the powers of Laura Kinney. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Laura Kinney'",
        "difficulty": "simple",
        "raw_question": "List the powers of Laura Kinney."
    },
    {
        "question_id": 1197,
        "db_id": "superhero",
        "question": "Provide the eye colour of the superhero who has Laura Kinney as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Laura Kinney'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colour of the superhero who has Laura Kinney as their full name."
    },
    {
        "question_id": 1198,
        "db_id": "superhero",
        "question": "What is the superpowers of the superhero has Laura Kinney as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Laura Kinney'",
        "difficulty": "simple",
        "raw_question": "What is the superpowers of the superhero has Laura Kinney as their full name?"
    },
    {
        "question_id": 1199,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Laura Kinney. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Laura Kinney'",
        "difficulty": "simple",
        "raw_question": "Name the superhero, otherwise known as Laura Kinney."
    },
    {
        "question_id": 1200,
        "db_id": "superhero",
        "question": "Please list all the superpowers of Agent Zero. 3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "Please list all the superpowers of Agent Zero."
    },
    {
        "question_id": 1201,
        "db_id": "superhero",
        "question": "What is the colour of Agent Zero's skin? Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "What is the colour of Agent Zero's skin?"
    },
    {
        "question_id": 1202,
        "db_id": "superhero",
        "question": "Who is the publisher of Agent Zero? the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "Who is the publisher of Agent Zero?"
    },
    {
        "question_id": 1203,
        "db_id": "superhero",
        "question": "What is the publisher's name of Agent Zero? Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "What is the publisher's name of Agent Zero?"
    },
    {
        "question_id": 1204,
        "db_id": "superhero",
        "question": "What is Agent Zero's race? Copycat is the superhero_name;",
        "evidence": "Copycat is the superhero_name;",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "What is Agent Zero's race?"
    },
    {
        "question_id": 1205,
        "db_id": "superhero",
        "question": "Provide the superpowers of the superhero called Agent Zero. superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "Provide the superpowers of the superhero called Agent Zero."
    },
    {
        "question_id": 1206,
        "db_id": "superhero",
        "question": "Indicate the attribute value of superhero Agent Zero. Abomination refers to superhero_name = 'Abomination';",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "Indicate the attribute value of superhero Agent Zero."
    },
    {
        "question_id": 1207,
        "db_id": "superhero",
        "question": "Which group does superhero Agent Zero belong to? group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "Which group does superhero Agent Zero belong to?"
    },
    {
        "question_id": 1208,
        "db_id": "superhero",
        "question": "What is the gender of Agent Zero hero? Agent 13 hero refers to superhero_name = 'Agent 13';",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "What is the gender of Agent Zero hero?"
    },
    {
        "question_id": 1209,
        "db_id": "superhero",
        "question": "What are the race and alignment of Agent Zero? Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "What are the race and alignment of Agent Zero?"
    },
    {
        "question_id": 1210,
        "db_id": "superhero",
        "question": "What is Agent Zero's superpower? Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "What is Agent Zero's superpower?"
    },
    {
        "question_id": 1211,
        "db_id": "superhero",
        "question": "State all of Agent Zero's attributes along with their values. 3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "State all of Agent Zero's attributes along with their values."
    },
    {
        "question_id": 1212,
        "db_id": "superhero",
        "question": "Give the alignment and superpowers of the superhero named Agent Zero. superpowers refers to power_name;",
        "evidence": "superpowers refers to power_name;",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "Give the alignment and superpowers of the superhero named Agent Zero."
    },
    {
        "question_id": 1213,
        "db_id": "superhero",
        "question": "List down Agent Zero's superpowers. Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "List down Agent Zero's superpowers."
    },
    {
        "question_id": 1214,
        "db_id": "superhero",
        "question": "Identify the weakest attribute of the Agent Zero. weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Agent Zero' ORDER BY T2.attribute_value ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the weakest attribute of the Agent Zero."
    },
    {
        "question_id": 1215,
        "db_id": "superhero",
        "question": "What is Agent Zero's eye colour? Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "What is Agent Zero's eye colour?"
    },
    {
        "question_id": 1216,
        "db_id": "superhero",
        "question": "Provide the full name of the superhero named Agent Zero.",
        "evidence": "",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "Provide the full name of the superhero named Agent Zero."
    },
    {
        "question_id": 1217,
        "db_id": "superhero",
        "question": "List the attribute value of the superhero named Agent Zero.",
        "evidence": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "List the attribute value of the superhero named Agent Zero."
    },
    {
        "question_id": 1218,
        "db_id": "superhero",
        "question": "Give the eye colour of Agent Zero. eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
        "difficulty": "simple",
        "raw_question": "Give the eye colour of Agent Zero."
    },
    {
        "question_id": 1219,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Energy Armor'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Energy Armor'."
    },
    {
        "question_id": 1220,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Energy Armor? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Energy Armor?"
    },
    {
        "question_id": 1221,
        "db_id": "superhero",
        "question": "List the name of superheroes with Energy Armor power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Energy Armor power."
    },
    {
        "question_id": 1222,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Energy Armor power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Energy Armor power."
    },
    {
        "question_id": 1223,
        "db_id": "superhero",
        "question": "What is the power ID of Energy Armor? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Energy Armor'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Energy Armor?"
    },
    {
        "question_id": 1224,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Energy Armor. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Energy Armor'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Energy Armor."
    },
    {
        "question_id": 1225,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Robert Lu'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Robert Lu'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'Robert Lu'?"
    },
    {
        "question_id": 1226,
        "db_id": "codebase_community",
        "question": "When did the user known as 'Robert Lu' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Robert Lu'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'Robert Lu' create his or her account?"
    },
    {
        "question_id": 1227,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code of the address in the city North Omer?",
        "evidence": "",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'North Omer'",
        "difficulty": "simple",
        "raw_question": "What is the zip code of the address in the city North Omer?"
    },
    {
        "question_id": 1228,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code for North Omer?",
        "evidence": "",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'North Omer'",
        "difficulty": "simple",
        "raw_question": "What is the zip code for North Omer?"
    },
    {
        "question_id": 1229,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Caucus.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Caucus' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Caucus.'"
    },
    {
        "question_id": 1230,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Caucus Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Caucus'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Caucus Badges."
    },
    {
        "question_id": 1231,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Caucus badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Caucus'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Caucus badge."
    },
    {
        "question_id": 1232,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Caucus badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Caucus' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Caucus badge?"
    },
    {
        "question_id": 1233,
        "db_id": "warehouse_1",
        "question": "Find the code of all boxes whose value is higher than the value of any boxes with Scissors as content.",
        "evidence": "",
        "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "difficulty": "simple",
        "raw_question": "Find the code of all boxes whose value is higher than the value of any boxes with Scissors as content."
    },
    {
        "question_id": 1234,
        "db_id": "warehouse_1",
        "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Scissors?",
        "evidence": "",
        "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "difficulty": "simple",
        "raw_question": "What are the codes of boxes for which the value is greater than the value of any box that contains Scissors?"
    },
    {
        "question_id": 1235,
        "db_id": "warehouse_1",
        "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
        "evidence": "",
        "SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "difficulty": "simple",
        "raw_question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content."
    },
    {
        "question_id": 1236,
        "db_id": "warehouse_1",
        "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
        "evidence": "",
        "SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
        "difficulty": "simple",
        "raw_question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?"
    },
    {
        "question_id": 1237,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Greg Staples. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Greg Staples'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Greg Staples."
    },
    {
        "question_id": 1238,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Greg Staples cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Greg Staples'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Greg Staples cost in total?"
    },
    {
        "question_id": 1239,
        "db_id": "card_games",
        "question": "Is there any card from Greg Staples artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Greg Staples' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Greg Staples artist in pauper format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 1240,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Greg Staples created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Greg Staples'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Greg Staples created?"
    },
    {
        "question_id": 1241,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Greg Staples? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Greg Staples' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Greg Staples? List them in descending order of dates."
    },
    {
        "question_id": 1242,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Greg Staples worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Greg Staples'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Greg Staples worked on and find any banned cards if there are any."
    },
    {
        "question_id": 1243,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Landfall?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Landfall'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Landfall?"
    },
    {
        "question_id": 1244,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Maddening Wind'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Maddening Wind'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Maddening Wind'?"
    },
    {
        "question_id": 1245,
        "db_id": "card_games",
        "question": "What is the status of card \"Maddening Wind\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Maddening Wind'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Maddening Wind\"?"
    },
    {
        "question_id": 1246,
        "db_id": "card_games",
        "question": "What is the type of card \"Maddening Wind\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Maddening Wind'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Maddening Wind\"?"
    },
    {
        "question_id": 1247,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Maddening Wind\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Maddening Wind'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Maddening Wind\"?"
    },
    {
        "question_id": 1248,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Maddening Wind\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Maddening Wind'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Maddening Wind\"?"
    },
    {
        "question_id": 1249,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Maddening Wind\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Maddening Wind'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Maddening Wind\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1250,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Maddening Wind\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Maddening Wind'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Maddening Wind\" in it?"
    },
    {
        "question_id": 1251,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Maddening Wind\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Maddening Wind' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Maddening Wind\" is in?"
    },
    {
        "question_id": 1252,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Enchant Swamp and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Swamp'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Enchant Swamp and the date of rulings for these cards."
    },
    {
        "question_id": 1253,
        "db_id": "card_games",
        "question": "Among the Enchant Swamp cards, which are black color and comes with foreign languague translation? Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Swamp' AND T1.colors = 'B'",
        "difficulty": "simple",
        "raw_question": "Among the Enchant Swamp cards, which are black color and comes with foreign languague translation?"
    },
    {
        "question_id": 1254,
        "db_id": "card_games",
        "question": "Please list the websites where I can purchase the cards that have the promotional type of \"tourney\". promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
        "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'tourney'",
        "difficulty": "simple",
        "raw_question": "Please list the websites where I can purchase the cards that have the promotional type of \"tourney\"."
    },
    {
        "question_id": 1255,
        "db_id": "card_games",
        "question": "For Legendary Enchantment type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Legendary Enchantment' AND T2.format = 'vintage' AND T1.side IS NULL",
        "difficulty": "simple",
        "raw_question": "For Legendary Enchantment type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
    },
    {
        "question_id": 1256,
        "db_id": "formula_1",
        "question": "Please list the year during which the race is held on circuits in Adelaide. Shanghai is a name of location;",
        "evidence": "Shanghai is a name of location;",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Adelaide'",
        "difficulty": "simple",
        "raw_question": "Please list the year during which the race is held on circuits in Adelaide."
    },
    {
        "question_id": 1257,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Circuit de Monaco be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Circuit de Monaco be found?"
    },
    {
        "question_id": 1258,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Circuit de Monaco? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Circuit de Monaco?"
    },
    {
        "question_id": 1259,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Circuit de Monaco.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Circuit de Monaco."
    },
    {
        "question_id": 1260,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Circuit de Monaco? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Circuit de Monaco'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Circuit de Monaco?"
    },
    {
        "question_id": 1261,
        "db_id": "formula_1",
        "question": "What's the reference name of Circuit de Monaco? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Circuit de Monaco'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Circuit de Monaco?"
    },
    {
        "question_id": 1262,
        "db_id": "formula_1",
        "question": "Please list all the years that Circuit de Monaco was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Circuit de Monaco was used in a Formula_1 race."
    },
    {
        "question_id": 1263,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Circuit de Monaco. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Circuit de Monaco."
    },
    {
        "question_id": 1264,
        "db_id": "formula_1",
        "question": "In which location does the Circuit de Monaco circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Circuit de Monaco'",
        "difficulty": "simple",
        "raw_question": "In which location does the Circuit de Monaco circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 1265,
        "db_id": "advertising_agencies",
        "question": "Show agency details for client with detail 'Vincent'.",
        "evidence": "",
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Vincent'",
        "difficulty": "simple",
        "raw_question": "Show agency details for client with detail 'Vincent'."
    },
    {
        "question_id": 1266,
        "db_id": "advertising_agencies",
        "question": "What are the agency details for clients with the detail Vincent?",
        "evidence": "",
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Vincent'",
        "difficulty": "simple",
        "raw_question": "What are the agency details for clients with the detail Vincent?"
    },
    {
        "question_id": 1267,
        "db_id": "superhero",
        "question": "Provide the heights of the heroes whose eye colours are Indigo. heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
        "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
        "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Indigo'",
        "difficulty": "simple",
        "raw_question": "Provide the heights of the heroes whose eye colours are Indigo."
    },
    {
        "question_id": 1268,
        "db_id": "superhero",
        "question": "List down at least five full names of superheroes with Indigo eyes. blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
        "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Indigo' LIMIT 5",
        "difficulty": "simple",
        "raw_question": "List down at least five full names of superheroes with Indigo eyes."
    },
    {
        "question_id": 1269,
        "db_id": "superhero",
        "question": "Give the race of the Indigo-haired male superhero. blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Indigo' AND T4.gender = 'Male'",
        "difficulty": "simple",
        "raw_question": "Give the race of the Indigo-haired male superhero."
    },
    {
        "question_id": 1270,
        "db_id": "superhero",
        "question": "In superheroes with weight less than 100, list the full name of the superheroes with Indigo eyes. weight less than 100 refers to weight_kg < 100",
        "evidence": "weight less than 100 refers to weight_kg < 100",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Indigo'",
        "difficulty": "simple",
        "raw_question": "In superheroes with weight less than 100, list the full name of the superheroes with Indigo eyes."
    },
    {
        "question_id": 1271,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all paragraph ids and texts for the document with name 'Palm reading'.",
        "evidence": "",
        "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Palm reading'",
        "difficulty": "simple",
        "raw_question": "Show all paragraph ids and texts for the document with name 'Palm reading'."
    },
    {
        "question_id": 1272,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the ids and texts of paragraphs in the document titled 'Palm reading'?",
        "evidence": "",
        "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Palm reading'",
        "difficulty": "simple",
        "raw_question": "What are the ids and texts of paragraphs in the document titled 'Palm reading'?"
    },
    {
        "question_id": 1273,
        "db_id": "student_club",
        "question": "List the full name of all the members of the Student_Club who attended the \"Fall Budget Review\" event. full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
        "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Fall Budget Review'",
        "difficulty": "simple",
        "raw_question": "List the full name of all the members of the Student_Club who attended the \"Fall Budget Review\" event."
    },
    {
        "question_id": 1274,
        "db_id": "student_club",
        "question": "Give the location for \"Fall Budget Review\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'Fall Budget Review'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"Fall Budget Review\"."
    },
    {
        "question_id": 1275,
        "db_id": "student_club",
        "question": "List all the members who attended the event \"Fall Budget Review\". 'October Meeting' is an event name;",
        "evidence": "'October Meeting' is an event name;",
        "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Fall Budget Review'",
        "difficulty": "simple",
        "raw_question": "List all the members who attended the event \"Fall Budget Review\"."
    },
    {
        "question_id": 1276,
        "db_id": "student_club",
        "question": "Among the students majored in interior design, who have attended the Fall Budget Review event? majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Fall Budget Review' AND T1.major_name = 'Interior Design'",
        "difficulty": "simple",
        "raw_question": "Among the students majored in interior design, who have attended the Fall Budget Review event?"
    },
    {
        "question_id": 1277,
        "db_id": "california_schools",
        "question": "What is the highest eligible free rate for K-12 students in the schools in Orange County? Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Orange' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the highest eligible free rate for K-12 students in the schools in Orange County?"
    },
    {
        "question_id": 1278,
        "db_id": "student_club",
        "question": "List all of the College of Science' departments.",
        "evidence": "",
        "SQL": "SELECT department FROM major WHERE college = 'College of Science'",
        "difficulty": "simple",
        "raw_question": "List all of the College of Science' departments."
    },
    {
        "question_id": 1279,
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the Katowice tourney.",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Katowice' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Find the name of the winner who has the highest rank points and participated in the Katowice tourney."
    },
    {
        "question_id": 1280,
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the Katowice tournament?",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Katowice' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the name of the winner with the most rank points who participated in the Katowice tournament?"
    },
    {
        "question_id": 1281,
        "db_id": "student_club",
        "question": "Please list the event names of all the events attended by Maya Mclean.",
        "evidence": "",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "difficulty": "simple",
        "raw_question": "Please list the event names of all the events attended by Maya Mclean."
    },
    {
        "question_id": 1282,
        "db_id": "museum_visit",
        "question": "What are the opening year and staff number of the museum named Capital Plaza Museum?",
        "evidence": "",
        "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Capital Plaza Museum'",
        "difficulty": "simple",
        "raw_question": "What are the opening year and staff number of the museum named Capital Plaza Museum?"
    },
    {
        "question_id": 1283,
        "db_id": "dog_kennels",
        "question": "Which dogs are owned by someone who lives in Wisconsin? List the owner's first name and the dog's name.",
        "evidence": "",
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Wisconsin'",
        "difficulty": "simple",
        "raw_question": "Which dogs are owned by someone who lives in Wisconsin? List the owner's first name and the dog's name."
    },
    {
        "question_id": 1284,
        "db_id": "dog_kennels",
        "question": "Find the first names of owners living in Wisconsin and the names of dogs they own.",
        "evidence": "",
        "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Wisconsin'",
        "difficulty": "simple",
        "raw_question": "Find the first names of owners living in Wisconsin and the names of dogs they own."
    },
    {
        "question_id": 1285,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show paragraph details for paragraph with text 'Somalia ' .",
        "evidence": "",
        "SQL": "select other_details from paragraphs where paragraph_text like 'Somalia'",
        "difficulty": "simple",
        "raw_question": "Show paragraph details for paragraph with text 'Somalia ' ."
    },
    {
        "question_id": 1286,
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the details for the paragraph that includes the text 'Somalia ' ?",
        "evidence": "",
        "SQL": "select other_details from paragraphs where paragraph_text like 'Somalia'",
        "difficulty": "simple",
        "raw_question": "What are the details for the paragraph that includes the text 'Somalia ' ?"
    },
    {
        "question_id": 1287,
        "db_id": "european_football_2",
        "question": "What is the attacking work rate of the football playerr Abraham Gonzalez?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "difficulty": "simple",
        "raw_question": "What is the attacking work rate of the football playerr Abraham Gonzalez?"
    },
    {
        "question_id": 1288,
        "db_id": "european_football_2",
        "question": "What is the football player Abraham Gonzalez header's finishing rate on 18/09/2014? header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
        "difficulty": "simple",
        "raw_question": "What is the football player Abraham Gonzalez header's finishing rate on 18/09/2014?"
    },
    {
        "question_id": 1289,
        "db_id": "european_football_2",
        "question": "What is the overall rating of the football player Abraham Gonzalez in year 2011? in year 2011 refers to strftime('%Y', date) = '2011';",
        "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
        "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez' AND strftime('%Y', t2.date) = '2011'",
        "difficulty": "simple",
        "raw_question": "What is the overall rating of the football player Abraham Gonzalez in year 2011?"
    },
    {
        "question_id": 1290,
        "db_id": "european_football_2",
        "question": "What is the defensive work rate of the football player Abraham Gonzalez\n?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "difficulty": "simple",
        "raw_question": "What is the defensive work rate of the football player Abraham Gonzalez\n?"
    },
    {
        "question_id": 1291,
        "db_id": "european_football_2",
        "question": "What is Abraham Gonzalez's potential score? potential score refers to potential;",
        "evidence": "potential score refers to potential;",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "difficulty": "simple",
        "raw_question": "What is Abraham Gonzalez's potential score?"
    },
    {
        "question_id": 1292,
        "db_id": "european_football_2",
        "question": "What's the heading accuracy of Abraham Gonzalez?",
        "evidence": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "difficulty": "simple",
        "raw_question": "What's the heading accuracy of Abraham Gonzalez?"
    },
    {
        "question_id": 1293,
        "db_id": "european_football_2",
        "question": "Which foot is preferred by Abraham Gonzalez? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
        "difficulty": "simple",
        "raw_question": "Which foot is preferred by Abraham Gonzalez?"
    },
    {
        "question_id": 1294,
        "db_id": "european_football_2",
        "question": "What was the potiential for Abraham Gonzalez on 2010/8/30? Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Abraham Gonzalez'",
        "difficulty": "simple",
        "raw_question": "What was the potiential for Abraham Gonzalez on 2010/8/30?"
    },
    {
        "question_id": 1295,
        "db_id": "european_football_2",
        "question": "Tell the defensive work rate for Abraham Gonzalez on 2013/2/22. Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
        "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
        "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Abraham Gonzalez'",
        "difficulty": "simple",
        "raw_question": "Tell the defensive work rate for Abraham Gonzalez on 2013/2/22."
    },
    {
        "question_id": 1296,
        "db_id": "european_football_2",
        "question": "When was the first time did Abraham Gonzalez have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Abraham Gonzalez' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the first time did Abraham Gonzalez have his highest crossing score? Give the date."
    },
    {
        "question_id": 1297,
        "db_id": "bbc_channels",
        "question": "What is the name of the director who is in the \"Cyrano de Bergerac\" program?",
        "evidence": "",
        "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Cyrano de Bergerac'",
        "difficulty": "simple",
        "raw_question": "What is the name of the director who is in the \"Cyrano de Bergerac\" program?"
    },
    {
        "question_id": 1298,
        "db_id": "superhero",
        "question": "Rank heroes published by Titan Books by their height in descending order. name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
        "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Titan Books'",
        "difficulty": "simple",
        "raw_question": "Rank heroes published by Titan Books by their height in descending order."
    },
    {
        "question_id": 1299,
        "db_id": "superhero",
        "question": "Rank superheroes from Titan Books by their eye color popularity, starting with the most common color. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
        "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Titan Books' GROUP BY colour.colour",
        "difficulty": "simple",
        "raw_question": "Rank superheroes from Titan Books by their eye color popularity, starting with the most common color."
    },
    {
        "question_id": 1300,
        "db_id": "superhero",
        "question": "Give the publisher ID of Titan Books. Star Trek is the publisher_name;",
        "evidence": "Star Trek is the publisher_name;",
        "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Titan Books'",
        "difficulty": "simple",
        "raw_question": "Give the publisher ID of Titan Books."
    },
    {
        "question_id": 1301,
        "db_id": "superhero",
        "question": "Identify the heaviest superhero in Titan Books. heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Titan Books' ORDER BY T1.weight_kg DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the heaviest superhero in Titan Books."
    },
    {
        "question_id": 1302,
        "db_id": "superhero",
        "question": "Give the name of the Flora Colossus superheroes. alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Flora Colossus'",
        "difficulty": "simple",
        "raw_question": "Give the name of the Flora Colossus superheroes."
    },
    {
        "question_id": 1303,
        "db_id": "superhero",
        "question": "List down at least five full name of Flora Colossus superheroes. Demi-God superheroes refers to race = 'Demi-God'",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Flora Colossus'",
        "difficulty": "simple",
        "raw_question": "List down at least five full name of Flora Colossus superheroes."
    },
    {
        "question_id": 1304,
        "db_id": "superhero",
        "question": "Provide the full names of Flora Colossus heroes. vampire heroes refers to race = 'Vampire';",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Flora Colossus'",
        "difficulty": "simple",
        "raw_question": "Provide the full names of Flora Colossus heroes."
    },
    {
        "question_id": 1305,
        "db_id": "boat_1",
        "question": "What is the name of all sailors whose rating is higher than any sailor named Eugene?",
        "evidence": "",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Eugene')",
        "difficulty": "simple",
        "raw_question": "What is the name of all sailors whose rating is higher than any sailor named Eugene?"
    },
    {
        "question_id": 1306,
        "db_id": "boat_1",
        "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Eugene?",
        "evidence": "",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Eugene')",
        "difficulty": "simple",
        "raw_question": "What are the sailors' names, the ones whose rating is higher than any sailor named Eugene?"
    },
    {
        "question_id": 1307,
        "db_id": "boat_1",
        "question": "What is the name of all sailors whose rating is higher than all sailors named Eugene?",
        "evidence": "",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Eugene')",
        "difficulty": "simple",
        "raw_question": "What is the name of all sailors whose rating is higher than all sailors named Eugene?"
    },
    {
        "question_id": 1308,
        "db_id": "boat_1",
        "question": "What are the names of all sailors with a higher rating than every sailor named Eugene?",
        "evidence": "",
        "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Eugene')",
        "difficulty": "simple",
        "raw_question": "What are the names of all sailors with a higher rating than every sailor named Eugene?"
    },
    {
        "question_id": 1309,
        "db_id": "california_schools",
        "question": "Which school in Santa Cruz has the highest number of test takers?",
        "evidence": "",
        "SQL": "SELECT sname FROM satscores WHERE cname = 'Santa Cruz' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which school in Santa Cruz has the highest number of test takers?"
    },
    {
        "question_id": 1310,
        "db_id": "california_schools",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Douglas. List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Douglas'",
        "difficulty": "simple",
        "raw_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Douglas. List the district code of the school."
    },
    {
        "question_id": 1311,
        "db_id": "california_schools",
        "question": "What is the most common type of grade span served in the city of Valley Springs?",
        "evidence": "",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Valley Springs' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common type of grade span served in the city of Valley Springs?"
    },
    {
        "question_id": 1312,
        "db_id": "sing_contest",
        "question": "What are the names and original artists of the song whose English translation is 'Dance from Moldova'?",
        "evidence": "",
        "SQL": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'Dance from Moldova'",
        "difficulty": "simple",
        "raw_question": "What are the names and original artists of the song whose English translation is 'Dance from Moldova'?"
    },
    {
        "question_id": 1313,
        "db_id": "headphone_store",
        "question": "List name and parking info for the stores in the Valley Village neighborhood.",
        "evidence": "",
        "SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Valley Village'",
        "difficulty": "simple",
        "raw_question": "List name and parking info for the stores in the Valley Village neighborhood."
    },
    {
        "question_id": 1314,
        "db_id": "headphone_store",
        "question": "Which stores are located in the \"Valley Village\" neighborhood? Return their names and parking information.",
        "evidence": "",
        "SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Valley Village'",
        "difficulty": "simple",
        "raw_question": "Which stores are located in the \"Valley Village\" neighborhood? Return their names and parking information."
    },
    {
        "question_id": 1315,
        "db_id": "superhero",
        "question": "What is the eyes colour of Bernhard Baker? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Bernhard Baker'",
        "difficulty": "simple",
        "raw_question": "What is the eyes colour of Bernhard Baker?"
    },
    {
        "question_id": 1316,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Bernhard Baker. hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Bernhard Baker'",
        "difficulty": "simple",
        "raw_question": "Provide the hero name and race of Bernhard Baker."
    },
    {
        "question_id": 1317,
        "db_id": "superhero",
        "question": "List the powers of Bernhard Baker. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Bernhard Baker'",
        "difficulty": "simple",
        "raw_question": "List the powers of Bernhard Baker."
    },
    {
        "question_id": 1318,
        "db_id": "superhero",
        "question": "Provide the eye colour of the superhero who has Bernhard Baker as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Bernhard Baker'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colour of the superhero who has Bernhard Baker as their full name."
    },
    {
        "question_id": 1319,
        "db_id": "superhero",
        "question": "What is the superpowers of the superhero has Bernhard Baker as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Bernhard Baker'",
        "difficulty": "simple",
        "raw_question": "What is the superpowers of the superhero has Bernhard Baker as their full name?"
    },
    {
        "question_id": 1320,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Bernhard Baker. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Bernhard Baker'",
        "difficulty": "simple",
        "raw_question": "Name the superhero, otherwise known as Bernhard Baker."
    },
    {
        "question_id": 1321,
        "db_id": "superhero",
        "question": "Please list all the superpowers of Azazel. 3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "Please list all the superpowers of Azazel."
    },
    {
        "question_id": 1322,
        "db_id": "superhero",
        "question": "What is the colour of Azazel's skin? Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "What is the colour of Azazel's skin?"
    },
    {
        "question_id": 1323,
        "db_id": "superhero",
        "question": "Who is the publisher of Azazel? the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "Who is the publisher of Azazel?"
    },
    {
        "question_id": 1324,
        "db_id": "superhero",
        "question": "What is the publisher's name of Azazel? Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "What is the publisher's name of Azazel?"
    },
    {
        "question_id": 1325,
        "db_id": "superhero",
        "question": "What is Azazel's race? Copycat is the superhero_name;",
        "evidence": "Copycat is the superhero_name;",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "What is Azazel's race?"
    },
    {
        "question_id": 1326,
        "db_id": "superhero",
        "question": "Provide the superpowers of the superhero called Azazel. superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "Provide the superpowers of the superhero called Azazel."
    },
    {
        "question_id": 1327,
        "db_id": "superhero",
        "question": "Indicate the attribute value of superhero Azazel. Abomination refers to superhero_name = 'Abomination';",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "Indicate the attribute value of superhero Azazel."
    },
    {
        "question_id": 1328,
        "db_id": "superhero",
        "question": "Which group does superhero Azazel belong to? group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "Which group does superhero Azazel belong to?"
    },
    {
        "question_id": 1329,
        "db_id": "superhero",
        "question": "What is the gender of Azazel hero? Agent 13 hero refers to superhero_name = 'Agent 13';",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "What is the gender of Azazel hero?"
    },
    {
        "question_id": 1330,
        "db_id": "superhero",
        "question": "What are the race and alignment of Azazel? Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "What are the race and alignment of Azazel?"
    },
    {
        "question_id": 1331,
        "db_id": "superhero",
        "question": "What is Azazel's superpower? Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "What is Azazel's superpower?"
    },
    {
        "question_id": 1332,
        "db_id": "superhero",
        "question": "State all of Azazel's attributes along with their values. 3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "State all of Azazel's attributes along with their values."
    },
    {
        "question_id": 1333,
        "db_id": "superhero",
        "question": "Give the alignment and superpowers of the superhero named Azazel. superpowers refers to power_name;",
        "evidence": "superpowers refers to power_name;",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "Give the alignment and superpowers of the superhero named Azazel."
    },
    {
        "question_id": 1334,
        "db_id": "superhero",
        "question": "List down Azazel's superpowers. Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "List down Azazel's superpowers."
    },
    {
        "question_id": 1335,
        "db_id": "superhero",
        "question": "Identify the weakest attribute of the Azazel. weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Azazel' ORDER BY T2.attribute_value ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the weakest attribute of the Azazel."
    },
    {
        "question_id": 1336,
        "db_id": "superhero",
        "question": "What is Azazel's eye colour? Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "What is Azazel's eye colour?"
    },
    {
        "question_id": 1337,
        "db_id": "superhero",
        "question": "Provide the full name of the superhero named Azazel.",
        "evidence": "",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "Provide the full name of the superhero named Azazel."
    },
    {
        "question_id": 1338,
        "db_id": "superhero",
        "question": "List the attribute value of the superhero named Azazel.",
        "evidence": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "List the attribute value of the superhero named Azazel."
    },
    {
        "question_id": 1339,
        "db_id": "superhero",
        "question": "Give the eye colour of Azazel. eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Azazel'",
        "difficulty": "simple",
        "raw_question": "Give the eye colour of Azazel."
    },
    {
        "question_id": 1340,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Elemental Transmogrification'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Elemental Transmogrification'."
    },
    {
        "question_id": 1341,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Elemental Transmogrification? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Elemental Transmogrification?"
    },
    {
        "question_id": 1342,
        "db_id": "superhero",
        "question": "List the name of superheroes with Elemental Transmogrification power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Elemental Transmogrification power."
    },
    {
        "question_id": 1343,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Elemental Transmogrification power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Elemental Transmogrification power."
    },
    {
        "question_id": 1344,
        "db_id": "superhero",
        "question": "What is the power ID of Elemental Transmogrification? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Elemental Transmogrification'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Elemental Transmogrification?"
    },
    {
        "question_id": 1345,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Elemental Transmogrification. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Elemental Transmogrification'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Elemental Transmogrification."
    },
    {
        "question_id": 1346,
        "db_id": "codebase_community",
        "question": "From which post is the tag \"independence\" excerpted from? Please give the body of the post. \"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
        "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'independence'",
        "difficulty": "simple",
        "raw_question": "From which post is the tag \"independence\" excerpted from? Please give the body of the post."
    },
    {
        "question_id": 1347,
        "db_id": "codebase_community",
        "question": "Mention the display name and location of the user who owned the excerpt post with independence tag. user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
        "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'independence'",
        "difficulty": "simple",
        "raw_question": "Mention the display name and location of the user who owned the excerpt post with independence tag."
    },
    {
        "question_id": 1348,
        "db_id": "codebase_community",
        "question": "What is the excerpt post ID and wiki post ID of the tag named independence? tag named sample refers to TagName = 'sample';",
        "evidence": "tag named sample refers to TagName = 'sample';",
        "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'independence'",
        "difficulty": "simple",
        "raw_question": "What is the excerpt post ID and wiki post ID of the tag named independence?"
    },
    {
        "question_id": 1349,
        "db_id": "european_football_2",
        "question": "What is the short name of the football team AC Ajaccio? short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
        "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'AC Ajaccio'",
        "difficulty": "simple",
        "raw_question": "What is the short name of the football team AC Ajaccio?"
    },
    {
        "question_id": 1350,
        "db_id": "european_football_2",
        "question": "What is the AC Ajaccio team freedom of movement in the 1st two thirds of the pitch? ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
        "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'AC Ajaccio'",
        "difficulty": "simple",
        "raw_question": "What is the AC Ajaccio team freedom of movement in the 1st two thirds of the pitch?"
    },
    {
        "question_id": 1351,
        "db_id": "european_football_2",
        "question": "What is AC Ajaccio's highest chance creation passing score and what is it classified as? Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
        "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is AC Ajaccio's highest chance creation passing score and what is it classified as?"
    },
    {
        "question_id": 1352,
        "db_id": "european_football_2",
        "question": "What was the build up play speed class for \"AC Ajaccio\" on 2011/2/22? \"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
        "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the build up play speed class for \"AC Ajaccio\" on 2011/2/22?"
    },
    {
        "question_id": 1353,
        "db_id": "european_football_2",
        "question": "State the chance creation passing class for \"AC Ajaccio\" on 2013/9/20. \"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
        "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
        "difficulty": "simple",
        "raw_question": "State the chance creation passing class for \"AC Ajaccio\" on 2013/9/20."
    },
    {
        "question_id": 1354,
        "db_id": "european_football_2",
        "question": "What was the chance creation crossing class for \"AC Ajaccio\" on 2010/2/22? \"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
        "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
        "difficulty": "simple",
        "raw_question": "What was the chance creation crossing class for \"AC Ajaccio\" on 2010/2/22?"
    },
    {
        "question_id": 1355,
        "db_id": "european_football_2",
        "question": "Does the AC Ajaccio team have a slow, balanced or fast speed class? KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
        "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'AC Ajaccio'",
        "difficulty": "simple",
        "raw_question": "Does the AC Ajaccio team have a slow, balanced or fast speed class?"
    },
    {
        "question_id": 1356,
        "db_id": "university_rank",
        "question": "Show all majors and major ranks for the university with name Aurora University.",
        "evidence": "",
        "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Aurora University'",
        "difficulty": "simple",
        "raw_question": "Show all majors and major ranks for the university with name Aurora University."
    },
    {
        "question_id": 1357,
        "db_id": "university_rank",
        "question": "What are the ranks and names of all majors at Aurora University?",
        "evidence": "",
        "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Aurora University'",
        "difficulty": "simple",
        "raw_question": "What are the ranks and names of all majors at Aurora University?"
    },
    {
        "question_id": 1358,
        "db_id": "codebase_community",
        "question": "Please list the names of the badges obtained by Bernie Perez. \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Bernie Perez'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the badges obtained by Bernie Perez."
    },
    {
        "question_id": 1359,
        "db_id": "codebase_community",
        "question": "For the user whose display name is \"Bernie Perez\", what is his/her badge's name? \"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
        "difficulty": "simple",
        "raw_question": "For the user whose display name is \"Bernie Perez\", what is his/her badge's name?"
    },
    {
        "question_id": 1360,
        "db_id": "codebase_community",
        "question": "What is the badge name that user 'Bernie Perez' obtained? \"SilentGhost\" is the DisplayName of user;",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
        "difficulty": "simple",
        "raw_question": "What is the badge name that user 'Bernie Perez' obtained?"
    },
    {
        "question_id": 1361,
        "db_id": "codebase_community",
        "question": "What is the name of badge that the user whose display name is \"Bernie Perez\" obtained?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
        "difficulty": "simple",
        "raw_question": "What is the name of badge that the user whose display name is \"Bernie Perez\" obtained?"
    },
    {
        "question_id": 1362,
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"Bernie Perez\" obtained. \"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
        "difficulty": "simple",
        "raw_question": "State the name of badge that the user whose display name is \"Bernie Perez\" obtained."
    },
    {
        "question_id": 1363,
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name Bernie Perez. the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Bernie Perez' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the latest badge awarded to the user with the display name Bernie Perez."
    },
    {
        "question_id": 1364,
        "db_id": "codebase_community",
        "question": "How long did it take the user, known by his or her display name 'Bernie Perez' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Bernie Perez'",
        "difficulty": "simple",
        "raw_question": "How long did it take the user, known by his or her display name 'Bernie Perez' to get the badge? Count from the date the user's account was created."
    },
    {
        "question_id": 1365,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Bernie Perez'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Bernie Perez'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'Bernie Perez'?"
    },
    {
        "question_id": 1366,
        "db_id": "codebase_community",
        "question": "When did the user known as 'Bernie Perez' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Bernie Perez'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'Bernie Perez' create his or her account?"
    },
    {
        "question_id": 1367,
        "db_id": "real_estate_rentals",
        "question": "In which country does the user with first name Antonio live?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Antonio';",
        "difficulty": "simple",
        "raw_question": "In which country does the user with first name Antonio live?"
    },
    {
        "question_id": 1368,
        "db_id": "real_estate_rentals",
        "question": "Return the country in which the user with first name Antonio lives.",
        "evidence": "",
        "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Antonio';",
        "difficulty": "simple",
        "raw_question": "Return the country in which the user with first name Antonio lives."
    },
    {
        "question_id": 1369,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Tumbleweed.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Tumbleweed' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Tumbleweed.'"
    },
    {
        "question_id": 1370,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Tumbleweed Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Tumbleweed'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Tumbleweed Badges."
    },
    {
        "question_id": 1371,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Tumbleweed badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Tumbleweed'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Tumbleweed badge."
    },
    {
        "question_id": 1372,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Tumbleweed badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Tumbleweed' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Tumbleweed badge?"
    },
    {
        "question_id": 1373,
        "db_id": "car_1",
        "question": "For model cadillac, how many cylinders does the car with the least accelerate have?",
        "evidence": "",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'cadillac' ORDER BY T1.accelerate ASC LIMIT 1;",
        "difficulty": "simple",
        "raw_question": "For model cadillac, how many cylinders does the car with the least accelerate have?"
    },
    {
        "question_id": 1374,
        "db_id": "car_1",
        "question": "For a cadillac model, how many cylinders does the version with least accelerate have?",
        "evidence": "",
        "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'cadillac' ORDER BY T1.accelerate ASC LIMIT 1;",
        "difficulty": "simple",
        "raw_question": "For a cadillac model, how many cylinders does the version with least accelerate have?"
    },
    {
        "question_id": 1375,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Morbid?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Morbid'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Morbid?"
    },
    {
        "question_id": 1376,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Celestial Messenger'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Celestial Messenger'?"
    },
    {
        "question_id": 1377,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Celestial Messenger\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Celestial Messenger\"?"
    },
    {
        "question_id": 1378,
        "db_id": "card_games",
        "question": "What is the status of card \"Celestial Messenger\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Celestial Messenger\"?"
    },
    {
        "question_id": 1379,
        "db_id": "card_games",
        "question": "What is the type of card \"Celestial Messenger\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Celestial Messenger\"?"
    },
    {
        "question_id": 1380,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Celestial Messenger\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Celestial Messenger\"?"
    },
    {
        "question_id": 1381,
        "db_id": "card_games",
        "question": "Write down the ruling of Celestial Messenger. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Celestial Messenger."
    },
    {
        "question_id": 1382,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Celestial Messenger\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Celestial Messenger\"?"
    },
    {
        "question_id": 1383,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Celestial Messenger\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Celestial Messenger\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1384,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Celestial Messenger' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Celestial Messenger' created?"
    },
    {
        "question_id": 1385,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Celestial Messenger\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Celestial Messenger'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Celestial Messenger\" in it?"
    },
    {
        "question_id": 1386,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Celestial Messenger\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Celestial Messenger' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Celestial Messenger\" is in?"
    },
    {
        "question_id": 1387,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Mana Source and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Mana Source'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Mana Source and the date of rulings for these cards."
    },
    {
        "question_id": 1388,
        "db_id": "card_games",
        "question": "Among the Mana Source cards, which are black color and comes with foreign languague translation? Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Mana Source' AND T1.colors = 'B'",
        "difficulty": "simple",
        "raw_question": "Among the Mana Source cards, which are black color and comes with foreign languague translation?"
    },
    {
        "question_id": 1389,
        "db_id": "tvshow",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "evidence": "",
        "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "difficulty": "simple",
        "raw_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?"
    },
    {
        "question_id": 1390,
        "db_id": "tvshow",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "evidence": "",
        "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "difficulty": "simple",
        "raw_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?"
    },
    {
        "question_id": 1391,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Marina Bay Street Circuit be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Marina Bay Street Circuit be found?"
    },
    {
        "question_id": 1392,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Marina Bay Street Circuit? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Marina Bay Street Circuit?"
    },
    {
        "question_id": 1393,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Marina Bay Street Circuit.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Marina Bay Street Circuit."
    },
    {
        "question_id": 1394,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Marina Bay Street Circuit? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Marina Bay Street Circuit?"
    },
    {
        "question_id": 1395,
        "db_id": "formula_1",
        "question": "What's the reference name of Marina Bay Street Circuit? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Marina Bay Street Circuit?"
    },
    {
        "question_id": 1396,
        "db_id": "formula_1",
        "question": "Please list all the years that Marina Bay Street Circuit was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Marina Bay Street Circuit was used in a Formula_1 race."
    },
    {
        "question_id": 1397,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Marina Bay Street Circuit. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Marina Bay Street Circuit."
    },
    {
        "question_id": 1398,
        "db_id": "formula_1",
        "question": "In which location does the Marina Bay Street Circuit circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "difficulty": "simple",
        "raw_question": "In which location does the Marina Bay Street Circuit circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 1399,
        "db_id": "formula_1",
        "question": "Please list the positions of the circuits built by the constructor Connaught. Renault is a name of constructor;",
        "evidence": "Renault is a name of constructor;",
        "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Connaught'",
        "difficulty": "simple",
        "raw_question": "Please list the positions of the circuits built by the constructor Connaught."
    },
    {
        "question_id": 1400,
        "db_id": "financial",
        "question": "List account ID and account opening date for accounts from 'Liberec'. A2 refers to the names of districts.",
        "evidence": "A2 refers to the names of districts.",
        "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Liberec'",
        "difficulty": "simple",
        "raw_question": "List account ID and account opening date for accounts from 'Liberec'."
    },
    {
        "question_id": 1401,
        "db_id": "cre_Doc_and_collections",
        "question": "What is the parent document of document owned by Ransom? List the document id.",
        "evidence": "",
        "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "What is the parent document of document owned by Ransom? List the document id."
    },
    {
        "question_id": 1402,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the document object ids of the objects owned by Ransom?",
        "evidence": "",
        "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "What are the document object ids of the objects owned by Ransom?"
    },
    {
        "question_id": 1403,
        "db_id": "cre_Doc_and_collections",
        "question": "What is the owner of the parent document of document owned by 'Ransom'?",
        "evidence": "",
        "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "What is the owner of the parent document of document owned by 'Ransom'?"
    },
    {
        "question_id": 1404,
        "db_id": "cre_Doc_and_collections",
        "question": "Who is the owner of the parent document of every documents where 'Ransom' is the owner?",
        "evidence": "",
        "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the parent document of every documents where 'Ransom' is the owner?"
    },
    {
        "question_id": 1405,
        "db_id": "cre_Doc_and_collections",
        "question": "List all document which is related to document owned by Ransom . List the document id .",
        "evidence": "",
        "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "List all document which is related to document owned by Ransom . List the document id ."
    },
    {
        "question_id": 1406,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the document object ids of the related to the document owned by Ransom ?",
        "evidence": "",
        "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "What are the document object ids of the related to the document owned by Ransom ?"
    },
    {
        "question_id": 1407,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the different owners of documents that are related to ones owned by Ransom?",
        "evidence": "",
        "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Ransom';",
        "difficulty": "simple",
        "raw_question": "What are the different owners of documents that are related to ones owned by Ransom?"
    },
    {
        "question_id": 1408,
        "db_id": "cre_Doc_and_collections",
        "question": "Which unique subset does document owned by Ransom belong to? List the subset name.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "Which unique subset does document owned by Ransom belong to? List the subset name."
    },
    {
        "question_id": 1409,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the different subset names of all documents owned by Ransom?",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "What are the different subset names of all documents owned by Ransom?"
    },
    {
        "question_id": 1410,
        "db_id": "cre_Doc_and_collections",
        "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
        "evidence": "",
        "SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "List the Collection Name that document owned by 'Ransom ' belong to ."
    },
    {
        "question_id": 1411,
        "db_id": "cre_Doc_and_collections",
        "question": "What is the collection name of a document owned by 'Ransom'?",
        "evidence": "",
        "SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
        "difficulty": "simple",
        "raw_question": "What is the collection name of a document owned by 'Ransom'?"
    },
    {
        "question_id": 1412,
        "db_id": "thrombosis_prediction",
        "question": "Lists all patients by ID who were diagnosed with collagen disease's and had their exams between 01/01/197 and 12/31/1997. 'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'collagen disease'",
        "difficulty": "simple",
        "raw_question": "Lists all patients by ID who were diagnosed with collagen disease's and had their exams between 01/01/197 and 12/31/1997."
    },
    {
        "question_id": 1413,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Avatar de la puissance\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Avatar de la puissance'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Avatar de la puissance\"?"
    },
    {
        "question_id": 1414,
        "db_id": "bakery_1",
        "question": "What are the ids of Cookies whose price is lower than any Meringue?",
        "evidence": "",
        "SQL": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Meringue')",
        "difficulty": "simple",
        "raw_question": "What are the ids of Cookies whose price is lower than any Meringue?"
    },
    {
        "question_id": 1415,
        "db_id": "bakery_1",
        "question": "Give the ids of cookes that are cheaper than any Meringue.",
        "evidence": "",
        "SQL": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Meringue')",
        "difficulty": "simple",
        "raw_question": "Give the ids of cookes that are cheaper than any Meringue."
    },
    {
        "question_id": 1416,
        "db_id": "student_club",
        "question": "State the name of major that Phillip Cullen has joined. name of major refers to major_name",
        "evidence": "name of major refers to major_name",
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
        "difficulty": "simple",
        "raw_question": "State the name of major that Phillip Cullen has joined."
    },
    {
        "question_id": 1417,
        "db_id": "california_schools",
        "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Patricia. List the district code of the school. Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
        "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Patricia'",
        "difficulty": "simple",
        "raw_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Patricia. List the district code of the school."
    },
    {
        "question_id": 1418,
        "db_id": "california_schools",
        "question": "What is the most common type of grade span served in the city of Castro Valley?",
        "evidence": "",
        "SQL": "SELECT GSserved FROM schools WHERE City = 'Castro Valley' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common type of grade span served in the city of Castro Valley?"
    },
    {
        "question_id": 1419,
        "db_id": "card_games",
        "question": "Please list the names of the cards in the set \"Carnage\". card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
        "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Carnage'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the cards in the set \"Carnage\"."
    },
    {
        "question_id": 1420,
        "db_id": "card_games",
        "question": "How many cards are there in the base set of \"Carnage\"? \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
        "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
        "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Carnage'",
        "difficulty": "simple",
        "raw_question": "How many cards are there in the base set of \"Carnage\"?"
    },
    {
        "question_id": 1421,
        "db_id": "card_games",
        "question": "What is the expansion type of the set \"Carnage\"? card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
        "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
        "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Carnage'",
        "difficulty": "simple",
        "raw_question": "What is the expansion type of the set \"Carnage\"?"
    },
    {
        "question_id": 1422,
        "db_id": "card_games",
        "question": "What is the number of cards are there in the set of \"Carnage\"? number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
        "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
        "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Carnage'",
        "difficulty": "simple",
        "raw_question": "What is the number of cards are there in the set of \"Carnage\"?"
    },
    {
        "question_id": 1423,
        "db_id": "card_games",
        "question": "What is the release date for the set \"Carnage\"? release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'",
        "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'",
        "SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Carnage'",
        "difficulty": "simple",
        "raw_question": "What is the release date for the set \"Carnage\"?"
    },
    {
        "question_id": 1424,
        "db_id": "card_games",
        "question": "Please list the name of the cards in the set Arena Beginner Set with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Arena Beginner Set' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please list the name of the cards in the set Arena Beginner Set with the highest converted mana cost."
    },
    {
        "question_id": 1425,
        "db_id": "card_games",
        "question": "What is card number 4 in the set Arena Beginner Set? card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Arena Beginner Set' AND T1.number = 4",
        "difficulty": "simple",
        "raw_question": "What is card number 4 in the set Arena Beginner Set?"
    },
    {
        "question_id": 1426,
        "db_id": "card_games",
        "question": "For the set \"Arena Beginner Set\" , give its parent code. the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Arena Beginner Set'",
        "difficulty": "simple",
        "raw_question": "For the set \"Arena Beginner Set\" , give its parent code."
    },
    {
        "question_id": 1427,
        "db_id": "superhero",
        "question": "What is the eyes colour of Barbara Gordon? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Barbara Gordon'",
        "difficulty": "simple",
        "raw_question": "What is the eyes colour of Barbara Gordon?"
    },
    {
        "question_id": 1428,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Barbara Gordon. hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Barbara Gordon'",
        "difficulty": "simple",
        "raw_question": "Provide the hero name and race of Barbara Gordon."
    },
    {
        "question_id": 1429,
        "db_id": "superhero",
        "question": "List the powers of Barbara Gordon. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Barbara Gordon'",
        "difficulty": "simple",
        "raw_question": "List the powers of Barbara Gordon."
    },
    {
        "question_id": 1430,
        "db_id": "superhero",
        "question": "Provide the eye colour of the superhero who has Barbara Gordon as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Barbara Gordon'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colour of the superhero who has Barbara Gordon as their full name."
    },
    {
        "question_id": 1431,
        "db_id": "superhero",
        "question": "What is the superpowers of the superhero has Barbara Gordon as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Barbara Gordon'",
        "difficulty": "simple",
        "raw_question": "What is the superpowers of the superhero has Barbara Gordon as their full name?"
    },
    {
        "question_id": 1432,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Barbara Gordon. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Barbara Gordon'",
        "difficulty": "simple",
        "raw_question": "Name the superhero, otherwise known as Barbara Gordon."
    },
    {
        "question_id": 1433,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "evidence": "",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "difficulty": "simple",
        "raw_question": "What is the zip code of the address in the city Port Chelsea?"
    },
    {
        "question_id": 1434,
        "db_id": "student_transcripts_tracking",
        "question": "What is the zip code for Port Chelsea?",
        "evidence": "",
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "difficulty": "simple",
        "raw_question": "What is the zip code for Port Chelsea?"
    },
    {
        "question_id": 1435,
        "db_id": "superhero",
        "question": "Describe the names of Neutral alignment superheroes. names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
        "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "difficulty": "simple",
        "raw_question": "Describe the names of Neutral alignment superheroes."
    },
    {
        "question_id": 1436,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Nice Answer.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Nice Answer' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Nice Answer.'"
    },
    {
        "question_id": 1437,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Nice Answer Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Nice Answer'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Nice Answer Badges."
    },
    {
        "question_id": 1438,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Nice Answer badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Nice Answer'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Nice Answer badge."
    },
    {
        "question_id": 1439,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Nice Answer badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Nice Answer' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Nice Answer badge?"
    },
    {
        "question_id": 1440,
        "db_id": "boat_1",
        "question": "Find the names of sailors who reserved boat with the name Mars.",
        "evidence": "",
        "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Mars'",
        "difficulty": "simple",
        "raw_question": "Find the names of sailors who reserved boat with the name Mars."
    },
    {
        "question_id": 1441,
        "db_id": "boat_1",
        "question": "What are the names of sailors who reserved a boat with the name Mars?",
        "evidence": "",
        "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Mars'",
        "difficulty": "simple",
        "raw_question": "What are the names of sailors who reserved a boat with the name Mars?"
    },
    {
        "question_id": 1442,
        "db_id": "financial",
        "question": "What are the accounts that have gold credit cards?",
        "evidence": "",
        "SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
        "difficulty": "simple",
        "raw_question": "What are the accounts that have gold credit cards?"
    },
    {
        "question_id": 1443,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Pete Venters. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Pete Venters'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Pete Venters."
    },
    {
        "question_id": 1444,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Pete Venters cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Pete Venters'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Pete Venters cost in total?"
    },
    {
        "question_id": 1445,
        "db_id": "card_games",
        "question": "Is there any card from Pete Venters artist in pauper format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Pete Venters' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Pete Venters artist in pauper format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 1446,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Pete Venters created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Pete Venters'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Pete Venters created?"
    },
    {
        "question_id": 1447,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Pete Venters? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Pete Venters' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Pete Venters? List them in descending order of dates."
    },
    {
        "question_id": 1448,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Pete Venters worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Pete Venters'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Pete Venters worked on and find any banned cards if there are any."
    },
    {
        "question_id": 1449,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of First strike?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'First strike'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of First strike?"
    },
    {
        "question_id": 1450,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Fear'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Fear'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Fear'?"
    },
    {
        "question_id": 1451,
        "db_id": "card_games",
        "question": "What is the status of card \"Fear\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Fear'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Fear\"?"
    },
    {
        "question_id": 1452,
        "db_id": "card_games",
        "question": "What is the type of card \"Fear\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Fear'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Fear\"?"
    },
    {
        "question_id": 1453,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Fear\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Fear'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Fear\"?"
    },
    {
        "question_id": 1454,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Fear\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Fear'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Fear\"?"
    },
    {
        "question_id": 1455,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Fear\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Fear'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Fear\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1456,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Fear\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Fear'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Fear\" in it?"
    },
    {
        "question_id": 1457,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Fear\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fear' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Fear\" is in?"
    },
    {
        "question_id": 1458,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Fear\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fear' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Fear\" is in it."
    },
    {
        "question_id": 1459,
        "db_id": "card_games",
        "question": "For Legendary Artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Legendary Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "difficulty": "simple",
        "raw_question": "For Legendary Artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
    },
    {
        "question_id": 1460,
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "difficulty": "simple",
        "raw_question": "which countries' tv channels are playing some cartoon written by Todd Casey?"
    },
    {
        "question_id": 1461,
        "db_id": "tvshow",
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "difficulty": "simple",
        "raw_question": "What are the countries that have cartoons on TV that were written by Todd Casey?"
    },
    {
        "question_id": 1462,
        "db_id": "formula_1",
        "question": "Please list the year during which the race is held on circuits in Dijon. Shanghai is a name of location;",
        "evidence": "Shanghai is a name of location;",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Dijon'",
        "difficulty": "simple",
        "raw_question": "Please list the year during which the race is held on circuits in Dijon."
    },
    {
        "question_id": 1463,
        "db_id": "formula_1",
        "question": "Please list the year during which the race is held on circuits in Dallas. Shanghai is a name of location;",
        "evidence": "Shanghai is a name of location;",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Dallas'",
        "difficulty": "simple",
        "raw_question": "Please list the year during which the race is held on circuits in Dallas."
    },
    {
        "question_id": 1464,
        "db_id": "advertising_agencies",
        "question": "Show agency details for client with detail 'Kirsten'.",
        "evidence": "",
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Kirsten'",
        "difficulty": "simple",
        "raw_question": "Show agency details for client with detail 'Kirsten'."
    },
    {
        "question_id": 1465,
        "db_id": "advertising_agencies",
        "question": "What are the agency details for clients with the detail Kirsten?",
        "evidence": "",
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Kirsten'",
        "difficulty": "simple",
        "raw_question": "What are the agency details for clients with the detail Kirsten?"
    },
    {
        "question_id": 1466,
        "db_id": "formula_1",
        "question": "Please list the positions of the circuits built by the constructor Aston Martin. Renault is a name of constructor;",
        "evidence": "Renault is a name of constructor;",
        "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Aston Martin'",
        "difficulty": "simple",
        "raw_question": "Please list the positions of the circuits built by the constructor Aston Martin."
    },
    {
        "question_id": 1467,
        "db_id": "world_1",
        "question": "What are the names of cities in Oceania for which English is not the official language?",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Oceania' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "difficulty": "simple",
        "raw_question": "What are the names of cities in Oceania for which English is not the official language?"
    },
    {
        "question_id": 1468,
        "db_id": "cre_Doc_and_collections",
        "question": "What is the parent document of document owned by Marlin? List the document id.",
        "evidence": "",
        "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "What is the parent document of document owned by Marlin? List the document id."
    },
    {
        "question_id": 1469,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the document object ids of the objects owned by Marlin?",
        "evidence": "",
        "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "What are the document object ids of the objects owned by Marlin?"
    },
    {
        "question_id": 1470,
        "db_id": "cre_Doc_and_collections",
        "question": "What is the owner of the parent document of document owned by 'Marlin'?",
        "evidence": "",
        "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "What is the owner of the parent document of document owned by 'Marlin'?"
    },
    {
        "question_id": 1471,
        "db_id": "cre_Doc_and_collections",
        "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
        "evidence": "",
        "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?"
    },
    {
        "question_id": 1472,
        "db_id": "cre_Doc_and_collections",
        "question": "List all document which is related to document owned by Marlin . List the document id .",
        "evidence": "",
        "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "List all document which is related to document owned by Marlin . List the document id ."
    },
    {
        "question_id": 1473,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the document object ids of the related to the document owned by Marlin ?",
        "evidence": "",
        "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "What are the document object ids of the related to the document owned by Marlin ?"
    },
    {
        "question_id": 1474,
        "db_id": "cre_Doc_and_collections",
        "question": "List all owner of documents that is related to documents owned by Marlin.",
        "evidence": "",
        "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Marlin';",
        "difficulty": "simple",
        "raw_question": "List all owner of documents that is related to documents owned by Marlin."
    },
    {
        "question_id": 1475,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the different owners of documents that are related to ones owned by Marlin?",
        "evidence": "",
        "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Marlin';",
        "difficulty": "simple",
        "raw_question": "What are the different owners of documents that are related to ones owned by Marlin?"
    },
    {
        "question_id": 1476,
        "db_id": "cre_Doc_and_collections",
        "question": "Which unique subset does document owned by Marlin belong to? List the subset name.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "Which unique subset does document owned by Marlin belong to? List the subset name."
    },
    {
        "question_id": 1477,
        "db_id": "cre_Doc_and_collections",
        "question": "What are the different subset names of all documents owned by Marlin?",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "What are the different subset names of all documents owned by Marlin?"
    },
    {
        "question_id": 1478,
        "db_id": "cre_Doc_and_collections",
        "question": "List the Collection Name that document owned by 'Marlin ' belong to .",
        "evidence": "",
        "SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "List the Collection Name that document owned by 'Marlin ' belong to ."
    },
    {
        "question_id": 1479,
        "db_id": "cre_Doc_and_collections",
        "question": "What is the collection name of a document owned by 'Marlin'?",
        "evidence": "",
        "SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Marlin'",
        "difficulty": "simple",
        "raw_question": "What is the collection name of a document owned by 'Marlin'?"
    },
    {
        "question_id": 1480,
        "db_id": "vehicle_driver",
        "question": "What are the names of the drivers who are citizens of the 'United States'?",
        "evidence": "",
        "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "difficulty": "simple",
        "raw_question": "What are the names of the drivers who are citizens of the 'United States'?"
    },
    {
        "question_id": 1481,
        "db_id": "vehicle_driver",
        "question": "Return the names of drivers with citizenship from the United States.",
        "evidence": "",
        "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "difficulty": "simple",
        "raw_question": "Return the names of drivers with citizenship from the United States."
    },
    {
        "question_id": 1482,
        "db_id": "formula_1",
        "question": "How old is the youngest British driver? What is his name? date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'British' ORDER BY dob DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "How old is the youngest British driver? What is his name?"
    },
    {
        "question_id": 1483,
        "db_id": "formula_1",
        "question": "Please list the surnames of all the British drivers. Italian refers to nationality = 'italian'",
        "evidence": "Italian refers to nationality = 'italian'",
        "SQL": "SELECT surname FROM drivers WHERE nationality = 'British'",
        "difficulty": "simple",
        "raw_question": "Please list the surnames of all the British drivers."
    },
    {
        "question_id": 1484,
        "db_id": "formula_1",
        "question": "List out top 3 British drivers who were born from 1980-1990 and have the earliest lap time. born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
        "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
        "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
        "difficulty": "simple",
        "raw_question": "List out top 3 British drivers who were born from 1980-1990 and have the earliest lap time."
    },
    {
        "question_id": 1485,
        "db_id": "formula_1",
        "question": "Please state the reference name of the oldest British driver. oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'British' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please state the reference name of the oldest British driver."
    },
    {
        "question_id": 1486,
        "db_id": "formula_1",
        "question": "List out top 10 British drivers who were born before 1982 and have the latest lap time. born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
        "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
        "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
        "difficulty": "simple",
        "raw_question": "List out top 10 British drivers who were born before 1982 and have the latest lap time."
    },
    {
        "question_id": 1487,
        "db_id": "formula_1",
        "question": "List down top 3 British drivers who has the shortest average pit stop duration and were born between 1980-1985. Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "SQL": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
        "difficulty": "simple",
        "raw_question": "List down top 3 British drivers who has the shortest average pit stop duration and were born between 1980-1985."
    },
    {
        "question_id": 1488,
        "db_id": "formula_1",
        "question": "What is the full name and date of birth of British drivers born between 1981 and 1991? Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
        "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
        "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "difficulty": "simple",
        "raw_question": "What is the full name and date of birth of British drivers born between 1981 and 1991?"
    },
    {
        "question_id": 1489,
        "db_id": "formula_1",
        "question": "Find the full name, Wiki Pedia page link, and date of birth of British drivers born between 1971 and 1985. List it in descending order of date of birth. FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
        "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
        "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "difficulty": "simple",
        "raw_question": "Find the full name, Wiki Pedia page link, and date of birth of British drivers born between 1971 and 1985. List it in descending order of date of birth."
    },
    {
        "question_id": 1490,
        "db_id": "student_club",
        "question": "Give the location for \"April Meeting\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'April Meeting'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"April Meeting\"."
    },
    {
        "question_id": 1491,
        "db_id": "student_club",
        "question": "Calculate the amount budgeted for 'April Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted. 'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Meeting' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "difficulty": "simple",
        "raw_question": "Calculate the amount budgeted for 'April Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
    },
    {
        "question_id": 1492,
        "db_id": "student_club",
        "question": "What category was budgeted for the 'April Meeting' event and how much was the amount budgeted for that category? amount budgeted refers to amount, 'January Speaker' is the event name;",
        "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Meeting'",
        "difficulty": "simple",
        "raw_question": "What category was budgeted for the 'April Meeting' event and how much was the amount budgeted for that category?"
    },
    {
        "question_id": 1493,
        "db_id": "california_schools",
        "question": "What is the highest eligible free rate for K-12 students in the schools in Trinity County? Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Trinity' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the highest eligible free rate for K-12 students in the schools in Trinity County?"
    },
    {
        "question_id": 1494,
        "db_id": "superhero",
        "question": "List down at least five superpowers of Female superheroes. male refers to gender = 'Male'; superpowers refers to power_name;",
        "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Female' LIMIT 5",
        "difficulty": "simple",
        "raw_question": "List down at least five superpowers of Female superheroes."
    },
    {
        "question_id": 1495,
        "db_id": "superhero",
        "question": "List the eyes, hair and skin colour of all Female superheroes published by Dark Horse Comics. eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
        "difficulty": "simple",
        "raw_question": "List the eyes, hair and skin colour of all Female superheroes published by Dark Horse Comics."
    },
    {
        "question_id": 1496,
        "db_id": "card_games",
        "question": "List all the mythic rarity print cards banned in gladiator format. mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "difficulty": "simple",
        "raw_question": "List all the mythic rarity print cards banned in gladiator format."
    },
    {
        "question_id": 1497,
        "db_id": "card_games",
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for gladiator play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'gladiator' AND T1.side IS NULL",
        "difficulty": "simple",
        "raw_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for gladiator play format."
    },
    {
        "question_id": 1498,
        "db_id": "card_games",
        "question": "List down the uuid for gladiator cards and the foreign language of these cards. legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'gladiator'",
        "difficulty": "simple",
        "raw_question": "List down the uuid for gladiator cards and the foreign language of these cards."
    },
    {
        "question_id": 1499,
        "db_id": "card_games",
        "question": "Is there any card from Erica Yang artist in gladiator format and available in paper? If so, indicate its ID. available in paper refers to availability = 'paper'",
        "evidence": "available in paper refers to availability = 'paper'",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'gladiator' AND T1.availability = 'paper'",
        "difficulty": "simple",
        "raw_question": "Is there any card from Erica Yang artist in gladiator format and available in paper? If so, indicate its ID."
    },
    {
        "question_id": 1500,
        "db_id": "card_games",
        "question": "List all the mythic rarity print cards Legal in gladiator format. mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Legal' AND T1.rarity = 'mythic'",
        "difficulty": "simple",
        "raw_question": "List all the mythic rarity print cards Legal in gladiator format."
    },
    {
        "question_id": 1501,
        "db_id": "card_games",
        "question": "Lists by ID all Creature-type cards with Legal status. legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "difficulty": "simple",
        "raw_question": "Lists by ID all Creature-type cards with Legal status."
    },
    {
        "question_id": 1502,
        "db_id": "card_games",
        "question": "When was the oldest mythic card released and what are its Legal play formats? the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the oldest mythic card released and what are its Legal play formats?"
    },
    {
        "question_id": 1503,
        "db_id": "card_games",
        "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Legal play format. ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
        "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
        "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Legal' GROUP BY T1.name, T2.format",
        "difficulty": "simple",
        "raw_question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Legal play format."
    },
    {
        "question_id": 1504,
        "db_id": "student_club",
        "question": "Which college is the President of the Student_Club from? Vice President is a position of the Student Club",
        "evidence": "Vice President is a position of the Student Club",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'President'",
        "difficulty": "simple",
        "raw_question": "Which college is the President of the Student_Club from?"
    },
    {
        "question_id": 1505,
        "db_id": "student_club",
        "question": "What is the amount of the funds that the President received? 'Vice President' is a position of Student Club; funds received refers to amount.",
        "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'President'",
        "difficulty": "simple",
        "raw_question": "What is the amount of the funds that the President received?"
    },
    {
        "question_id": 1506,
        "db_id": "student_club",
        "question": "What city and state did the President of the Student_Club grow up? 'President' is a position of Student Club;",
        "evidence": "'President' is a position of Student Club;",
        "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "difficulty": "simple",
        "raw_question": "What city and state did the President of the Student_Club grow up?"
    },
    {
        "question_id": 1507,
        "db_id": "student_club",
        "question": "State the major name for the President of the club. 'Vice President' is a position of Student Club",
        "evidence": "'Vice President' is a position of Student Club",
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "difficulty": "simple",
        "raw_question": "State the major name for the President of the club."
    },
    {
        "question_id": 1508,
        "db_id": "student_club",
        "question": "Which department was the President of the club in? 'President' is a position of Student Club",
        "evidence": "'President' is a position of Student Club",
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "difficulty": "simple",
        "raw_question": "Which department was the President of the club in?"
    },
    {
        "question_id": 1509,
        "db_id": "student_club",
        "question": "List all the expenses incurred by the President. expense refers to expense_description; 'Vice President' is a position of the Student Club",
        "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
        "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'President'",
        "difficulty": "simple",
        "raw_question": "List all the expenses incurred by the President."
    },
    {
        "question_id": 1510,
        "db_id": "student_club",
        "question": "Provide the full name and email address of the Student_Club's President. full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'President'",
        "difficulty": "simple",
        "raw_question": "Provide the full name and email address of the Student_Club's President."
    },
    {
        "question_id": 1511,
        "db_id": "student_club",
        "question": "State the name of major that President has joined. name of major refers to major_name; 'Vice President' is position of Student Club",
        "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'President'",
        "difficulty": "simple",
        "raw_question": "State the name of major that President has joined."
    },
    {
        "question_id": 1512,
        "db_id": "student_club",
        "question": "Write the full name of the club member with the position of 'President' and list which college the club member belongs to. full name refers to first_name, last name",
        "evidence": "full name refers to first_name, last name",
        "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'President'",
        "difficulty": "simple",
        "raw_question": "Write the full name of the club member with the position of 'President' and list which college the club member belongs to."
    },
    {
        "question_id": 1513,
        "db_id": "movie_2",
        "question": "Find the title of the movie that is played in the Odeon theater.",
        "evidence": "",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "difficulty": "simple",
        "raw_question": "Find the title of the movie that is played in the Odeon theater."
    },
    {
        "question_id": 1514,
        "db_id": "movie_2",
        "question": "What are the movie titles for ones that are played in the Odeon theater?",
        "evidence": "",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "difficulty": "simple",
        "raw_question": "What are the movie titles for ones that are played in the Odeon theater?"
    },
    {
        "question_id": 1515,
        "db_id": "movie_2",
        "question": "What are the titles of all the movies that played at Odeon or The Odeon theater?",
        "evidence": "",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Odeon'",
        "difficulty": "simple",
        "raw_question": "What are the titles of all the movies that played at Odeon or The Odeon theater?"
    },
    {
        "question_id": 1516,
        "db_id": "movie_2",
        "question": "What movie is playing at both Odeon and The Odeon theater?",
        "evidence": "",
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "difficulty": "simple",
        "raw_question": "What movie is playing at both Odeon and The Odeon theater?"
    },
    {
        "question_id": 1517,
        "db_id": "codebase_community",
        "question": "Name 10 users with the badge name 'Great Answer.' \"Necromancer\" is the Name of badge; users refers to DisplayName",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Great Answer' LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Name 10 users with the badge name 'Great Answer.'"
    },
    {
        "question_id": 1518,
        "db_id": "codebase_community",
        "question": "List all the name of users that obtained the Great Answer Badges. name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Great Answer'",
        "difficulty": "simple",
        "raw_question": "List all the name of users that obtained the Great Answer Badges."
    },
    {
        "question_id": 1519,
        "db_id": "codebase_community",
        "question": "Describe the last accessed date and location of the users who received the Great Answer badge. Outliers is the name of the badge;",
        "evidence": "Outliers is the name of the badge;",
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Great Answer'",
        "difficulty": "simple",
        "raw_question": "Describe the last accessed date and location of the users who received the Great Answer badge."
    },
    {
        "question_id": 1520,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who acquired the first Great Answer badge? Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Great Answer' ORDER BY T2.Date LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who acquired the first Great Answer badge?"
    },
    {
        "question_id": 1521,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Lorenzo Lanfranconi. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Lorenzo Lanfranconi'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Lorenzo Lanfranconi."
    },
    {
        "question_id": 1522,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Lorenzo Lanfranconi cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Lorenzo Lanfranconi'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Lorenzo Lanfranconi cost in total?"
    },
    {
        "question_id": 1523,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Lorenzo Lanfranconi created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Lorenzo Lanfranconi'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Lorenzo Lanfranconi created?"
    },
    {
        "question_id": 1524,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Lorenzo Lanfranconi worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Lorenzo Lanfranconi'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Lorenzo Lanfranconi worked on and find any banned cards if there are any."
    },
    {
        "question_id": 1525,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Naya Hushblade'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Naya Hushblade'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Naya Hushblade'?"
    },
    {
        "question_id": 1526,
        "db_id": "card_games",
        "question": "What is the status of card \"Naya Hushblade\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Naya Hushblade'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Naya Hushblade\"?"
    },
    {
        "question_id": 1527,
        "db_id": "card_games",
        "question": "What is the type of card \"Naya Hushblade\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Naya Hushblade'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Naya Hushblade\"?"
    },
    {
        "question_id": 1528,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Naya Hushblade\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Naya Hushblade'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Naya Hushblade\"?"
    },
    {
        "question_id": 1529,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Naya Hushblade\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Naya Hushblade'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Naya Hushblade\"?"
    },
    {
        "question_id": 1530,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Naya Hushblade\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Naya Hushblade'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Naya Hushblade\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1531,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Naya Hushblade\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Naya Hushblade'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Naya Hushblade\" in it?"
    },
    {
        "question_id": 1532,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Naya Hushblade\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Naya Hushblade' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Naya Hushblade\" is in?"
    },
    {
        "question_id": 1533,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Naya Hushblade\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Naya Hushblade' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Naya Hushblade\" is in it."
    },
    {
        "question_id": 1534,
        "db_id": "card_games",
        "question": "List down the name of cards with original types of Legendary Artifact and the date of rulings for these cards. Creature - Elf is the originalType;",
        "evidence": "Creature - Elf is the originalType;",
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Legendary Artifact'",
        "difficulty": "simple",
        "raw_question": "List down the name of cards with original types of Legendary Artifact and the date of rulings for these cards."
    },
    {
        "question_id": 1535,
        "db_id": "card_games",
        "question": "Among the Legendary Artifact cards, which are black color and comes with foreign languague translation? Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Legendary Artifact' AND T1.colors = 'B'",
        "difficulty": "simple",
        "raw_question": "Among the Legendary Artifact cards, which are black color and comes with foreign languague translation?"
    },
    {
        "question_id": 1536,
        "db_id": "card_games",
        "question": "For Snow Artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format. Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Snow Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "difficulty": "simple",
        "raw_question": "For Snow Artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
    },
    {
        "question_id": 1537,
        "db_id": "card_games",
        "question": "Name the foreign name of the card that has (HOU) set watermark? List out the type of this card.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
        "difficulty": "simple",
        "raw_question": "Name the foreign name of the card that has (HOU) set watermark? List out the type of this card."
    },
    {
        "question_id": 1538,
        "db_id": "card_games",
        "question": "What is the language and flavor text of the card that has (HOU) set watermark? List out the type of this card.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
        "difficulty": "simple",
        "raw_question": "What is the language and flavor text of the card that has (HOU) set watermark? List out the type of this card."
    },
    {
        "question_id": 1539,
        "db_id": "card_games",
        "question": "What is the language of the card that has (HOU) set watermark? List out the type of this card.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
        "difficulty": "simple",
        "raw_question": "What is the language of the card that has (HOU) set watermark? List out the type of this card."
    },
    {
        "question_id": 1540,
        "db_id": "tvshow",
        "question": "which countries' tv channels are playing some cartoon written by Michael Jelenic?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Michael Jelenic'",
        "difficulty": "simple",
        "raw_question": "which countries' tv channels are playing some cartoon written by Michael Jelenic?"
    },
    {
        "question_id": 1541,
        "db_id": "tvshow",
        "question": "What are the countries that have cartoons on TV that were written by Michael Jelenic?",
        "evidence": "",
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Michael Jelenic'",
        "difficulty": "simple",
        "raw_question": "What are the countries that have cartoons on TV that were written by Michael Jelenic?"
    },
    {
        "question_id": 1542,
        "db_id": "formula_1",
        "question": "Please give the name of the race held on the circuits in South Africa. Germany is a name of country;",
        "evidence": "Germany is a name of country;",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'South Africa'",
        "difficulty": "simple",
        "raw_question": "Please give the name of the race held on the circuits in South Africa."
    },
    {
        "question_id": 1543,
        "db_id": "formula_1",
        "question": "Please give the names of the races held on the circuits in South Africa. Spain is a name of country;",
        "evidence": "Spain is a name of country;",
        "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'South Africa'",
        "difficulty": "simple",
        "raw_question": "Please give the names of the races held on the circuits in South Africa."
    },
    {
        "question_id": 1544,
        "db_id": "formula_1",
        "question": "How many times the circuits were held in South Africa? Please give their location and coordinates. location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'South Africa'",
        "difficulty": "simple",
        "raw_question": "How many times the circuits were held in South Africa? Please give their location and coordinates."
    },
    {
        "question_id": 1545,
        "db_id": "formula_1",
        "question": "Please list the year during which the race is held on circuits in Marina Bay. Shanghai is a name of location;",
        "evidence": "Shanghai is a name of location;",
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Marina Bay'",
        "difficulty": "simple",
        "raw_question": "Please list the year during which the race is held on circuits in Marina Bay."
    },
    {
        "question_id": 1546,
        "db_id": "formula_1",
        "question": "Where can the introduction of the races held on Fuji Speedway be found? introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
        "difficulty": "simple",
        "raw_question": "Where can the introduction of the races held on Fuji Speedway be found?"
    },
    {
        "question_id": 1547,
        "db_id": "formula_1",
        "question": "Where can I find the information about the races held on Fuji Speedway? information about races refers to url;",
        "evidence": "information about races refers to url;",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
        "difficulty": "simple",
        "raw_question": "Where can I find the information about the races held on Fuji Speedway?"
    },
    {
        "question_id": 1548,
        "db_id": "formula_1",
        "question": "Please list the time of the races held on Fuji Speedway.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
        "difficulty": "simple",
        "raw_question": "Please list the time of the races held on Fuji Speedway."
    },
    {
        "question_id": 1549,
        "db_id": "formula_1",
        "question": "What's the location coordinates of Fuji Speedway? location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Fuji Speedway'",
        "difficulty": "simple",
        "raw_question": "What's the location coordinates of Fuji Speedway?"
    },
    {
        "question_id": 1550,
        "db_id": "formula_1",
        "question": "What's the reference name of Fuji Speedway? reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Fuji Speedway'",
        "difficulty": "simple",
        "raw_question": "What's the reference name of Fuji Speedway?"
    },
    {
        "question_id": 1551,
        "db_id": "formula_1",
        "question": "Please list all the years that Fuji Speedway was used in a Formula_1 race.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
        "difficulty": "simple",
        "raw_question": "Please list all the years that Fuji Speedway was used in a Formula_1 race."
    },
    {
        "question_id": 1552,
        "db_id": "formula_1",
        "question": "Please give more information about the Formula_1 races that used the Fuji Speedway. more information refers to url",
        "evidence": "more information refers to url",
        "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
        "difficulty": "simple",
        "raw_question": "Please give more information about the Formula_1 races that used the Fuji Speedway."
    },
    {
        "question_id": 1553,
        "db_id": "formula_1",
        "question": "In which location does the Fuji Speedway circuit located? Also, find the country and coordinates of this circuit? coordinates expressed in latitude and longitude refers to (lat, lng)",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Fuji Speedway'",
        "difficulty": "simple",
        "raw_question": "In which location does the Fuji Speedway circuit located? Also, find the country and coordinates of this circuit?"
    },
    {
        "question_id": 1554,
        "db_id": "superhero",
        "question": "Please list the superhero names of all the superheroes that have blue eyes and Strawberry Blond hair. blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Strawberry Blond'",
        "difficulty": "simple",
        "raw_question": "Please list the superhero names of all the superheroes that have blue eyes and Strawberry Blond hair."
    },
    {
        "question_id": 1555,
        "db_id": "superhero",
        "question": "Which superheroes have blue eyes with Strawberry Blond hair? which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
        "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Strawberry Blond'",
        "difficulty": "simple",
        "raw_question": "Which superheroes have blue eyes with Strawberry Blond hair?"
    },
    {
        "question_id": 1556,
        "db_id": "superhero",
        "question": "Give the race of the Strawberry Blond-haired male superhero. blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
        "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Strawberry Blond' AND T4.gender = 'Male'",
        "difficulty": "simple",
        "raw_question": "Give the race of the Strawberry Blond-haired male superhero."
    },
    {
        "question_id": 1557,
        "db_id": "formula_1",
        "question": "Please list the positions of the circuits built by the constructor BMW Sauber. Renault is a name of constructor;",
        "evidence": "Renault is a name of constructor;",
        "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'BMW Sauber'",
        "difficulty": "simple",
        "raw_question": "Please list the positions of the circuits built by the constructor BMW Sauber."
    },
    {
        "question_id": 1558,
        "db_id": "voter_1",
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Kelly Clauss'?",
        "evidence": "",
        "SQL": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Kelly Clauss'",
        "difficulty": "simple",
        "raw_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Kelly Clauss'?"
    },
    {
        "question_id": 1559,
        "db_id": "world_1",
        "question": "What are the names of cities in South America for which English is not the official language?",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'South America' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "difficulty": "simple",
        "raw_question": "What are the names of cities in South America for which English is not the official language?"
    },
    {
        "question_id": 1560,
        "db_id": "financial",
        "question": "List account ID and account opening date for accounts from 'Kutna Hora'. A2 refers to the names of districts.",
        "evidence": "A2 refers to the names of districts.",
        "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Kutna Hora'",
        "difficulty": "simple",
        "raw_question": "List account ID and account opening date for accounts from 'Kutna Hora'."
    },
    {
        "question_id": 1561,
        "db_id": "financial",
        "question": "For the first client who opened his/her account in south Bohemia, what is his/her account ID? A3 stands for region names",
        "evidence": "A3 stands for region names",
        "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' ORDER BY T1.date ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "For the first client who opened his/her account in south Bohemia, what is his/her account ID?"
    },
    {
        "question_id": 1562,
        "db_id": "financial",
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients? Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?"
    },
    {
        "question_id": 1563,
        "db_id": "financial",
        "question": "From Year 1995 to 2000, who are the accounts holders from 'south Bohemia'. State the account ID the frequency of statement issuance. Accounts holder refers to the person who own this account.",
        "evidence": "Accounts holder refers to the person who own this account.",
        "SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "difficulty": "simple",
        "raw_question": "From Year 1995 to 2000, who are the accounts holders from 'south Bohemia'. State the account ID the frequency of statement issuance."
    },
    {
        "question_id": 1564,
        "db_id": "student_club",
        "question": "Give the location for \"March Speaker\". 'Spring Budget Review' is an event name;",
        "evidence": "'Spring Budget Review' is an event name;",
        "SQL": "SELECT location FROM event WHERE event_name = 'March Speaker'",
        "difficulty": "simple",
        "raw_question": "Give the location for \"March Speaker\"."
    },
    {
        "question_id": 1565,
        "db_id": "student_club",
        "question": "Calculate the amount budgeted for 'March Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted. 'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "difficulty": "simple",
        "raw_question": "Calculate the amount budgeted for 'March Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
    },
    {
        "question_id": 1566,
        "db_id": "student_club",
        "question": "What category was budgeted for the 'March Speaker' event and how much was the amount budgeted for that category? amount budgeted refers to amount, 'January Speaker' is the event name;",
        "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Speaker'",
        "difficulty": "simple",
        "raw_question": "What category was budgeted for the 'March Speaker' event and how much was the amount budgeted for that category?"
    },
    {
        "question_id": 1567,
        "db_id": "student_club",
        "question": "Mention the category of events which were held at Campus Common. held at MU 215 refers to location = 'MU 215'",
        "evidence": "held at MU 215 refers to location = 'MU 215'",
        "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'Campus Common'",
        "difficulty": "simple",
        "raw_question": "Mention the category of events which were held at Campus Common."
    },
    {
        "question_id": 1568,
        "db_id": "student_club",
        "question": "State the category of events were held at Campus Common. 'MU 215' is the location of event;",
        "evidence": "'MU 215' is the location of event; ",
        "SQL": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'Campus Common'",
        "difficulty": "simple",
        "raw_question": "State the category of events were held at Campus Common."
    },
    {
        "question_id": 1569,
        "db_id": "student_club",
        "question": "Which budget category does the expense 'Alumni Glass' fall to? 'Posters' refers to expense description",
        "evidence": "'Posters' refers to expense description",
        "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Alumni Glass'",
        "difficulty": "simple",
        "raw_question": "Which budget category does the expense 'Alumni Glass' fall to?"
    },
    {
        "question_id": 1570,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Lord Magnus\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Lord Magnus'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Lord Magnus\"?"
    },
    {
        "question_id": 1571,
        "db_id": "student_club",
        "question": "List the last name of all the students who majored Liberal Arts. \n 'Law and Constitutional Studies' is the major name",
        "evidence": "'Law and Constitutional Studies' is the major name",
        "SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Liberal Arts'",
        "difficulty": "simple",
        "raw_question": "List the last name of all the students who majored Liberal Arts. \n"
    },
    {
        "question_id": 1572,
        "db_id": "student_club",
        "question": "Among the students majored in Liberal Arts, who have attended the Community Theater event? majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
        "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Liberal Arts'",
        "difficulty": "simple",
        "raw_question": "Among the students majored in Liberal Arts, who have attended the Community Theater event?"
    },
    {
        "question_id": 1573,
        "db_id": "student_club",
        "question": "List out the position of members who joined major of Liberal Arts. 'Business' is the major name",
        "evidence": "'Business' is the major name",
        "SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Liberal Arts'",
        "difficulty": "simple",
        "raw_question": "List out the position of members who joined major of Liberal Arts."
    },
    {
        "question_id": 1574,
        "db_id": "student_club",
        "question": "List the last names of students under the Liberal Arts major and include their phone numbers. 'Elementary Education' is the major name; phone numbers refers to phone",
        "evidence": "'Elementary Education' is the major name; phone numbers refers to phone",
        "SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Liberal Arts'",
        "difficulty": "simple",
        "raw_question": "List the last names of students under the Liberal Arts major and include their phone numbers."
    },
    {
        "question_id": 1575,
        "db_id": "wta_1",
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "evidence": "",
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "difficulty": "simple",
        "raw_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?"
    },
    {
        "question_id": 1576,
        "db_id": "wta_1",
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "evidence": "",
        "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
        "difficulty": "simple",
        "raw_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?"
    },
    {
        "question_id": 1577,
        "db_id": "wta_1",
        "question": "Find the name of the winner who has the highest rank points and participated in the WTA Championships tourney.",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Find the name of the winner who has the highest rank points and participated in the WTA Championships tourney."
    },
    {
        "question_id": 1578,
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the WTA Championships tournament?",
        "evidence": "",
        "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the name of the winner with the most rank points who participated in the WTA Championships tournament?"
    },
    {
        "question_id": 1579,
        "db_id": "museum_visit",
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "evidence": "",
        "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "difficulty": "simple",
        "raw_question": "What are the opening year and staff number of the museum named Plaza Museum?"
    },
    {
        "question_id": 1580,
        "db_id": "sing_contest",
        "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Iskren Petsov'?",
        "evidence": "",
        "SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Iskren Petsov'",
        "difficulty": "simple",
        "raw_question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Iskren Petsov'?"
    },
    {
        "question_id": 1581,
        "db_id": "european_football_2",
        "question": "What is the attacking work rate of the football playerr Aaron Appindangoye?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
        "difficulty": "simple",
        "raw_question": "What is the attacking work rate of the football playerr Aaron Appindangoye?"
    },
    {
        "question_id": 1582,
        "db_id": "european_football_2",
        "question": "What is the defensive work rate of the football player Aaron Appindangoye\n?",
        "evidence": "",
        "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
        "difficulty": "simple",
        "raw_question": "What is the defensive work rate of the football player Aaron Appindangoye\n?"
    },
    {
        "question_id": 1583,
        "db_id": "european_football_2",
        "question": "What is Aaron Appindangoye's potential score? potential score refers to potential;",
        "evidence": "potential score refers to potential;",
        "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
        "difficulty": "simple",
        "raw_question": "What is Aaron Appindangoye's potential score?"
    },
    {
        "question_id": 1584,
        "db_id": "european_football_2",
        "question": "What's the heading accuracy of Aaron Appindangoye?",
        "evidence": "",
        "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
        "difficulty": "simple",
        "raw_question": "What's the heading accuracy of Aaron Appindangoye?"
    },
    {
        "question_id": 1585,
        "db_id": "european_football_2",
        "question": "Which foot is preferred by Aaron Appindangoye? Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
        "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
        "difficulty": "simple",
        "raw_question": "Which foot is preferred by Aaron Appindangoye?"
    },
    {
        "question_id": 1586,
        "db_id": "european_football_2",
        "question": "When was the first time did Aaron Appindangoye have his highest crossing score? Give the date. Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
        "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Aaron Appindangoye' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "When was the first time did Aaron Appindangoye have his highest crossing score? Give the date."
    },
    {
        "question_id": 1587,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Variance components\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Variance components'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Variance components\"?"
    },
    {
        "question_id": 1588,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Variance components\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Variance components'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"Variance components\"?"
    },
    {
        "question_id": 1589,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Variance components\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Variance components'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Variance components\"?"
    },
    {
        "question_id": 1590,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Variance components' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Variance components'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Variance components' get?"
    },
    {
        "question_id": 1591,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Variance components\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Variance components'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Variance components\"."
    },
    {
        "question_id": 1592,
        "db_id": "codebase_community",
        "question": "Provide the text of the latest 10 comments to the post with the title 'Variance components' and the display name of the user who left it. the latest comment refers to MAX(CreationDate);",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Variance components' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Provide the text of the latest 10 comments to the post with the title 'Variance components' and the display name of the user who left it."
    },
    {
        "question_id": 1593,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Variance components'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Variance components'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Variance components'?"
    },
    {
        "question_id": 1594,
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Variance components\"? Title = 'Group differences on a five point Likert item';",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Variance components'",
        "difficulty": "simple",
        "raw_question": "What is the post ID and the comments commented in the post titled by \"Variance components\"?"
    },
    {
        "question_id": 1595,
        "db_id": "superhero",
        "question": "Give the name of the Dathomirian Zabrak superheroes. alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Dathomirian Zabrak'",
        "difficulty": "simple",
        "raw_question": "Give the name of the Dathomirian Zabrak superheroes."
    },
    {
        "question_id": 1596,
        "db_id": "superhero",
        "question": "List down at least five full name of Dathomirian Zabrak superheroes. Demi-God superheroes refers to race = 'Demi-God'",
        "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Dathomirian Zabrak'",
        "difficulty": "simple",
        "raw_question": "List down at least five full name of Dathomirian Zabrak superheroes."
    },
    {
        "question_id": 1597,
        "db_id": "superhero",
        "question": "Provide the full names of Dathomirian Zabrak heroes. vampire heroes refers to race = 'Vampire';",
        "evidence": "vampire heroes refers to race = 'Vampire';",
        "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Dathomirian Zabrak'",
        "difficulty": "simple",
        "raw_question": "Provide the full names of Dathomirian Zabrak heroes."
    },
    {
        "question_id": 1598,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Kipling West. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Kipling West'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Kipling West."
    },
    {
        "question_id": 1599,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Kipling West cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Kipling West'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Kipling West cost in total?"
    },
    {
        "question_id": 1600,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Kipling West created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Kipling West'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Kipling West created?"
    },
    {
        "question_id": 1601,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Kipling West worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Kipling West'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Kipling West worked on and find any banned cards if there are any."
    },
    {
        "question_id": 1602,
        "db_id": "card_games",
        "question": "Name the cards that were illustrated by Rebekah Lynn. Aaron Boyd' is artist;",
        "evidence": "Aaron Boyd' is artist;",
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Rebekah Lynn'",
        "difficulty": "simple",
        "raw_question": "Name the cards that were illustrated by Rebekah Lynn."
    },
    {
        "question_id": 1603,
        "db_id": "card_games",
        "question": "What is the  unconverted mana do all the cards created by Rebekah Lynn cost in total? unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Rebekah Lynn'",
        "difficulty": "simple",
        "raw_question": "What is the  unconverted mana do all the cards created by Rebekah Lynn cost in total?"
    },
    {
        "question_id": 1604,
        "db_id": "card_games",
        "question": "What kind of printing is on the card that Rebekah Lynn created? kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Rebekah Lynn'",
        "difficulty": "simple",
        "raw_question": "What kind of printing is on the card that Rebekah Lynn created?"
    },
    {
        "question_id": 1605,
        "db_id": "card_games",
        "question": "What are the rulings for the card named and designed by Rebekah Lynn? List them in descending order of dates. rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Rebekah Lynn' ORDER BY T2.date DESC",
        "difficulty": "simple",
        "raw_question": "What are the rulings for the card named and designed by Rebekah Lynn? List them in descending order of dates."
    },
    {
        "question_id": 1606,
        "db_id": "card_games",
        "question": "List all the frame styles and cards Rebekah Lynn worked on and find any banned cards if there are any. frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Rebekah Lynn'",
        "difficulty": "simple",
        "raw_question": "List all the frame styles and cards Rebekah Lynn worked on and find any banned cards if there are any."
    },
    {
        "question_id": 1607,
        "db_id": "card_games",
        "question": "What are the card layout of cards with keyword of Tempting offer?",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Tempting offer'",
        "difficulty": "simple",
        "raw_question": "What are the card layout of cards with keyword of Tempting offer?"
    },
    {
        "question_id": 1608,
        "db_id": "card_games",
        "question": "Which foreign language used by \"Cornucopia astral\"? \"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
        "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Cornucopia astral'",
        "difficulty": "simple",
        "raw_question": "Which foreign language used by \"Cornucopia astral\"?"
    },
    {
        "question_id": 1609,
        "db_id": "card_games",
        "question": "Please list the name of the cards in the set Mythic Edition with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Mythic Edition' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please list the name of the cards in the set Mythic Edition with the highest converted mana cost."
    },
    {
        "question_id": 1610,
        "db_id": "card_games",
        "question": "For the set \"Mythic Edition\" , give its parent code. the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Mythic Edition'",
        "difficulty": "simple",
        "raw_question": "For the set \"Mythic Edition\" , give its parent code."
    },
    {
        "question_id": 1611,
        "db_id": "card_games",
        "question": "Please list the name of the cards in the set Redemption Program with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Redemption Program' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please list the name of the cards in the set Redemption Program with the highest converted mana cost."
    },
    {
        "question_id": 1612,
        "db_id": "card_games",
        "question": "For the set \"Redemption Program\" , give its parent code. the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Redemption Program'",
        "difficulty": "simple",
        "raw_question": "For the set \"Redemption Program\" , give its parent code."
    },
    {
        "question_id": 1613,
        "db_id": "superhero",
        "question": "What is the eyes colour of Damon Macready? eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Damon Macready'",
        "difficulty": "simple",
        "raw_question": "What is the eyes colour of Damon Macready?"
    },
    {
        "question_id": 1614,
        "db_id": "superhero",
        "question": "Provide the hero name and race of Damon Macready. hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Damon Macready'",
        "difficulty": "simple",
        "raw_question": "Provide the hero name and race of Damon Macready."
    },
    {
        "question_id": 1615,
        "db_id": "superhero",
        "question": "List the powers of Damon Macready. Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Damon Macready'",
        "difficulty": "simple",
        "raw_question": "List the powers of Damon Macready."
    },
    {
        "question_id": 1616,
        "db_id": "superhero",
        "question": "Provide the eye colour of the superhero who has Damon Macready as their full name. eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Damon Macready'",
        "difficulty": "simple",
        "raw_question": "Provide the eye colour of the superhero who has Damon Macready as their full name."
    },
    {
        "question_id": 1617,
        "db_id": "superhero",
        "question": "What is the superpowers of the superhero has Damon Macready as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Damon Macready'",
        "difficulty": "simple",
        "raw_question": "What is the superpowers of the superhero has Damon Macready as their full name?"
    },
    {
        "question_id": 1618,
        "db_id": "superhero",
        "question": "Name the superhero, otherwise known as Damon Macready. name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
        "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Damon Macready'",
        "difficulty": "simple",
        "raw_question": "Name the superhero, otherwise known as Damon Macready."
    },
    {
        "question_id": 1619,
        "db_id": "superhero",
        "question": "Please list all the superpowers of Dr Manhattan. 3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "Please list all the superpowers of Dr Manhattan."
    },
    {
        "question_id": 1620,
        "db_id": "superhero",
        "question": "What is the colour of Dr Manhattan's skin? Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "What is the colour of Dr Manhattan's skin?"
    },
    {
        "question_id": 1621,
        "db_id": "superhero",
        "question": "Who is the publisher of Dr Manhattan? the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "Who is the publisher of Dr Manhattan?"
    },
    {
        "question_id": 1622,
        "db_id": "superhero",
        "question": "What is the publisher's name of Dr Manhattan? Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "What is the publisher's name of Dr Manhattan?"
    },
    {
        "question_id": 1623,
        "db_id": "superhero",
        "question": "What is Dr Manhattan's race? Copycat is the superhero_name;",
        "evidence": "Copycat is the superhero_name;",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "What is Dr Manhattan's race?"
    },
    {
        "question_id": 1624,
        "db_id": "superhero",
        "question": "Provide the superpowers of the superhero called Dr Manhattan. superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "Provide the superpowers of the superhero called Dr Manhattan."
    },
    {
        "question_id": 1625,
        "db_id": "superhero",
        "question": "Indicate the attribute value of superhero Dr Manhattan. Abomination refers to superhero_name = 'Abomination';",
        "evidence": "Abomination refers to superhero_name = 'Abomination';",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "Indicate the attribute value of superhero Dr Manhattan."
    },
    {
        "question_id": 1626,
        "db_id": "superhero",
        "question": "Which group does superhero Dr Manhattan belong to? group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "Which group does superhero Dr Manhattan belong to?"
    },
    {
        "question_id": 1627,
        "db_id": "superhero",
        "question": "What is the gender of Dr Manhattan hero? Agent 13 hero refers to superhero_name = 'Agent 13';",
        "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
        "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "What is the gender of Dr Manhattan hero?"
    },
    {
        "question_id": 1628,
        "db_id": "superhero",
        "question": "What are the race and alignment of Dr Manhattan? Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
        "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "What are the race and alignment of Dr Manhattan?"
    },
    {
        "question_id": 1629,
        "db_id": "superhero",
        "question": "What is Dr Manhattan's superpower? Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "What is Dr Manhattan's superpower?"
    },
    {
        "question_id": 1630,
        "db_id": "superhero",
        "question": "State all of Dr Manhattan's attributes along with their values. 3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
        "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "State all of Dr Manhattan's attributes along with their values."
    },
    {
        "question_id": 1631,
        "db_id": "superhero",
        "question": "Give the alignment and superpowers of the superhero named Dr Manhattan. superpowers refers to power_name;",
        "evidence": "superpowers refers to power_name;",
        "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "Give the alignment and superpowers of the superhero named Dr Manhattan."
    },
    {
        "question_id": 1632,
        "db_id": "superhero",
        "question": "List down Dr Manhattan's superpowers. Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "List down Dr Manhattan's superpowers."
    },
    {
        "question_id": 1633,
        "db_id": "superhero",
        "question": "Identify the weakest attribute of the Dr Manhattan. weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
        "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan' ORDER BY T2.attribute_value ASC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the weakest attribute of the Dr Manhattan."
    },
    {
        "question_id": 1634,
        "db_id": "superhero",
        "question": "What is Dr Manhattan's eye colour? Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "What is Dr Manhattan's eye colour?"
    },
    {
        "question_id": 1635,
        "db_id": "superhero",
        "question": "Provide the full name of the superhero named Dr Manhattan.",
        "evidence": "",
        "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "Provide the full name of the superhero named Dr Manhattan."
    },
    {
        "question_id": 1636,
        "db_id": "superhero",
        "question": "List the attribute value of the superhero named Dr Manhattan.",
        "evidence": "",
        "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "List the attribute value of the superhero named Dr Manhattan."
    },
    {
        "question_id": 1637,
        "db_id": "superhero",
        "question": "Give the eye colour of Dr Manhattan. eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
        "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
        "difficulty": "simple",
        "raw_question": "Give the eye colour of Dr Manhattan."
    },
    {
        "question_id": 1638,
        "db_id": "codebase_community",
        "question": "List out the dates that users who are located in The Hague obtained their badges? \"Rochester, NY\" is the Location of user; user refers to UserId",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'The Hague'",
        "difficulty": "simple",
        "raw_question": "List out the dates that users who are located in The Hague obtained their badges?"
    },
    {
        "question_id": 1639,
        "db_id": "codebase_community",
        "question": "List out the age of users who located in The Hague obtained the badge? \"Vienna, Austria\" is the Location",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'The Hague'",
        "difficulty": "simple",
        "raw_question": "List out the age of users who located in The Hague obtained the badge?"
    },
    {
        "question_id": 1640,
        "db_id": "codebase_community",
        "question": "Provide the badge names received in 2011 for the user whose location is in the The Hague. received in 2011 refers to year(Date) = 2011;",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'The Hague'",
        "difficulty": "simple",
        "raw_question": "Provide the badge names received in 2011 for the user whose location is in the The Hague."
    },
    {
        "question_id": 1641,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Toils of Night and Day'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Toils of Night and Day'?"
    },
    {
        "question_id": 1642,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Toils of Night and Day\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Toils of Night and Day\"?"
    },
    {
        "question_id": 1643,
        "db_id": "card_games",
        "question": "What is the status of card \"Toils of Night and Day\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Toils of Night and Day\"?"
    },
    {
        "question_id": 1644,
        "db_id": "card_games",
        "question": "What is the type of card \"Toils of Night and Day\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Toils of Night and Day\"?"
    },
    {
        "question_id": 1645,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Toils of Night and Day\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Toils of Night and Day\"?"
    },
    {
        "question_id": 1646,
        "db_id": "card_games",
        "question": "Write down the ruling of Toils of Night and Day. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Toils of Night and Day."
    },
    {
        "question_id": 1647,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Toils of Night and Day\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Toils of Night and Day\"?"
    },
    {
        "question_id": 1648,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Toils of Night and Day\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Toils of Night and Day\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1649,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Toils of Night and Day' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Toils of Night and Day' created?"
    },
    {
        "question_id": 1650,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Toils of Night and Day\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Toils of Night and Day'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Toils of Night and Day\" in it?"
    },
    {
        "question_id": 1651,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Toils of Night and Day\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Toils of Night and Day' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Toils of Night and Day\" is in?"
    },
    {
        "question_id": 1652,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Toils of Night and Day\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Toils of Night and Day' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Toils of Night and Day\" is in it."
    },
    {
        "question_id": 1653,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Sword of Truth and Justice'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Sword of Truth and Justice'?"
    },
    {
        "question_id": 1654,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Sword of Truth and Justice\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Sword of Truth and Justice\"?"
    },
    {
        "question_id": 1655,
        "db_id": "card_games",
        "question": "What is the status of card \"Sword of Truth and Justice\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Sword of Truth and Justice\"?"
    },
    {
        "question_id": 1656,
        "db_id": "card_games",
        "question": "What is the type of card \"Sword of Truth and Justice\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Sword of Truth and Justice\"?"
    },
    {
        "question_id": 1657,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Sword of Truth and Justice\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Sword of Truth and Justice\"?"
    },
    {
        "question_id": 1658,
        "db_id": "card_games",
        "question": "Write down the ruling of Sword of Truth and Justice. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Sword of Truth and Justice."
    },
    {
        "question_id": 1659,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Sword of Truth and Justice\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Sword of Truth and Justice\"?"
    },
    {
        "question_id": 1660,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Sword of Truth and Justice\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Sword of Truth and Justice\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1661,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Sword of Truth and Justice' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Sword of Truth and Justice' created?"
    },
    {
        "question_id": 1662,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Sword of Truth and Justice\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Truth and Justice'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Sword of Truth and Justice\" in it?"
    },
    {
        "question_id": 1663,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Burn at the Stake'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Burn at the Stake'?"
    },
    {
        "question_id": 1664,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Burn at the Stake\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Burn at the Stake\"?"
    },
    {
        "question_id": 1665,
        "db_id": "card_games",
        "question": "What is the status of card \"Burn at the Stake\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Burn at the Stake\"?"
    },
    {
        "question_id": 1666,
        "db_id": "card_games",
        "question": "What is the type of card \"Burn at the Stake\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Burn at the Stake\"?"
    },
    {
        "question_id": 1667,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Burn at the Stake\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Burn at the Stake\"?"
    },
    {
        "question_id": 1668,
        "db_id": "card_games",
        "question": "Write down the ruling of Burn at the Stake. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Burn at the Stake."
    },
    {
        "question_id": 1669,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Burn at the Stake\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Burn at the Stake\"?"
    },
    {
        "question_id": 1670,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Burn at the Stake\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Burn at the Stake\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1671,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Burn at the Stake' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Burn at the Stake' created?"
    },
    {
        "question_id": 1672,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Burn at the Stake\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Burn at the Stake'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Burn at the Stake\" in it?"
    },
    {
        "question_id": 1673,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Smart Ass'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Smart Ass'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Smart Ass'?"
    },
    {
        "question_id": 1674,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Smart Ass\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Smart Ass'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Smart Ass\"?"
    },
    {
        "question_id": 1675,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Smart Ass\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Smart Ass'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Smart Ass\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1676,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Smart Ass\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Smart Ass'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Smart Ass\" in it?"
    },
    {
        "question_id": 1677,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Touch and Go'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Touch and Go'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Touch and Go'?"
    },
    {
        "question_id": 1678,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Touch and Go\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Touch and Go'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Touch and Go\"?"
    },
    {
        "question_id": 1679,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Touch and Go\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Touch and Go'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Touch and Go\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1680,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Touch and Go\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Touch and Go'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Touch and Go\" in it?"
    },
    {
        "question_id": 1681,
        "db_id": "card_games",
        "question": "What is the keyword found on card 'Sword of Feast and Famine'? Angel of Mercy' is the name of card;",
        "evidence": "Angel of Mercy' is the name of card;",
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "What is the keyword found on card 'Sword of Feast and Famine'?"
    },
    {
        "question_id": 1682,
        "db_id": "card_games",
        "question": "What type of promotion is of card 'Sword of Feast and Famine'? card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
        "SQL": "SELECT promoTypes FROM cards WHERE name = 'Sword of Feast and Famine' AND promoTypes IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What type of promotion is of card 'Sword of Feast and Famine'?"
    },
    {
        "question_id": 1683,
        "db_id": "card_games",
        "question": "What is the description about the ruling of card \"Sword of Feast and Famine\"? Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "What is the description about the ruling of card \"Sword of Feast and Famine\"?"
    },
    {
        "question_id": 1684,
        "db_id": "card_games",
        "question": "What is the status of card \"Sword of Feast and Famine\"? Cloudchaser Eagle is the name of card;",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "What is the status of card \"Sword of Feast and Famine\"?"
    },
    {
        "question_id": 1685,
        "db_id": "card_games",
        "question": "What is the type of card \"Sword of Feast and Famine\"? Benalish Knight' is the name of card;",
        "evidence": "Benalish Knight' is the name of card;",
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "What is the type of card \"Sword of Feast and Famine\"?"
    },
    {
        "question_id": 1686,
        "db_id": "card_games",
        "question": "What is the rule of playing card \"Sword of Feast and Famine\"? Benalish Knight' is the name of card; rule of playing card refers to format;",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "What is the rule of playing card \"Sword of Feast and Famine\"?"
    },
    {
        "question_id": 1687,
        "db_id": "card_games",
        "question": "Write down the ruling of Sword of Feast and Famine. Beacon of Immortality' is the name of card;",
        "evidence": "Beacon of Immortality' is the name of card;",
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "Write down the ruling of Sword of Feast and Famine."
    },
    {
        "question_id": 1688,
        "db_id": "card_games",
        "question": "What's the list of all types for the card \"Sword of Feast and Famine\"? card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "What's the list of all types for the card \"Sword of Feast and Famine\"?"
    },
    {
        "question_id": 1689,
        "db_id": "card_games",
        "question": "Did the set of cards with \"Sword of Feast and Famine\" appear on Magic: The Gathering Online? card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "Did the set of cards with \"Sword of Feast and Famine\" appear on Magic: The Gathering Online?"
    },
    {
        "question_id": 1690,
        "db_id": "card_games",
        "question": "When was the ruling for the card 'Sword of Feast and Famine' created? Reminisce refers to name = 'Reminisce'; when created is the date",
        "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
        "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "When was the ruling for the card 'Sword of Feast and Famine' created?"
    },
    {
        "question_id": 1691,
        "db_id": "card_games",
        "question": "What was the release date for the set which card \"Sword of Feast and Famine\" in it? \"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Feast and Famine'",
        "difficulty": "simple",
        "raw_question": "What was the release date for the set which card \"Sword of Feast and Famine\" in it?"
    },
    {
        "question_id": 1692,
        "db_id": "card_games",
        "question": "What's the French name of the set of cards with \"Sword of Feast and Famine\" is in? French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Sword of Feast and Famine' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "What's the French name of the set of cards with \"Sword of Feast and Famine\" is in?"
    },
    {
        "question_id": 1693,
        "db_id": "card_games",
        "question": "Tell the Japanese name of the set which card \"Sword of Feast and Famine\" is in it. Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Sword of Feast and Famine' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "difficulty": "simple",
        "raw_question": "Tell the Japanese name of the set which card \"Sword of Feast and Famine\" is in it."
    },
    {
        "question_id": 1694,
        "db_id": "student_club",
        "question": "List all of the College of Agriculture and Applied Sciences' departments.",
        "evidence": "",
        "SQL": "SELECT department FROM major WHERE college = 'College of Agriculture and Applied Sciences'",
        "difficulty": "simple",
        "raw_question": "List all of the College of Agriculture and Applied Sciences' departments."
    },
    {
        "question_id": 1695,
        "db_id": "student_club",
        "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences. 'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
        "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
        "SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
        "difficulty": "simple",
        "raw_question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences."
    },
    {
        "question_id": 1696,
        "db_id": "codebase_community",
        "question": "Identify the total views on the post 'Selecting trustworthy rows based on minima and maxima'. Name the user who posted it last time. total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
        "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Selecting trustworthy rows based on minima and maxima'",
        "difficulty": "simple",
        "raw_question": "Identify the total views on the post 'Selecting trustworthy rows based on minima and maxima'. Name the user who posted it last time."
    },
    {
        "question_id": 1697,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Predicting with both continuous and categorical features\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Predicting with both continuous and categorical features\"?"
    },
    {
        "question_id": 1698,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Predicting with both continuous and categorical features\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"Predicting with both continuous and categorical features\"?"
    },
    {
        "question_id": 1699,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Predicting with both continuous and categorical features\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Predicting with both continuous and categorical features\"?"
    },
    {
        "question_id": 1700,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Predicting with both continuous and categorical features' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Predicting with both continuous and categorical features' get?"
    },
    {
        "question_id": 1701,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Predicting with both continuous and categorical features\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Predicting with both continuous and categorical features\"."
    },
    {
        "question_id": 1702,
        "db_id": "codebase_community",
        "question": "Provide the related post title of \"Predicting with both continuous and categorical features\".",
        "evidence": "",
        "SQL": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'Predicting with both continuous and categorical features'",
        "difficulty": "simple",
        "raw_question": "Provide the related post title of \"Predicting with both continuous and categorical features\"."
    },
    {
        "question_id": 1703,
        "db_id": "codebase_community",
        "question": "Provide the text of the latest 10 comments to the post with the title 'Predicting with both continuous and categorical features' and the display name of the user who left it. the latest comment refers to MAX(CreationDate);",
        "evidence": "the latest comment refers to MAX(CreationDate);",
        "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Predicting with both continuous and categorical features' ORDER BY T1.CreationDate DESC LIMIT 10",
        "difficulty": "simple",
        "raw_question": "Provide the text of the latest 10 comments to the post with the title 'Predicting with both continuous and categorical features' and the display name of the user who left it."
    },
    {
        "question_id": 1704,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Predicting with both continuous and categorical features'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Predicting with both continuous and categorical features'?"
    },
    {
        "question_id": 1705,
        "db_id": "codebase_community",
        "question": "What is the post ID and the comments commented in the post titled by \"Predicting with both continuous and categorical features\"? Title = 'Group differences on a five point Likert item';",
        "evidence": "Title = 'Group differences on a five point Likert item';",
        "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Predicting with both continuous and categorical features'",
        "difficulty": "simple",
        "raw_question": "What is the post ID and the comments commented in the post titled by \"Predicting with both continuous and categorical features\"?"
    },
    {
        "question_id": 1706,
        "db_id": "codebase_community",
        "question": "Who is the owner of the post \"Probability of at least one unique outcome\"? \"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
        "difficulty": "simple",
        "raw_question": "Who is the owner of the post \"Probability of at least one unique outcome\"?"
    },
    {
        "question_id": 1707,
        "db_id": "codebase_community",
        "question": "What is the display name of the user who last edited the post \"Probability of at least one unique outcome\"? \"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
        "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
        "difficulty": "simple",
        "raw_question": "What is the display name of the user who last edited the post \"Probability of at least one unique outcome\"?"
    },
    {
        "question_id": 1708,
        "db_id": "codebase_community",
        "question": "What is the location of the owner of the post \"Probability of at least one unique outcome\"? Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
        "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
        "difficulty": "simple",
        "raw_question": "What is the location of the owner of the post \"Probability of at least one unique outcome\"?"
    },
    {
        "question_id": 1709,
        "db_id": "codebase_community",
        "question": "How many views did the post titled 'Probability of at least one unique outcome' get? \"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
        "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Probability of at least one unique outcome'",
        "difficulty": "simple",
        "raw_question": "How many views did the post titled 'Probability of at least one unique outcome' get?"
    },
    {
        "question_id": 1710,
        "db_id": "codebase_community",
        "question": "Provide the last edit date and last edit user ID for the post \"Probability of at least one unique outcome\". Title = 'Detecting a given face in a database of facial images';",
        "evidence": "Title = 'Detecting a given face in a database of facial images';",
        "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Probability of at least one unique outcome'",
        "difficulty": "simple",
        "raw_question": "Provide the last edit date and last edit user ID for the post \"Probability of at least one unique outcome\"."
    },
    {
        "question_id": 1711,
        "db_id": "codebase_community",
        "question": "How many comments and answers were left by the users on the post with the title 'Probability of at least one unique outcome'?",
        "evidence": "",
        "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Probability of at least one unique outcome'",
        "difficulty": "simple",
        "raw_question": "How many comments and answers were left by the users on the post with the title 'Probability of at least one unique outcome'?"
    },
    {
        "question_id": 1712,
        "db_id": "card_games",
        "question": "Please list the name of the cards in the set Champs and States with the highest converted mana cost. card set Coldsnap refers to name = 'Coldsnap'",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Champs and States' ORDER BY T1.convertedManaCost DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Please list the name of the cards in the set Champs and States with the highest converted mana cost."
    },
    {
        "question_id": 1713,
        "db_id": "card_games",
        "question": "Which of these artists have designed a card in the set Champs and States, Jeremy Jarvis, Aaron Miller or Chippy? card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
        "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Champs and States' AND T1.artist = 'Chippy') OR (T2.name = 'Champs and States' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Champs and States' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
        "difficulty": "simple",
        "raw_question": "Which of these artists have designed a card in the set Champs and States, Jeremy Jarvis, Aaron Miller or Chippy?"
    },
    {
        "question_id": 1714,
        "db_id": "card_games",
        "question": "What is card number 4 in the set Champs and States? card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
        "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Champs and States' AND T1.number = 4",
        "difficulty": "simple",
        "raw_question": "What is card number 4 in the set Champs and States?"
    },
    {
        "question_id": 1715,
        "db_id": "card_games",
        "question": "For the set \"Champs and States\" , give its parent code. the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
        "SQL": "SELECT parentCode FROM sets WHERE name = 'Champs and States'",
        "difficulty": "simple",
        "raw_question": "For the set \"Champs and States\" , give its parent code."
    },
    {
        "question_id": 1716,
        "db_id": "superhero",
        "question": "List the superheroes from Marvel Comics who have the super power of 'Toxin and Disease Control'. the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
        "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
        "difficulty": "simple",
        "raw_question": "List the superheroes from Marvel Comics who have the super power of 'Toxin and Disease Control'."
    },
    {
        "question_id": 1717,
        "db_id": "superhero",
        "question": "What are the names of the superheroes with the power of Toxin and Disease Control? name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
        "difficulty": "simple",
        "raw_question": "What are the names of the superheroes with the power of Toxin and Disease Control?"
    },
    {
        "question_id": 1718,
        "db_id": "superhero",
        "question": "List the name of superheroes with Toxin and Disease Control power. name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
        "difficulty": "simple",
        "raw_question": "List the name of superheroes with Toxin and Disease Control power."
    },
    {
        "question_id": 1719,
        "db_id": "superhero",
        "question": "Provide superheroes' names who have the Toxin and Disease Control power. adaptation power refers to power_name = 'Adaptation';",
        "evidence": "adaptation power refers to power_name = 'Adaptation';",
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
        "difficulty": "simple",
        "raw_question": "Provide superheroes' names who have the Toxin and Disease Control power."
    },
    {
        "question_id": 1720,
        "db_id": "superhero",
        "question": "What is the power ID of Toxin and Disease Control? power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
        "SQL": "SELECT id FROM superpower WHERE power_name = 'Toxin and Disease Control'",
        "difficulty": "simple",
        "raw_question": "What is the power ID of Toxin and Disease Control?"
    },
    {
        "question_id": 1721,
        "db_id": "superhero",
        "question": "Identify the gender of the superhero who has the ability of Toxin and Disease Control. ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
        "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Toxin and Disease Control'",
        "difficulty": "simple",
        "raw_question": "Identify the gender of the superhero who has the ability of Toxin and Disease Control."
    },
    {
        "question_id": 1722,
        "db_id": "codebase_community",
        "question": "Please list the titles of the posts owned by the user blue and grey? \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "Please list the titles of the posts owned by the user blue and grey?"
    },
    {
        "question_id": 1723,
        "db_id": "codebase_community",
        "question": "What is the title of the post that is owned by blue and grey and has the highest popularity? \"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey' ORDER BY T1.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the title of the post that is owned by blue and grey and has the highest popularity?"
    },
    {
        "question_id": 1724,
        "db_id": "codebase_community",
        "question": "Please list the names of the badges obtained by blue and grey. \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the badges obtained by blue and grey."
    },
    {
        "question_id": 1725,
        "db_id": "codebase_community",
        "question": "List the title of posts which were edited by blue and grey. \"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "List the title of posts which were edited by blue and grey."
    },
    {
        "question_id": 1726,
        "db_id": "codebase_community",
        "question": "What is the name of badge that the user whose display name is \"blue and grey\" obtained?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "What is the name of badge that the user whose display name is \"blue and grey\" obtained?"
    },
    {
        "question_id": 1727,
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"blue and grey\" obtained. \"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "State the name of badge that the user whose display name is \"blue and grey\" obtained."
    },
    {
        "question_id": 1728,
        "db_id": "codebase_community",
        "question": "What is the name of tags used by blue and grey's? DisplayName = 'John Salvatier';",
        "evidence": "DisplayName = 'John Salvatier';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "What is the name of tags used by blue and grey's?"
    },
    {
        "question_id": 1729,
        "db_id": "codebase_community",
        "question": "Which post by blue and grey has the most answers count? State the post ID. most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by blue and grey has the most answers count? State the post ID."
    },
    {
        "question_id": 1730,
        "db_id": "codebase_community",
        "question": "Among posts by blue and grey and Noah Snyder, which one has higher popularity? Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among posts by blue and grey and Noah Snyder, which one has higher popularity?"
    },
    {
        "question_id": 1731,
        "db_id": "codebase_community",
        "question": "Which post by blue and grey has the most views? Please give the id and title of this post. DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'blue and grey' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by blue and grey has the most views? Please give the id and title of this post."
    },
    {
        "question_id": 1732,
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name blue and grey. the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the latest badge awarded to the user with the display name blue and grey."
    },
    {
        "question_id": 1733,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'blue and grey'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'blue and grey'?"
    },
    {
        "question_id": 1734,
        "db_id": "codebase_community",
        "question": "List the comments commented by the user with a username of blue and grey. comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
        "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
        "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "List the comments commented by the user with a username of blue and grey."
    },
    {
        "question_id": 1735,
        "db_id": "codebase_community",
        "question": "Please list the titles of the posts owned by the user Dazed and Confused? \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "Please list the titles of the posts owned by the user Dazed and Confused?"
    },
    {
        "question_id": 1736,
        "db_id": "codebase_community",
        "question": "What is the title of the post that is owned by Dazed and Confused and has the highest popularity? \"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused' ORDER BY T1.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the title of the post that is owned by Dazed and Confused and has the highest popularity?"
    },
    {
        "question_id": 1737,
        "db_id": "codebase_community",
        "question": "Please list the names of the badges obtained by Dazed and Confused. \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the badges obtained by Dazed and Confused."
    },
    {
        "question_id": 1738,
        "db_id": "codebase_community",
        "question": "For the user whose display name is \"Dazed and Confused\", what is his/her badge's name? \"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "For the user whose display name is \"Dazed and Confused\", what is his/her badge's name?"
    },
    {
        "question_id": 1739,
        "db_id": "codebase_community",
        "question": "What is the badge name that user 'Dazed and Confused' obtained? \"SilentGhost\" is the DisplayName of user;",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "What is the badge name that user 'Dazed and Confused' obtained?"
    },
    {
        "question_id": 1740,
        "db_id": "codebase_community",
        "question": "List the title of posts which were edited by Dazed and Confused. \"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "List the title of posts which were edited by Dazed and Confused."
    },
    {
        "question_id": 1741,
        "db_id": "codebase_community",
        "question": "What is the name of badge that the user whose display name is \"Dazed and Confused\" obtained?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "What is the name of badge that the user whose display name is \"Dazed and Confused\" obtained?"
    },
    {
        "question_id": 1742,
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"Dazed and Confused\" obtained. \"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "State the name of badge that the user whose display name is \"Dazed and Confused\" obtained."
    },
    {
        "question_id": 1743,
        "db_id": "codebase_community",
        "question": "What is the name of tags used by Dazed and Confused's? DisplayName = 'John Salvatier';",
        "evidence": "DisplayName = 'John Salvatier';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "What is the name of tags used by Dazed and Confused's?"
    },
    {
        "question_id": 1744,
        "db_id": "codebase_community",
        "question": "Which post by Dazed and Confused has the most answers count? State the post ID. most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Dazed and Confused has the most answers count? State the post ID."
    },
    {
        "question_id": 1745,
        "db_id": "codebase_community",
        "question": "Among posts by Dazed and Confused and Noah Snyder, which one has higher popularity? Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among posts by Dazed and Confused and Noah Snyder, which one has higher popularity?"
    },
    {
        "question_id": 1746,
        "db_id": "codebase_community",
        "question": "Which post by Dazed and Confused has the most views? Please give the id and title of this post. DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Dazed and Confused' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Dazed and Confused has the most views? Please give the id and title of this post."
    },
    {
        "question_id": 1747,
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name Dazed and Confused. the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the latest badge awarded to the user with the display name Dazed and Confused."
    },
    {
        "question_id": 1748,
        "db_id": "codebase_community",
        "question": "How long did it take the user, known by his or her display name 'Dazed and Confused' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "How long did it take the user, known by his or her display name 'Dazed and Confused' to get the badge? Count from the date the user's account was created."
    },
    {
        "question_id": 1749,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Dazed and Confused'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'Dazed and Confused'?"
    },
    {
        "question_id": 1750,
        "db_id": "codebase_community",
        "question": "When did the user known as 'Dazed and Confused' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Dazed and Confused'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'Dazed and Confused' create his or her account?"
    },
    {
        "question_id": 1751,
        "db_id": "codebase_community",
        "question": "Please list the titles of the posts owned by the user Ben Smiley? \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "Please list the titles of the posts owned by the user Ben Smiley?"
    },
    {
        "question_id": 1752,
        "db_id": "codebase_community",
        "question": "What is the title of the post that is owned by Ben Smiley and has the highest popularity? \"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley' ORDER BY T1.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the title of the post that is owned by Ben Smiley and has the highest popularity?"
    },
    {
        "question_id": 1753,
        "db_id": "codebase_community",
        "question": "Please list the names of the badges obtained by Ben Smiley. \"csgillespie\" is the DisplayName of user",
        "evidence": "\"csgillespie\" is the DisplayName of user",
        "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "Please list the names of the badges obtained by Ben Smiley."
    },
    {
        "question_id": 1754,
        "db_id": "codebase_community",
        "question": "For the user whose display name is \"Ben Smiley\", what is his/her badge's name? \"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "For the user whose display name is \"Ben Smiley\", what is his/her badge's name?"
    },
    {
        "question_id": 1755,
        "db_id": "codebase_community",
        "question": "What is the badge name that user 'Ben Smiley' obtained? \"SilentGhost\" is the DisplayName of user;",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "What is the badge name that user 'Ben Smiley' obtained?"
    },
    {
        "question_id": 1756,
        "db_id": "codebase_community",
        "question": "List the title of posts which were edited by Ben Smiley. \"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
        "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "List the title of posts which were edited by Ben Smiley."
    },
    {
        "question_id": 1757,
        "db_id": "codebase_community",
        "question": "What is the name of badge that the user whose display name is \"Ben Smiley\" obtained?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "What is the name of badge that the user whose display name is \"Ben Smiley\" obtained?"
    },
    {
        "question_id": 1758,
        "db_id": "codebase_community",
        "question": "State the name of badge that the user whose display name is \"Ben Smiley\" obtained. \"Sharpie\" is the DisplayName of user; user refers to UserId",
        "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "State the name of badge that the user whose display name is \"Ben Smiley\" obtained."
    },
    {
        "question_id": 1759,
        "db_id": "codebase_community",
        "question": "What is the name of tags used by Ben Smiley's? DisplayName = 'John Salvatier';",
        "evidence": "DisplayName = 'John Salvatier';",
        "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "What is the name of tags used by Ben Smiley's?"
    },
    {
        "question_id": 1760,
        "db_id": "codebase_community",
        "question": "Which post by Ben Smiley has the most answers count? State the post ID. most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
        "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley' ORDER BY T3.AnswerCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Ben Smiley has the most answers count? State the post ID."
    },
    {
        "question_id": 1761,
        "db_id": "codebase_community",
        "question": "Among posts by Ben Smiley and Noah Snyder, which one has higher popularity? Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Among posts by Ben Smiley and Noah Snyder, which one has higher popularity?"
    },
    {
        "question_id": 1762,
        "db_id": "codebase_community",
        "question": "Which post by Ben Smiley has the most views? Please give the id and title of this post. DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
        "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Ben Smiley' ORDER BY T2.ViewCount DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Which post by Ben Smiley has the most views? Please give the id and title of this post."
    },
    {
        "question_id": 1763,
        "db_id": "codebase_community",
        "question": "Identify the latest badge awarded to the user with the display name Ben Smiley. the latest badge refers to Name FROM badges where MAX(Date);",
        "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
        "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley' ORDER BY T1.Date DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "Identify the latest badge awarded to the user with the display name Ben Smiley."
    },
    {
        "question_id": 1764,
        "db_id": "codebase_community",
        "question": "How long did it take the user, known by his or her display name 'Ben Smiley' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "How long did it take the user, known by his or her display name 'Ben Smiley' to get the badge? Count from the date the user's account was created."
    },
    {
        "question_id": 1765,
        "db_id": "codebase_community",
        "question": "What is the reputation and view count of the user, who is known by his or her display name 'Ben Smiley'?",
        "evidence": "",
        "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "What is the reputation and view count of the user, who is known by his or her display name 'Ben Smiley'?"
    },
    {
        "question_id": 1766,
        "db_id": "codebase_community",
        "question": "When did the user known as 'Ben Smiley' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Ben Smiley'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'Ben Smiley' create his or her account?"
    },
    {
        "question_id": 1767,
        "db_id": "codebase_community",
        "question": "List out the dates that users who are located in Some where between this world and the other obtained their badges? \"Rochester, NY\" is the Location of user; user refers to UserId",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Some where between this world and the other'",
        "difficulty": "simple",
        "raw_question": "List out the dates that users who are located in Some where between this world and the other obtained their badges?"
    },
    {
        "question_id": 1768,
        "db_id": "codebase_community",
        "question": "List out the age of users who located in Some where between this world and the other obtained the badge? \"Vienna, Austria\" is the Location",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Some where between this world and the other'",
        "difficulty": "simple",
        "raw_question": "List out the age of users who located in Some where between this world and the other obtained the badge?"
    },
    {
        "question_id": 1769,
        "db_id": "codebase_community",
        "question": "Provide the badge names received in 2011 for the user whose location is in the Some where between this world and the other. received in 2011 refers to year(Date) = 2011;",
        "evidence": "received in 2011 refers to year(Date) = 2011;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'Some where between this world and the other'",
        "difficulty": "simple",
        "raw_question": "Provide the badge names received in 2011 for the user whose location is in the Some where between this world and the other."
    },
    {
        "question_id": 1770,
        "db_id": "codebase_community",
        "question": "List out the dates that users who are located in University of Texas at Austin obtained their badges? \"Rochester, NY\" is the Location of user; user refers to UserId",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'University of Texas at Austin'",
        "difficulty": "simple",
        "raw_question": "List out the dates that users who are located in University of Texas at Austin obtained their badges?"
    },
    {
        "question_id": 1771,
        "db_id": "codebase_community",
        "question": "List out the age of users who located in University of Texas at Austin obtained the badge? \"Vienna, Austria\" is the Location",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'University of Texas at Austin'",
        "difficulty": "simple",
        "raw_question": "List out the age of users who located in University of Texas at Austin obtained the badge?"
    },
    {
        "question_id": 1772,
        "db_id": "thrombosis_prediction",
        "question": "Lists all patients by ID who were diagnosed with Photosensitivities's and had their exams between 01/01/197 and 12/31/1997. 'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
        "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Photosensitivities'",
        "difficulty": "simple",
        "raw_question": "Lists all patients by ID who were diagnosed with Photosensitivities's and had their exams between 01/01/197 and 12/31/1997."
    },
    {
        "question_id": 1773,
        "db_id": "superhero",
        "question": "What is the superpowers of the superhero has Moses Magnum as their full name? superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Moses Magnum'",
        "difficulty": "simple",
        "raw_question": "What is the superpowers of the superhero has Moses Magnum as their full name?"
    },
    {
        "question_id": 1774,
        "db_id": "cre_Doc_and_collections",
        "question": "List all owner of documents that is related to documents owned by Ransom.",
        "evidence": "",
        "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Ransom';",
        "difficulty": "simple",
        "raw_question": "List all owner of documents that is related to documents owned by Ransom."
    },
    {
        "question_id": 1775,
        "db_id": "thrombosis_prediction",
        "question": "What is the most common sign of patients with collagen disease disease? the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
        "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'collagen disease' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
        "difficulty": "simple",
        "raw_question": "What is the most common sign of patients with collagen disease disease?"
    },
    {
        "question_id": 1776,
        "db_id": "codebase_community",
        "question": "For the user whose display name is \"blue and grey\", what is his/her badge's name? \"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "For the user whose display name is \"blue and grey\", what is his/her badge's name?"
    },
    {
        "question_id": 1777,
        "db_id": "codebase_community",
        "question": "What is the badge name that user 'blue and grey' obtained? \"SilentGhost\" is the DisplayName of user;",
        "evidence": "\"SilentGhost\" is the DisplayName of user;",
        "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "What is the badge name that user 'blue and grey' obtained?"
    },
    {
        "question_id": 1778,
        "db_id": "codebase_community",
        "question": "Write all comments made by user 'blue and grey.' \"A Lion\" is the DisplayName of user; comment refers to Text",
        "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
        "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "Write all comments made by user 'blue and grey.'"
    },
    {
        "question_id": 1779,
        "db_id": "codebase_community",
        "question": "How long did it take the user, known by his or her display name 'blue and grey' to get the badge? Count from the date the user's account was created. SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
        "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "How long did it take the user, known by his or her display name 'blue and grey' to get the badge? Count from the date the user's account was created."
    },
    {
        "question_id": 1780,
        "db_id": "codebase_community",
        "question": "When did the user known as 'blue and grey' create his or her account? DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
        "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'blue and grey'",
        "difficulty": "simple",
        "raw_question": "When did the user known as 'blue and grey' create his or her account?"
    },
    {
        "question_id": 1781,
        "db_id": "codebase_community",
        "question": "List out the dates that users who are located in Bizarre and beautiful world obtained their badges? \"Rochester, NY\" is the Location of user; user refers to UserId",
        "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
        "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
        "difficulty": "simple",
        "raw_question": "List out the dates that users who are located in Bizarre and beautiful world obtained their badges?"
    },
    {
        "question_id": 1782,
        "db_id": "codebase_community",
        "question": "List out the age of users who located in Bizarre and beautiful world obtained the badge? \"Vienna, Austria\" is the Location",
        "evidence": "\"Vienna, Austria\" is the Location",
        "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
        "difficulty": "simple",
        "raw_question": "List out the age of users who located in Bizarre and beautiful world obtained the badge?"
    }
]