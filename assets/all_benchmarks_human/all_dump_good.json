[
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Intelligence",
        "condition": "="
      },
      {
        "table": "hero_attribute",
        "column": "attribute_value",
        "value": "50",
        "condition": "<"
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
    "values_list": [
      "attribute.attribute_name.intelligence",
      "hero_attribute.attribute_value.50"
    ],
    "original_question": "Which superheroes have a durability attribute value of less than 50?",
    "question": "Which superheroes have a Int. attribute value of less than 50?",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "changes_information": {
      "original_value": "Intelligence",
      "abbreviation_acronym": "Int."
    },
    "new_question_correct_value": "Which superheroes have a Intelligence attribute value of less than 50?"
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.full_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Intelligence",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "values_list": [
      "attribute.attribute_name.intelligence"
    ],
    "original_question": "What is the hero's full name with the highest attribute in strength?",
    "question": "What is the hero's full name with the highest attribute in Int.?",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Intelligence",
      "abbreviation_acronym": "Int."
    },
    "new_question_correct_value": "What is the hero's full name with the highest attribute in Intelligence?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Dark Horse Comics",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Intelligence",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.intelligence"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most Int. published by Dark Horse Comics?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Intelligence",
      "abbreviation_acronym": "Int."
    },
    "new_question_correct_value": "Which superhero has the most Intelligence published by Dark Horse Comics?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Fav Question.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Favorite Question",
      "abbreviation_acronym": "Fav Question"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Favorite Question.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Fav Question Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Favorite Question",
      "abbreviation_acronym": "Fav Question"
    },
    "new_question_correct_value": "List all the name of users that obtained the Favorite Question Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Fav Question badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Favorite Question",
      "abbreviation_acronym": "Fav Question"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Favorite Question badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Fav Question badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Favorite Question",
      "abbreviation_acronym": "Fav Question"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Favorite Question badge?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'RA.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Research Assistant",
      "abbreviation_acronym": "RA"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Research Assistant.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the RA Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Research Assistant",
      "abbreviation_acronym": "RA"
    },
    "new_question_correct_value": "List all the name of users that obtained the Research Assistant Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the RA badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Research Assistant",
      "abbreviation_acronym": "RA"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Research Assistant badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first RA badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Research Assistant",
      "abbreviation_acronym": "RA"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Research Assistant badge?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on food in September Meeting?",
    "question": "How much did the Student_Club members spend on Ad in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "abbreviation_acronym": "Ad"
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "question": "How much did the Student_Club members spend on Ad in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "abbreviation_acronym": "Ad"
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Advertisement' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Advertisement' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.advertisement",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Ad\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Advertisement",
      "abbreviation_acronym": "Ad"
    },
    "new_question_correct_value": "With the biggest budget for the \"Advertisement\", what was the remaining of it?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Ad.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Advertisement",
      "abbreviation_acronym": "Ad"
    },
    "new_question_correct_value": "Name the event with the highest amount spent on Advertisement."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Advertisement' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.category",
      "budget.link_to_event",
      "budget.budget_id",
      "expense.link_to_budget",
      "event.event_id"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the name of events with less than average parking cost.",
    "question": "List the name of events with less than average Ad cost.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "changes_information": {
      "original_value": "Advertisement",
      "abbreviation_acronym": "Ad"
    },
    "new_question_correct_value": "List the name of events with less than average Advertisement cost."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Ad.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Advertisement",
      "abbreviation_acronym": "Ad"
    },
    "new_question_correct_value": "List the event names which were budgeted for the Advertisement."
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Ad and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Advertisement",
      "abbreviation_acronym": "Ad"
    },
    "new_question_correct_value": "Calculate the total amount spent on Advertisement and list the name of the event they were spent on."
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Richard Wright'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by R Wright.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Richard Wright."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Richard Wright'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by R Wright cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Richard Wright cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Richard Wright' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from R Wright artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    },
    "new_question_correct_value": "Is there any card from Richard Wright artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Richard Wright'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that R Wright created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    },
    "new_question_correct_value": "What kind of printing is on the card that Richard Wright created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Richard Wright' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by R Wright? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Richard Wright? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Richard Wright'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards R Wright worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    },
    "new_question_correct_value": "List all the frame styles and cards Richard Wright worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Monte Michael Moore'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Monte M. Moore.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Monte Michael Moore."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Monte Michael Moore'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Monte M. Moore cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Monte Michael Moore cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Monte Michael Moore' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Monte M. Moore artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    },
    "new_question_correct_value": "Is there any card from Monte Michael Moore artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Monte Michael Moore'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Monte M. Moore created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    },
    "new_question_correct_value": "What kind of printing is on the card that Monte Michael Moore created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Monte Michael Moore' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Monte M. Moore? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Monte Michael Moore? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Monte Michael Moore'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Monte M. Moore worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    },
    "new_question_correct_value": "List all the frame styles and cards Monte Michael Moore worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Level Up'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Level Up",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.level_up"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of LV Up?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Level Up",
      "abbreviation_acronym": "LV Up"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Level Up?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Deal Damage'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Deal Damage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Deal DMG'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Deal Damage",
      "abbreviation_acronym": "Deal DMG"
    },
    "new_question_correct_value": "What is the keyword found on card 'Deal Damage'?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Deal Damage'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Deal Damage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Deal DMG\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Deal Damage",
      "abbreviation_acronym": "Deal DMG"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Deal Damage\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Deal Damage'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Deal Damage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Deal DMG\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Deal Damage",
      "abbreviation_acronym": "Deal DMG"
    },
    "new_question_correct_value": "Did the set of cards with \"Deal Damage\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Deal Damage'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Deal Damage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.deal_damage"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Deal DMG\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Deal Damage",
      "abbreviation_acronym": "Deal DMG"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Deal Damage\" in it?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Defense of the Heart'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Def of the Heart'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "What is the keyword found on card 'Defense of the Heart'?"
  },
  {
    "SQL": "SELECT promoTypes FROM cards WHERE name = 'Defense of the Heart' AND promoTypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
    "values_list": [
      "cards.name.defense_of_the_heart"
    ],
    "original_question": "What type of promotion is of card 'Duress'?",
    "question": "What type of promotion is of card 'Def of the Heart'?",
    "original_SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "What type of promotion is of card 'Defense of the Heart'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.defense_of_the_heart"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Def of the Heart\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Defense of the Heart\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Def of the Heart\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "What is the status of card \"Defense of the Heart\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Def of the Heart\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "What is the type of card \"Defense of the Heart\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Def of the Heart\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "What is the rule of playing card \"Defense of the Heart\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Def of the Heart.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "Write down the ruling of Defense of the Heart."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Defense of the Heart'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Def of the Heart\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Defense of the Heart\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Def of the Heart\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "Did the set of cards with \"Defense of the Heart\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.defense_of_the_heart"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Def of the Heart' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "When was the ruling for the card 'Defense of the Heart' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.defense_of_the_heart"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Def of the Heart\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Defense of the Heart\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Defense of the Heart' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Def of the Heart\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Defense of the Heart\" is in?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Precinct Captain'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Precinct Capt'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    },
    "new_question_correct_value": "What is the keyword found on card 'Precinct Captain'?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Precinct Capt\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    },
    "new_question_correct_value": "What is the status of card \"Precinct Captain\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Precinct Capt\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    },
    "new_question_correct_value": "What is the type of card \"Precinct Captain\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Precinct Capt\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    },
    "new_question_correct_value": "What is the rule of playing card \"Precinct Captain\"?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Precinct Captain'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Precinct Capt\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Precinct Captain\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Precinct Capt\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    },
    "new_question_correct_value": "Did the set of cards with \"Precinct Captain\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.precinct_captain"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Precinct Capt\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Precinct Captain\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Precinct Captain' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Precinct Capt\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Precinct Captain\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Precinct Captain' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Precinct Capt\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Precinct Captain\" is in it."
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Permanent'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Enchant Permanent",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Enchant Perm and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Enchant Permanent",
      "abbreviation_acronym": "Enchant Perm"
    },
    "new_question_correct_value": "List down the name of cards with original types of Enchant Permanent and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'New York State'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "New York State",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.new_york_state"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in NY State.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "New York State",
      "abbreviation_acronym": "NY State"
    },
    "new_question_correct_value": "Please list the year during which the race is held on circuits in New York State."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Bahrain Intl Circuit be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Bahrain International Circuit be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Bahrain Intl Circuit?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Bahrain International Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Bahrain Intl Circuit.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    },
    "new_question_correct_value": "Please list the time of the races held on Bahrain International Circuit."
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Bahrain International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Bahrain Intl Circuit?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    },
    "new_question_correct_value": "What's the location coordinates of Bahrain International Circuit?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Bahrain International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Bahrain Intl Circuit?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    },
    "new_question_correct_value": "What's the reference name of Bahrain International Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Bahrain Intl Circuit was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    },
    "new_question_correct_value": "Please list all the years that Bahrain International Circuit was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Bahrain Intl Circuit.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Bahrain International Circuit."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Bahrain International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.bahrain_international_circuit"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Bahrain Intl Circuit circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    },
    "new_question_correct_value": "In which location does the Bahrain International Circuit circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Okayama Intl Circuit be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Okayama International Circuit be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Okayama Intl Circuit?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Okayama International Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Okayama Intl Circuit.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    },
    "new_question_correct_value": "Please list the time of the races held on Okayama International Circuit."
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Okayama International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Okayama Intl Circuit?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    },
    "new_question_correct_value": "What's the location coordinates of Okayama International Circuit?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Okayama International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Okayama Intl Circuit?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    },
    "new_question_correct_value": "What's the reference name of Okayama International Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Okayama Intl Circuit was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    },
    "new_question_correct_value": "Please list all the years that Okayama International Circuit was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Okayama Intl Circuit.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Okayama International Circuit."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Okayama International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.okayama_international_circuit"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Okayama Intl Circuit circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    },
    "new_question_correct_value": "In which location does the Okayama International Circuit circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'New Zealand' ORDER BY T2.points DESC LIMIT 1",
    "tables": [
      "constructors",
      "constructorstandings"
    ],
    "columns": [
      "constructorstandings.constructorid",
      "constructors.nationality",
      "constructorstandings.points",
      "constructors.constructorid",
      "constructors.url"
    ],
    "values": [
      {
        "table": "constructors",
        "column": "nationality",
        "value": "New Zealand",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction website refers to url; Italian is a nationality",
    "values_list": [
      "constructors.nationality.new_zealand"
    ],
    "original_question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
    "question": "Which of the NZ constructor got the highest point to date? Give its introduction website?",
    "original_SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
    "changes_information": {
      "original_value": "New Zealand",
      "abbreviation_acronym": "NZ"
    },
    "new_question_correct_value": "Which of the New Zealand constructor got the highest point to date? Give its introduction website?"
  },
  {
    "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' ORDER BY T1.date ASC LIMIT 1",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "account.account_id",
      "account.district_id",
      "district.a3",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "north Bohemia",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "A3 stands for region names",
    "values_list": [
      "district.a3.north_bohemia"
    ],
    "original_question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
    "question": "For the first client who opened his/her account in N Bohemia, what is his/her account ID?",
    "original_SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
    "changes_information": {
      "original_value": "north Bohemia",
      "abbreviation_acronym": "N Bohemia"
    },
    "new_question_correct_value": "For the first client who opened his/her account in north Bohemia, what is his/her account ID?"
  },
  {
    "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "tables": [
      "district",
      "client"
    ],
    "columns": [
      "client.gender",
      "client.district_id",
      "district.a4",
      "district.a3",
      "district.district_id",
      "client.client_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "north Bohemia",
        "condition": "="
      },
      {
        "table": "client",
        "column": "gender",
        "value": "M",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
    "values_list": [
      "district.a3.south bohemia",
      "client.gender.m"
    ],
    "original_question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "question": "For the branch which located in the N Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "original_SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "changes_information": {
      "original_value": "north Bohemia",
      "abbreviation_acronym": "N Bohemia"
    },
    "new_question_correct_value": "For the branch which located in the north Bohemia with biggest number of inhabitants, what is the percentage of the male clients?"
  },
  {
    "SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "account.frequency",
      "account.account_id",
      "account.district_id",
      "district.a3",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "north Bohemia",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "Accounts holder refers to the person who own this account.",
    "values_list": [
      "district.a3.east bohemia"
    ],
    "original_question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
    "question": "From Year 1995 to 2000, who are the accounts holders from 'N Bohemia'. State the account ID the frequency of statement issuance.",
    "original_SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
    "changes_information": {
      "original_value": "north Bohemia",
      "abbreviation_acronym": "N Bohemia"
    },
    "new_question_correct_value": "From Year 1995 to 2000, who are the accounts holders from 'north Bohemia'. State the account ID the frequency of statement issuance."
  },
  {
    "SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'north Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
    "tables": [
      "disp",
      "district",
      "client",
      "account"
    ],
    "columns": [
      "client.district_id",
      "disp.account_id",
      "account.account_id",
      "disp.client_id",
      "account.district_id",
      "district.a3",
      "client.birth_date",
      "district.district_id",
      "client.client_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "north Bohemia",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "district.a3.east bohemia"
    ],
    "original_question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
    "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in N Bohemia, along with their IDs.",
    "original_SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
    "changes_information": {
      "original_value": "north Bohemia",
      "abbreviation_acronym": "N Bohemia"
    },
    "new_question_correct_value": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in north Bohemia, along with their IDs."
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Ransom Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What is the owner of document with the Description 'Braeden Collection'?",
    "question": "What is the owner of document with the Description 'Ransom Coll'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Ransom Collection",
      "abbreviation_acronym": "Ransom Coll"
    },
    "new_question_correct_value": "What is the owner of document with the Description 'Ransom Collection'?"
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Ransom Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "question": "What are the owners of the document objects described as the 'Ransom Coll'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Ransom Collection",
      "abbreviation_acronym": "Ransom Coll"
    },
    "new_question_correct_value": "What are the owners of the document objects described as the 'Ransom Collection'?"
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'March Meeting'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"Mar Meeting\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "March Meeting",
      "abbreviation_acronym": "Mar Meeting"
    },
    "new_question_correct_value": "Give the location for \"March Meeting\"."
  },
  {
    "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "values_list": [
      "event.event_name.april speaker"
    ],
    "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "question": "Calculate the amount budgeted for 'Mar Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "changes_information": {
      "original_value": "March Meeting",
      "abbreviation_acronym": "Mar Meeting"
    },
    "new_question_correct_value": "Calculate the amount budgeted for 'March Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'Mar Meeting' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "March Meeting",
      "abbreviation_acronym": "Mar Meeting"
    },
    "new_question_correct_value": "What category was budgeted for the 'March Meeting' event and how much was the amount budgeted for that category?"
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.first_name",
      "attendance.link_to_member",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Laugh Out Loud",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
    "values_list": [
      "event.event_name.laugh out loud"
    ],
    "original_question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "question": "List the full name of all the members of the Student_Club who attended the \"LOL\" event.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "changes_information": {
      "original_value": "Laugh Out Loud",
      "abbreviation_acronym": "LOL"
    },
    "new_question_correct_value": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event."
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'Laugh Out Loud'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Laugh Out Loud",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"LOL\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "Laugh Out Loud",
      "abbreviation_acronym": "LOL"
    },
    "new_question_correct_value": "Give the location for \"Laugh Out Loud\"."
  },
  {
    "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Laugh Out Loud'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "attendance.link_to_member",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Laugh Out Loud",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'October Meeting' is an event name;",
    "values_list": [
      "event.event_name.october meeting"
    ],
    "original_question": "List all the members who attended the event \"October Meeting\".",
    "question": "List all the members who attended the event \"LOL\".",
    "original_SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
    "changes_information": {
      "original_value": "Laugh Out Loud",
      "abbreviation_acronym": "LOL"
    },
    "new_question_correct_value": "List all the members who attended the event \"Laugh Out Loud\"."
  },
  {
    "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Laugh Out Loud' AND T1.major_name = 'Interior Design'",
    "tables": [
      "member",
      "event",
      "major",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.link_to_major",
      "member.first_name",
      "attendance.link_to_member",
      "major.major_id",
      "major.major_name",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Laugh Out Loud",
        "condition": "="
      },
      {
        "table": "major",
        "column": "major_name",
        "value": "Interior Design",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
    "values_list": [
      "event.event_name.community theater",
      "major.major_name.interior design"
    ],
    "original_question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "question": "Among the students majored in interior design, who have attended the LOL event?",
    "original_SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "changes_information": {
      "original_value": "Laugh Out Loud",
      "abbreviation_acronym": "LOL"
    },
    "new_question_correct_value": "Among the students majored in interior design, who have attended the Laugh Out Loud event?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in Chinese Simp..",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    },
    "new_question_correct_value": "Name all the cards which have alternative language in Chinese Simplified."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Phyrexian' is the language; name of artists refers to artist;",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "question": "Please provide the names of the artists who illustrated the card art in Chinese Simp..",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    },
    "new_question_correct_value": "Please provide the names of the artists who illustrated the card art in Chinese Simplified."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in Chinese Simp..",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    },
    "new_question_correct_value": "List down the name of artists for cards in Chinese Simplified."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and Chinese Simp. language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    },
    "new_question_correct_value": "What are the cards that only available in paper and Chinese Simplified language?"
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Chinese Simplified'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.chinese_simplified",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in Chinese Simp.. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    },
    "new_question_correct_value": "Calculate the percentage of cards in Chinese Simplified. List them by name."
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Chinese Simp..",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    },
    "new_question_correct_value": "Lists all types of cards in Chinese Simplified."
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Chinese Simp. text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    },
    "new_question_correct_value": "Please list the Chinese Simplified text ruling of all the cards in the set Coldsnap."
  },
  {
    "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified' ORDER BY T2.convertedManaCost DESC",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the Chinese Simp. names of the cards in the set Coldsnap with the highest converted mana cost.",
    "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    },
    "new_question_correct_value": "Please list the Chinese Simplified names of the cards in the set Coldsnap with the highest converted mana cost."
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Incorporation'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Incorporation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Inc.\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Incorporation",
      "abbreviation_acronym": "Inc."
    },
    "new_question_correct_value": "Which foreign language used by \"Incorporation\"?"
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Lieutenant du consul'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Lieutenant du consul",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Lt du consul\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Lieutenant du consul",
      "abbreviation_acronym": "Lt du consul"
    },
    "new_question_correct_value": "Which foreign language used by \"Lieutenant du consul\"?"
  },
  {
    "SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
    "tables": [
      "gasstations"
    ],
    "columns": [
      "gasstations.segment",
      "gasstations.gasstationid"
    ],
    "values": [
      {
        "table": "gasstations",
        "column": "segment",
        "value": "Value for money",
        "condition": "="
      },
      {
        "table": "",
        "column": "segment",
        "value": "Value for money",
        "condition": "="
      },
      {
        "table": "",
        "column": "segment",
        "value": "Value for money",
        "condition": "="
      }
    ],
    "db_id": "debit_card_specializing",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "gasstations.segment.value for money",
      ".segment.value for money",
      ".segment.value for money"
    ],
    "original_question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
    "question": "Which country has more \"VFM\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
    "original_SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Value for money",
      "abbreviation_acronym": "VFM"
    },
    "new_question_correct_value": "Which country has more \"Value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country."
  },
  {
    "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'England Premier League'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "league.country_id",
      "league.name",
      "country.id"
    ],
    "values": [
      {
        "table": "league",
        "column": "name",
        "value": "England Premier League",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
    "values_list": [
      "league.name.italy serie a"
    ],
    "original_question": "Which country is the league Italy Serie A from?",
    "question": "Which country is the league EPL from?",
    "original_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
    "changes_information": {
      "original_value": "England Premier League",
      "abbreviation_acronym": "EPL"
    },
    "new_question_correct_value": "Which country is the league England Premier League from?"
  },
  {
    "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'England Premier League'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "league.country_id",
      "league.name",
      "country.id"
    ],
    "values": [
      {
        "table": "league",
        "column": "name",
        "value": "England Premier League",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
    "values_list": [
      "league.name.belgium jupiler league"
    ],
    "original_question": "Which country is the Belgium Jupiler League from?",
    "question": "Which country is the EPL from?",
    "original_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
    "changes_information": {
      "original_value": "England Premier League",
      "abbreviation_acronym": "EPL"
    },
    "new_question_correct_value": "Which country is the England Premier League from?"
  },
  {
    "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "major.major_id",
      "member.position",
      "major.college"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "LIKE"
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Vice President is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "Which college is the vice president of the Student_Club from?",
    "question": "Which college is the VP of the Student_Club from?",
    "original_SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "Which college is the Vice President of the Student_Club from?"
  },
  {
    "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "income"
    ],
    "columns": [
      "income.link_to_member",
      "member.member_id",
      "member.position",
      "income.amount"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "What is the amount of the funds that the Vice President received?",
    "question": "What is the amount of the funds that the VP received?",
    "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "What is the amount of the funds that the Vice President received?"
  },
  {
    "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "zip_code"
    ],
    "columns": [
      "zip_code.zip_code",
      "zip_code.state",
      "zip_code.city",
      "member.position",
      "member.zip"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club;",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "What city and state did the President of the Student_Club grow up?",
    "question": "What city and state did the VP of the Student_Club grow up?",
    "original_SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "What city and state did the Vice President of the Student_Club grow up?"
  },
  {
    "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the major name for the Vice President of the club.",
    "question": "State the major name for the VP of the club.",
    "original_SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "State the major name for the Vice President of the club."
  },
  {
    "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.department",
      "major.major_id",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "Which department was the President of the club in?",
    "question": "Which department was the VP of the club in?",
    "original_SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "Which department was the Vice President of the club in?"
  },
  {
    "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "expense"
    ],
    "columns": [
      "expense.link_to_member",
      "member.member_id",
      "member.position",
      "expense.expense_id",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "List all the expenses incurred by the vice president.",
    "question": "List all the expenses incurred by the VP.",
    "original_SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "List all the expenses incurred by the Vice President."
  },
  {
    "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Vice President'",
    "tables": [
      "member"
    ],
    "columns": [
      "member.email",
      "member.first_name",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
    "question": "Provide the full name and email address of the Student_Club's VP.",
    "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "Provide the full name and email address of the Student_Club's Vice President."
  },
  {
    "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the name of major that Vice President has joined.",
    "question": "State the name of major that VP has joined.",
    "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "State the name of major that Vice President has joined."
  },
  {
    "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "event.type",
      "attendance.link_to_member",
      "member.position",
      "event.event_id",
      "event.location"
    ],
    "values": [
      {
        "table": "event",
        "column": "type",
        "value": "Social",
        "condition": "="
      },
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      },
      {
        "table": "event",
        "column": "location",
        "value": "900 E. Washington St.",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
    "values_list": [
      "event.type.social",
      "member.position.vice president",
      "event.location.900 e. washington st."
    ],
    "original_question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "question": "What is the name of the social event that was attended by the VP of the Student_Club located at 900 E. Washington St.?",
    "original_SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "What is the name of the social event that was attended by the Vice President of the Student_Club located at 900 E. Washington St.?"
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.major_id",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last name",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "question": "Write the full name of the club member with the position of 'VP' and list which college the club member belongs to.",
    "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    },
    "new_question_correct_value": "Write the full name of the club member with the position of 'Vice President' and list which college the club member belongs to."
  },
  {
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Central City District Residential Museum'",
    "tables": [
      "museum"
    ],
    "columns": [
      "museum.num_of_staff",
      "museum.name",
      "museum.open_year"
    ],
    "values": [
      {
        "table": "museum",
        "column": "name",
        "value": "Central City District Residential Museum",
        "condition": "="
      }
    ],
    "db_id": "museum_visit",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "museum.name.plaza museum"
    ],
    "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "question": "What are the opening year and staff number of the museum named CCD Residential Museum?",
    "original_SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "changes_information": {
      "original_value": "Central City District Residential Museum",
      "abbreviation_acronym": "CCD Residential Museum"
    },
    "new_question_correct_value": "What are the opening year and staff number of the museum named Central City District Residential Museum?"
  },
  {
    "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Vermont'",
    "tables": [
      "owners",
      "dogs"
    ],
    "columns": [
      "owners.state",
      "dogs.owner_id",
      "dogs.name",
      "owners.first_name",
      "owners.owner_id"
    ],
    "values": [
      {
        "table": "owners",
        "column": "state",
        "value": "Vermont",
        "condition": "="
      }
    ],
    "db_id": "dog_kennels",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "owners.state.vermont"
    ],
    "original_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "question": "Which dogs are owned by someone who lives in VT? List the owner's first name and the dog's name.",
    "original_SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "changes_information": {
      "original_value": "Vermont",
      "abbreviation_acronym": "VT"
    },
    "new_question_correct_value": "Which dogs are owned by someone who lives in Vermont? List the owner's first name and the dog's name."
  },
  {
    "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Vermont'",
    "tables": [
      "owners",
      "dogs"
    ],
    "columns": [
      "owners.state",
      "dogs.owner_id",
      "dogs.name",
      "owners.first_name",
      "owners.owner_id"
    ],
    "values": [
      {
        "table": "owners",
        "column": "state",
        "value": "Vermont",
        "condition": "="
      }
    ],
    "db_id": "dog_kennels",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "owners.state.vermont"
    ],
    "original_question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "question": "Find the first names of owners living in VT and the names of dogs they own.",
    "original_SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "changes_information": {
      "original_value": "Vermont",
      "abbreviation_acronym": "VT"
    },
    "new_question_correct_value": "Find the first names of owners living in Vermont and the names of dogs they own."
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Adrian R. Centurion?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Adrian Ricardo Centurion?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.heading_accuracy",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "values_list": [
      "player.player_name.francois affolter"
    ],
    "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "question": "What is the football player Adrian R. Centurion header's finishing rate on 18/09/2014?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    },
    "new_question_correct_value": "What is the football player Adrian Ricardo Centurion header's finishing rate on 18/09/2014?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Adrian R. Centurion\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Adrian Ricardo Centurion\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Adrian R. Centurion's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    },
    "new_question_correct_value": "What is Adrian Ricardo Centurion's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Adrian R. Centurion?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    },
    "new_question_correct_value": "What's the heading accuracy of Adrian Ricardo Centurion?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Adrian R. Centurion?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    },
    "new_question_correct_value": "Which foot is preferred by Adrian Ricardo Centurion?"
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Adrian R. Centurion have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    },
    "new_question_correct_value": "When was the first time did Adrian Ricardo Centurion have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Classifier success rate and CI\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "Who is the owner of the post \"Classifier success rate and confidence intervals\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Classifier success rate and CI\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Classifier success rate and confidence intervals\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Classifier success rate and CI' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "How many views did the post titled 'Classifier success rate and confidence intervals' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Classifier success rate and CI\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Classifier success rate and confidence intervals\"."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Classifier success rate and CI'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Classifier success rate and confidence intervals'?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Classifier success rate and CI\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "Who is the owner of the post \"Classifier success rate and confidence intervals\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Classifier success rate and CI\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Classifier success rate and confidence intervals\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Classifier success rate and CI' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "How many views did the post titled 'Classifier success rate and confidence intervals' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Classifier success rate and CI\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Classifier success rate and confidence intervals\"."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Classifier success rate and CI'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Classifier success rate and confidence intervals'?"
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Sony Pictures'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by Sony Pics by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "Sony Pictures",
      "abbreviation_acronym": "Sony Pics"
    },
    "new_question_correct_value": "Rank heroes published by Sony Pictures by their height in descending order."
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Sony Pictures' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from Sony Pics by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "Sony Pictures",
      "abbreviation_acronym": "Sony Pics"
    },
    "new_question_correct_value": "Rank superheroes from Sony Pictures by their eye color popularity, starting with the most common color."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Sony Pictures' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Strength",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Sony Pics who have the super power of 'Super Strength'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Sony Pictures",
      "abbreviation_acronym": "Sony Pics"
    },
    "new_question_correct_value": "List the superheroes from Sony Pictures who have the super power of 'Super Strength'."
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Sony Pictures'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of Sony Pics.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "Sony Pictures",
      "abbreviation_acronym": "Sony Pics"
    },
    "new_question_correct_value": "Give the publisher ID of Sony Pictures."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Sony Pictures' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.durability"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most durability published by Sony Pics?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sony Pictures",
      "abbreviation_acronym": "Sony Pics"
    },
    "new_question_correct_value": "Which superhero has the most durability published by Sony Pictures?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Sony Pictures' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in Sony Pics.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sony Pictures",
      "abbreviation_acronym": "Sony Pics"
    },
    "new_question_correct_value": "Identify the heaviest superhero in Sony Pictures."
  },
  {
    "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.id",
      "sets.block",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "block",
        "value": "Commander",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Italian",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "sets.block.commander",
      "set_translations.language.italian"
    ],
    "original_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Cmdr block in alphabetical order.",
    "original_SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "changes_information": {
      "original_value": "Commander",
      "abbreviation_acronym": "Cmdr"
    },
    "new_question_correct_value": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Commander block in alphabetical order."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Animal Atts'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Animal Attributes'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Animal Atts?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Animal Attributes?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.animal_attributes"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Animal Atts power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    },
    "new_question_correct_value": "List the name of superheroes with Animal Attributes power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.animal_attributes"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Animal Atts power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Animal Attributes power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Animal Attributes'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.animal_attributes"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Animal Atts?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    },
    "new_question_correct_value": "What is the power ID of Animal Attributes?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Animal Atts.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Animal Attributes."
  },
  {
    "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'West Ham United'",
    "tables": [
      "team"
    ],
    "columns": [
      "team.team_short_name",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
    "values_list": [
      "team.team_long_name.queens park rangers"
    ],
    "original_question": "What is the short name of the football team Queens Park Rangers?",
    "question": "What is the short name of the football team WHU?",
    "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    },
    "new_question_correct_value": "What is the short name of the football team West Ham United?"
  },
  {
    "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'West Ham United'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team_attributes.team_fifa_api_id",
      "team.team_fifa_api_id",
      "team_attributes.buildupplaypositioningclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "values_list": [
      "team.team_long_name.ado den haag"
    ],
    "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "question": "What is the WHU team freedom of movement in the 1st two thirds of the pitch?",
    "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    },
    "new_question_correct_value": "What is the West Ham United team freedom of movement in the 1st two thirds of the pitch?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "values_list": [
      "team.team_long_name.west_ham_united"
    ],
    "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "question": "What is WHU's highest chance creation passing score and what is it classified as?",
    "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    },
    "new_question_correct_value": "What is West Ham United's highest chance creation passing score and what is it classified as?"
  },
  {
    "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplayspeedclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
    "values_list": [
      "team.team_long_name.willem ii"
    ],
    "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "question": "What was the build up play speed class for \"WHU\" on 2011/2/22?",
    "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    },
    "new_question_correct_value": "What was the build up play speed class for \"West Ham United\" on 2011/2/22?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "values_list": [
      "team.team_long_name.pec zwolle"
    ],
    "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "question": "State the chance creation passing class for \"WHU\" on 2013/9/20.",
    "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    },
    "new_question_correct_value": "State the chance creation passing class for \"West Ham United\" on 2013/9/20."
  },
  {
    "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team.team_long_name",
      "team_attributes.chancecreationcrossingclass"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "values_list": [
      "team.team_long_name.hull city"
    ],
    "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "question": "What was the chance creation crossing class for \"WHU\" on 2010/2/22?",
    "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    },
    "new_question_correct_value": "What was the chance creation crossing class for \"West Ham United\" on 2010/2/22?"
  },
  {
    "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'West Ham United'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team.team_long_name",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.team_api_id"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "values_list": [
      "team.team_long_name.ksv cercle brugge"
    ],
    "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "question": "Does the WHU team have a slow, balanced or fast speed class?",
    "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    },
    "new_question_correct_value": "Does the West Ham United team have a slow, balanced or fast speed class?"
  },
  {
    "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "tables": [
      "team"
    ],
    "columns": [
      "team.team_short_name",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
    "values_list": [
      "team.team_long_name.queens park rangers"
    ],
    "original_question": "What is the short name of the football team Queens Park Rangers?",
    "question": "What is the short name of the football team QPR?",
    "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    },
    "new_question_correct_value": "What is the short name of the football team Queens Park Rangers?"
  },
  {
    "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'Queens Park Rangers'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team_attributes.team_fifa_api_id",
      "team.team_fifa_api_id",
      "team_attributes.buildupplaypositioningclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "values_list": [
      "team.team_long_name.ado den haag"
    ],
    "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "question": "What is the QPR team freedom of movement in the 1st two thirds of the pitch?",
    "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    },
    "new_question_correct_value": "What is the Queens Park Rangers team freedom of movement in the 1st two thirds of the pitch?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "values_list": [
      "team.team_long_name.queens_park_rangers"
    ],
    "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "question": "What is QPR's highest chance creation passing score and what is it classified as?",
    "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    },
    "new_question_correct_value": "What is Queens Park Rangers's highest chance creation passing score and what is it classified as?"
  },
  {
    "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplayspeedclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
    "values_list": [
      "team.team_long_name.willem ii"
    ],
    "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "question": "What was the build up play speed class for \"QPR\" on 2011/2/22?",
    "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    },
    "new_question_correct_value": "What was the build up play speed class for \"Queens Park Rangers\" on 2011/2/22?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "values_list": [
      "team.team_long_name.pec zwolle"
    ],
    "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "question": "State the chance creation passing class for \"QPR\" on 2013/9/20.",
    "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    },
    "new_question_correct_value": "State the chance creation passing class for \"Queens Park Rangers\" on 2013/9/20."
  },
  {
    "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team.team_long_name",
      "team_attributes.chancecreationcrossingclass"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "values_list": [
      "team.team_long_name.hull city"
    ],
    "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "question": "What was the chance creation crossing class for \"QPR\" on 2010/2/22?",
    "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    },
    "new_question_correct_value": "What was the chance creation crossing class for \"Queens Park Rangers\" on 2010/2/22?"
  },
  {
    "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'Queens Park Rangers'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team.team_long_name",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.team_api_id"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "values_list": [
      "team.team_long_name.ksv cercle brugge"
    ],
    "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "question": "Does the QPR team have a slow, balanced or fast speed class?",
    "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    },
    "new_question_correct_value": "Does the Queens Park Rangers team have a slow, balanced or fast speed class?"
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Massachusetts'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Massachusetts",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in MA obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "Massachusetts",
      "abbreviation_acronym": "MA"
    },
    "new_question_correct_value": "List out the dates that users who are located in Massachusetts obtained their badges?"
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Massachusetts'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Massachusetts",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in MA obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "Massachusetts",
      "abbreviation_acronym": "MA"
    },
    "new_question_correct_value": "List out the age of users who located in Massachusetts obtained the badge?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'Massachusetts'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Massachusetts",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "values_list": [
      "users.location.north pole"
    ],
    "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "question": "Provide the badge names received in 2011 for the user whose location is in the MA.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "changes_information": {
      "original_value": "Massachusetts",
      "abbreviation_acronym": "MA"
    },
    "new_question_correct_value": "Provide the badge names received in 2011 for the user whose location is in the Massachusetts."
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'South Africa'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "South Africa",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in SAfrica obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "South Africa",
      "abbreviation_acronym": "SAfrica"
    },
    "new_question_correct_value": "List out the dates that users who are located in South Africa obtained their badges?"
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'South Africa'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "South Africa",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in SAfrica obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "South Africa",
      "abbreviation_acronym": "SAfrica"
    },
    "new_question_correct_value": "List out the age of users who located in South Africa obtained the badge?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'South Africa'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "South Africa",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "values_list": [
      "users.location.north pole"
    ],
    "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "question": "Provide the badge names received in 2011 for the user whose location is in the SAfrica.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "changes_information": {
      "original_value": "South Africa",
      "abbreviation_acronym": "SAfrica"
    },
    "new_question_correct_value": "Provide the badge names received in 2011 for the user whose location is in the South Africa."
  },
  {
    "SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
    "tables": [
      "users"
    ],
    "columns": [
      "users.first_name",
      "users.user_category_code",
      "users.login_name"
    ],
    "values": [
      {
        "table": "users",
        "column": "user_category_code",
        "value": "Senior Citizen",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "users.user_category_code.senior citizen"
    ],
    "original_question": "Find the login names of all senior citizen users ordered by their first names.",
    "question": "Find the login names of all Sr Citizen users ordered by their first names.",
    "original_SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
    "changes_information": {
      "original_value": "Senior Citizen",
      "abbreviation_acronym": "Sr Citizen"
    },
    "new_question_correct_value": "Find the login names of all Senior Citizen users ordered by their first names."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Popular Question' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Popular Q.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Popular Question",
      "clipping": "Popular Q"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Popular Question.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Popular Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Popular Q Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Popular Question",
      "clipping": "Popular Q"
    },
    "new_question_correct_value": "List all the name of users that obtained the Popular Question Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Popular Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Popular Q badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Popular Question",
      "clipping": "Popular Q"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Popular Question badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Popular Question' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Popular Q badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Popular Question",
      "clipping": "Popular Q"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Popular Question badge?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Research Asst..'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Research Assistant",
      "clipping": "Research Asst."
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Research Assistant.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Research Asst. Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Research Assistant",
      "clipping": "Research Asst."
    },
    "new_question_correct_value": "List all the name of users that obtained the Research Assistant Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Research Asst. badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Research Assistant",
      "clipping": "Research Asst."
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Research Assistant badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Research Asst. badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Research Assistant",
      "clipping": "Research Asst."
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Research Assistant badge?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on food in September Meeting?",
    "question": "How much did the Student_Club members spend on Advert. in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "clipping": "Advert."
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "question": "How much did the Student_Club members spend on Advert. in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "clipping": "Advert."
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Advertisement' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Advertisement' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.advertisement",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Advert.\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Advertisement",
      "clipping": "Advert."
    },
    "new_question_correct_value": "With the biggest budget for the \"Advertisement\", what was the remaining of it?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Advert..",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Advertisement",
      "clipping": "Advert."
    },
    "new_question_correct_value": "Name the event with the highest amount spent on Advertisement."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Advertisement' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.category",
      "budget.link_to_event",
      "budget.budget_id",
      "expense.link_to_budget",
      "event.event_id"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the name of events with less than average parking cost.",
    "question": "List the name of events with less than average Advert. cost.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "changes_information": {
      "original_value": "Advertisement",
      "clipping": "Advert."
    },
    "new_question_correct_value": "List the name of events with less than average Advertisement cost."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Advert..",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Advertisement",
      "clipping": "Advert."
    },
    "new_question_correct_value": "List the event names which were budgeted for the Advertisement."
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Advert. and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Advertisement",
      "clipping": "Advert."
    },
    "new_question_correct_value": "Calculate the total amount spent on Advertisement and list the name of the event they were spent on."
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Misinformation'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Misinfo.'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "What is the keyword found on card 'Misinformation'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.misinformation"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Misinfo.\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Misinformation\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Misinfo.\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "What is the status of card \"Misinformation\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Misinfo.\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "What is the type of card \"Misinformation\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Misinfo.\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "What is the rule of playing card \"Misinformation\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Misinfo..",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "Write down the ruling of Misinformation."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Misinformation'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Misinfo.\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "What's the list of all types for the card \"Misinformation\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Misinformation'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Misinfo.\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "Did the set of cards with \"Misinformation\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Misinformation'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.misinformation"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Misinfo.' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "When was the ruling for the card 'Misinformation' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Misinformation'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.misinformation"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Misinfo.\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    },
    "new_question_correct_value": "What was the release date for the set which card \"Misinformation\" in it?"
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Equipment'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Enchant Equipment",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Enchant Equip. and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Enchant Equipment",
      "clipping": "Enchant Equip."
    },
    "new_question_correct_value": "List down the name of cards with original types of Enchant Equipment and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Permanent'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Enchant Permanent",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Enchant Perm and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Enchant Permanent",
      "clipping": "Enchant Perm"
    },
    "new_question_correct_value": "List down the name of cards with original types of Enchant Permanent and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name;",
    "values_list": [
      "major.department.art and design department"
    ],
    "original_question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "question": "Please list the full names of the students in the Student_Club that come from the Physics Dept.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "changes_information": {
      "original_value": "Physics Department",
      "clipping": "Physics Dept"
    },
    "new_question_correct_value": "Please list the full names of the students in the Student_Club that come from the Physics Department."
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
    "values_list": [
      "major.department.school of applied sciences, technology and education"
    ],
    "original_question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "question": "List all the members of the \"Physics Dept\" department.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "changes_information": {
      "original_value": "Physics Department",
      "clipping": "Physics Dept"
    },
    "new_question_correct_value": "List all the members of the \"Physics Department\" department."
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Statistics collaboration'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Statistics collab.\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    },
    "new_question_correct_value": "Who is the owner of the post \"Statistics collaboration\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Statistics collaboration'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Statistics collab.\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"Statistics collaboration\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Statistics collaboration'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Statistics collab.\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Statistics collaboration\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Statistics collaboration'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Statistics collab.' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    },
    "new_question_correct_value": "How many views did the post titled 'Statistics collaboration' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Statistics collaboration'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Statistics collab.\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Statistics collaboration\"."
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Statistics collaboration' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Statistics collab.' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    },
    "new_question_correct_value": "Provide the text of the latest 10 comments to the post with the title 'Statistics collaboration' and the display name of the user who left it."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Statistics collaboration'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Statistics collab.'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Statistics collaboration'?"
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Statistics collaboration'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Statistics collab.\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    },
    "new_question_correct_value": "What is the post ID and the comments commented in the post titled by \"Statistics collaboration\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Test Statistics'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Test Statistics",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Test Stats' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Test Statistics",
      "clipping": "Test Stats"
    },
    "new_question_correct_value": "How many views did the post titled 'Test Statistics' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Test Statistics'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Test Statistics",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Test Stats\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Test Statistics",
      "clipping": "Test Stats"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Test Statistics\"."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Test Statistics'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Test Statistics",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Test Stats'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Test Statistics",
      "clipping": "Test Stats"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Test Statistics'?"
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Test Statistics'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Test Statistics",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Test Stats\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Test Statistics",
      "clipping": "Test Stats"
    },
    "new_question_correct_value": "What is the post ID and the comments commented in the post titled by \"Test Statistics\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Graphics encyclopedia'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Graphics encycl\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    },
    "new_question_correct_value": "Who is the owner of the post \"Graphics encyclopedia\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Graphics encyclopedia'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Graphics encycl\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"Graphics encyclopedia\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Graphics encyclopedia'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Graphics encycl\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Graphics encyclopedia\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Graphics encyclopedia'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Graphics encycl' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    },
    "new_question_correct_value": "How many views did the post titled 'Graphics encyclopedia' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Graphics encyclopedia'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Graphics encycl\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Graphics encyclopedia\"."
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Graphics encyclopedia' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Graphics encycl' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    },
    "new_question_correct_value": "Provide the text of the latest 10 comments to the post with the title 'Graphics encyclopedia' and the display name of the user who left it."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Graphics encyclopedia'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Graphics encycl'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Graphics encyclopedia'?"
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Graphics encyclopedia'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Graphics encycl\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    },
    "new_question_correct_value": "What is the post ID and the comments commented in the post titled by \"Graphics encyclopedia\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Welch statistic'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Welch stat\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    },
    "new_question_correct_value": "Who is the owner of the post \"Welch statistic\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Welch statistic'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Welch stat\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"Welch statistic\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Welch statistic'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Welch stat\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Welch statistic\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Welch statistic'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Welch stat' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    },
    "new_question_correct_value": "How many views did the post titled 'Welch statistic' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Welch statistic'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Welch stat\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Welch statistic\"."
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Welch statistic' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Welch stat' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    },
    "new_question_correct_value": "Provide the text of the latest 10 comments to the post with the title 'Welch statistic' and the display name of the user who left it."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Welch statistic'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Welch stat'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Welch statistic'?"
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Welch statistic'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Welch stat\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    },
    "new_question_correct_value": "What is the post ID and the comments commented in the post titled by \"Welch statistic\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Scale parameter'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Scale parameter",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Scale params\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Scale parameter",
      "clipping": "Scale params"
    },
    "new_question_correct_value": "Who is the owner of the post \"Scale parameter\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Scale parameter'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Scale parameter",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Scale params\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Scale parameter",
      "clipping": "Scale params"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Scale parameter\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Scale parameter'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Scale parameter",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Scale params' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Scale parameter",
      "clipping": "Scale params"
    },
    "new_question_correct_value": "How many views did the post titled 'Scale parameter' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Scale parameter'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Scale parameter",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Scale params\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Scale parameter",
      "clipping": "Scale params"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Scale parameter\"."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Scale parameter'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Scale parameter",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Scale params'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Scale parameter",
      "clipping": "Scale params"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Scale parameter'?"
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Sony Pictures'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by Sony Pics by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "Sony Pictures",
      "clipping": "Sony Pics"
    },
    "new_question_correct_value": "Rank heroes published by Sony Pictures by their height in descending order."
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Sony Pictures' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from Sony Pics by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "Sony Pictures",
      "clipping": "Sony Pics"
    },
    "new_question_correct_value": "Rank superheroes from Sony Pictures by their eye color popularity, starting with the most common color."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Sony Pictures' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Strength",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Sony Pics who have the super power of 'Super Strength'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Sony Pictures",
      "clipping": "Sony Pics"
    },
    "new_question_correct_value": "List the superheroes from Sony Pictures who have the super power of 'Super Strength'."
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Sony Pictures'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of Sony Pics.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "Sony Pictures",
      "clipping": "Sony Pics"
    },
    "new_question_correct_value": "Give the publisher ID of Sony Pictures."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Sony Pictures' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.durability"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most durability published by Sony Pics?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sony Pictures",
      "clipping": "Sony Pics"
    },
    "new_question_correct_value": "Which superhero has the most durability published by Sony Pictures?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Sony Pictures' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in Sony Pics.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sony Pictures",
      "clipping": "Sony Pics"
    },
    "new_question_correct_value": "Identify the heaviest superhero in Sony Pictures."
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Christopher'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Christopher",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.christopher"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Chris.. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Christopher",
      "clipping": "Chris."
    },
    "new_question_correct_value": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Christopher. List the district code of the school."
  },
  {
    "SQL": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.enrollment (ages 5-17)",
      "frpm.cdscode",
      "schools.school",
      "schools.cdscode",
      "schools.doc",
      "frpm.enrollment (k-12)",
      "schools.fundingtype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "fundingtype",
        "value": "Locally funded",
        "condition": "="
      },
      {
        "table": "schools",
        "column": "fundingtype",
        "value": "Locally funded",
        "condition": "="
      },
      {
        "table": "schools",
        "column": "fundingtype",
        "value": "Locally funded",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "values_list": [
      "schools.fundingtype.locally funded",
      "schools.fundingtype.locally funded",
      "schools.fundingtype.locally funded"
    ],
    "original_question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are Locally fund, list the names and DOC type of schools which has a difference above this average.",
    "original_SQL": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "changes_information": {
      "original_value": "Locally funded",
      "clipping": "Locally fund"
    },
    "new_question_correct_value": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are Locally funded, list the names and DOC type of schools which has a difference above this average."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "Please list all the superpowers of 3-D Man.",
    "question": "Please list all the superpowers of Captain Am..",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "Please list all the superpowers of Captain America."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of Captain Am.'s skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "What is the colour of Captain America's skin?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Who is the publisher of Sauron?",
    "question": "Who is the publisher of Captain Am.?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "Who is the publisher of Captain America?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of Captain Am.?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "What is the publisher's name of Captain America?"
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is Captain Am.'s race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "What is Captain America's race?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Provide the superpowers of the superhero called Deathlok.",
    "question": "Provide the superpowers of the superhero called Captain Am..",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "Provide the superpowers of the superhero called Captain America."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero Captain Am..",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "Indicate the attribute value of superhero Captain America."
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero Captain Am. belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "Which group does superhero Captain America belong to?"
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of Captain Am. hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "What is the gender of Captain America hero?"
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of Captain Am.?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "What are the race and alignment of Captain America?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "What is Abomination's superpower?",
    "question": "What is Captain Am.'s superpower?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "What is Captain America's superpower?"
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of Captain Am.'s attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "State all of Captain America's attributes along with their values."
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named Captain Am..",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "Give the alignment and superpowers of the superhero named Captain America."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down Captain Am.'s superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "List down Captain America's superpowers."
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Captain America' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the Captain Am..",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "Identify the weakest attribute of the Captain America."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "What is Abomination's eye colour?",
    "question": "What is Captain Am.'s eye colour?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "What is Captain America's eye colour?"
  },
  {
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Captain America'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Provide the full name of the superhero named Alien.",
    "question": "Provide the full name of the superhero named Captain Am..",
    "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "Provide the full name of the superhero named Captain America."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named Captain Am..",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "List the attribute value of the superhero named Captain America."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of Captain Am..",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    },
    "new_question_correct_value": "Give the eye colour of Captain America."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Fire Resistance",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Fire Resist'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Fire Resistance",
      "clipping": "Fire Resist"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Fire Resistance'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Fire Resistance",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Fire Resist?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Fire Resistance",
      "clipping": "Fire Resist"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Fire Resistance?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Fire Resistance",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.fire_resistance"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Fire Resist power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Fire Resistance",
      "clipping": "Fire Resist"
    },
    "new_question_correct_value": "List the name of superheroes with Fire Resistance power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Fire Resistance",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.fire_resistance"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Fire Resist power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Fire Resistance",
      "clipping": "Fire Resist"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Fire Resistance power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Fire Resistance'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Fire Resistance",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.fire_resistance"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Fire Resist?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Fire Resistance",
      "clipping": "Fire Resist"
    },
    "new_question_correct_value": "What is the power ID of Fire Resistance?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Fire Resistance'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Fire Resistance",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Fire Resist.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Fire Resistance",
      "clipping": "Fire Resist"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Fire Resistance."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'moderator'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "moderator",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.moderator"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named mod?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "moderator",
      "clipping": "mod"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named moderator?"
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'information'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "information",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.information"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named info?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "information",
      "clipping": "info"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named information?"
  },
  {
    "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Benedictine University'",
    "tables": [
      "major",
      "major_ranking",
      "university"
    ],
    "columns": [
      "major_ranking.university_id",
      "major_ranking.major_id",
      "major_ranking.rank",
      "university.university_name",
      "major.major_id",
      "major.major_name",
      "university.university_id"
    ],
    "values": [
      {
        "table": "university",
        "column": "university_name",
        "value": "Benedictine University",
        "condition": "="
      }
    ],
    "db_id": "university_rank",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "university.university_name.augustana college"
    ],
    "original_question": "Show all majors and major ranks for the university with name Augustana College.",
    "question": "Show all majors and major ranks for the university with name Benedictine Uni.",
    "original_SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "changes_information": {
      "original_value": "Benedictine University",
      "clipping": "Benedictine Uni"
    },
    "new_question_correct_value": "Show all majors and major ranks for the university with name Benedictine University."
  },
  {
    "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Benedictine University'",
    "tables": [
      "major",
      "major_ranking",
      "university"
    ],
    "columns": [
      "major_ranking.university_id",
      "major_ranking.major_id",
      "major_ranking.rank",
      "university.university_name",
      "major.major_id",
      "major.major_name",
      "university.university_id"
    ],
    "values": [
      {
        "table": "university",
        "column": "university_name",
        "value": "Benedictine University",
        "condition": "="
      }
    ],
    "db_id": "university_rank",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "university.university_name.augustana college"
    ],
    "original_question": "What are the ranks and names of all majors at Augustana College?",
    "question": "What are the ranks and names of all majors at Benedictine Uni?",
    "original_SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "changes_information": {
      "original_value": "Benedictine University",
      "clipping": "Benedictine Uni"
    },
    "new_question_correct_value": "What are the ranks and names of all majors at Benedictine University?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Disciplined' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Disciplined",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.disciplined"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'not undisciplined.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Disciplined",
      "negated_antonym": "not undisciplined"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Disciplined.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Disciplined'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Disciplined",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.disciplined"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the not undisciplined Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Disciplined",
      "negated_antonym": "not undisciplined"
    },
    "new_question_correct_value": "List all the name of users that obtained the Disciplined Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Disciplined'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Disciplined",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.disciplined"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the not undisciplined badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Disciplined",
      "negated_antonym": "not undisciplined"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Disciplined badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Disciplined' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Disciplined",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.disciplined"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first not undisciplined badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Disciplined",
      "negated_antonym": "not undisciplined"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Disciplined badge?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Informed' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Informed",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.informed"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'not uninformed.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Informed",
      "negated_antonym": "not uninformed"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Informed.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Informed'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Informed",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.informed"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the not uninformed Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Informed",
      "negated_antonym": "not uninformed"
    },
    "new_question_correct_value": "List all the name of users that obtained the Informed Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Informed'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Informed",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.informed"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the not uninformed badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Informed",
      "negated_antonym": "not uninformed"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Informed badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Informed' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Informed",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.informed"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first not uninformed badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Informed",
      "negated_antonym": "not uninformed"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Informed badge?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Curious' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Curious",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.curious"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'not uncurious.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Curious",
      "negated_antonym": "not uncurious"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Curious.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Curious'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Curious",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.curious"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the not uncurious Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Curious",
      "negated_antonym": "not uncurious"
    },
    "new_question_correct_value": "List all the name of users that obtained the Curious Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Curious'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Curious",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.curious"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the not uncurious badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Curious",
      "negated_antonym": "not uncurious"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Curious badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Curious' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Curious",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.curious"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first not uncurious badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Curious",
      "negated_antonym": "not uncurious"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Curious badge?"
  },
  {
    "SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'junior'",
    "tables": [
      "disp",
      "card"
    ],
    "columns": [
      "card.type",
      "card.disp_id",
      "disp.account_id",
      "disp.disp_id"
    ],
    "values": [
      {
        "table": "card",
        "column": "type",
        "value": "junior",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "card.type.junior"
    ],
    "original_question": "What are the accounts that have gold credit cards?",
    "question": "What are the accounts that have not senior credit cards?",
    "original_SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
    "changes_information": {
      "original_value": "junior",
      "negated_antonym": "not senior"
    },
    "new_question_correct_value": "What are the accounts that have junior credit cards?"
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Indestructible'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Indestructible",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.indestructible"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of not destructible?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Indestructible",
      "negated_antonym": "not destructible"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Indestructible?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Decommission'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'not commissioned'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "What is the keyword found on card 'Decommission'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.decommission"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"not commissioned\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Decommission\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"not commissioned\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "What is the status of card \"Decommission\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"not commissioned\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "What is the type of card \"Decommission\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"not commissioned\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "What is the rule of playing card \"Decommission\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Decommission'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of not commissioned.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "Write down the ruling of Decommission."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Decommission'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"not commissioned\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Decommission\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Decommission'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"not commissioned\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "Did the set of cards with \"Decommission\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Decommission'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.decommission"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'not commissioned' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "When was the ruling for the card 'Decommission' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Decommission'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.decommission"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"not commissioned\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Decommission\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Decommission' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"not commissioned\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Decommission\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Decommission' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Decommission",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"not commissioned\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Decommission",
      "negated_antonym": "not commissioned"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Decommission\" is in it."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.rarity",
      "rulings.date",
      "cards.name",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "uncommon",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "uncommon refers to rarity = 'uncommon';",
    "values_list": [
      "cards.rarity.uncommon"
    ],
    "original_question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
    "question": "Pick 3 cards with rarity of not common, list down name these cards according to ascending order of it's ruling date.",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
    "changes_information": {
      "original_value": "uncommon",
      "negated_antonym": "not common"
    },
    "new_question_correct_value": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date."
  },
  {
    "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "legalities.status",
      "cards.originalreleasedate",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "rarity",
        "value": "uncommon",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
    "values_list": [
      "legalities.status.legal",
      "cards.rarity.uncommon"
    ],
    "original_question": "When was the oldest mythic card released and what are its legal play formats?",
    "question": "When was the oldest not common card released and what are its legal play formats?",
    "original_SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "changes_information": {
      "original_value": "uncommon",
      "negated_antonym": "not common"
    },
    "new_question_correct_value": "When was the oldest uncommon card released and what are its legal play formats?"
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'common' ORDER BY T2.date ASC LIMIT 3",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.rarity",
      "rulings.date",
      "cards.name",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "common",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "uncommon refers to rarity = 'uncommon';",
    "values_list": [
      "cards.rarity.common"
    ],
    "original_question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
    "question": "Pick 3 cards with rarity of not rare, list down name these cards according to ascending order of it's ruling date.",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
    "changes_information": {
      "original_value": "common",
      "negated_antonym": "not rare"
    },
    "new_question_correct_value": "Pick 3 cards with rarity of common, list down name these cards according to ascending order of it's ruling date."
  },
  {
    "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'common' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "legalities.status",
      "cards.originalreleasedate",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "rarity",
        "value": "common",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
    "values_list": [
      "legalities.status.legal",
      "cards.rarity.common"
    ],
    "original_question": "When was the oldest mythic card released and what are its legal play formats?",
    "question": "When was the oldest not rare card released and what are its legal play formats?",
    "original_SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "changes_information": {
      "original_value": "common",
      "negated_antonym": "not rare"
    },
    "new_question_correct_value": "When was the oldest common card released and what are its legal play formats?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.amount",
      "budget.link_to_event",
      "event.status",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "status",
        "value": "Closed",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
    "values_list": [
      "event.status.closed"
    ],
    "original_question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "question": "Among all the not open events, which event has the highest spend-to-budget ratio?",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Closed",
      "negated_antonym": "not open"
    },
    "new_question_correct_value": "Among all the Closed events, which event has the highest spend-to-budget ratio?"
  },
  {
    "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.type",
      "event.event_name",
      "event.event_date",
      "event.status"
    ],
    "values": [
      {
        "table": "event",
        "column": "status",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "event",
        "column": "type",
        "value": "Game",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
    "values_list": [
      "event.status.closed",
      "event.type.game"
    ],
    "original_question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "question": "List the names of not open event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "original_SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "changes_information": {
      "original_value": "Closed",
      "negated_antonym": "not open"
    },
    "new_question_correct_value": "List the names of Closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020."
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Normal' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Normal",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.normal"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with not abnormal disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Normal",
      "negated_antonym": "not abnormal"
    },
    "new_question_correct_value": "What is the most common sign of patients with Normal disease?"
  },
  {
    "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "values_list": [
      "cards.rarity.mythic",
      "legalities.format.gladiator",
      "legalities.status.banned"
    ],
    "original_question": "List all the mythic rarity print cards banned in gladiator format.",
    "question": "List all the mythic rarity print cards not permitted in gladiator format.",
    "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "changes_information": {
      "original_value": "Banned",
      "negated_antonym": "not permitted"
    },
    "new_question_correct_value": "List all the mythic rarity print cards Banned in gladiator format."
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Banned' AND T1.types = 'Creature'",
    "tables": [
      "rulings",
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.types",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "types",
        "value": "Creature",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
    "values_list": [
      "legalities.status.banned",
      "cards.types.creature"
    ],
    "original_question": "Lists by ID all Creature-type cards with legal status.",
    "question": "Lists by ID all Creature-type cards with not permitted status.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "changes_information": {
      "original_value": "Banned",
      "negated_antonym": "not permitted"
    },
    "new_question_correct_value": "Lists by ID all Creature-type cards with Banned status."
  },
  {
    "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Banned' ORDER BY T1.originalReleaseDate LIMIT 1",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "legalities.status",
      "cards.originalreleasedate",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
    "values_list": [
      "legalities.status.banned",
      "cards.rarity.mythic"
    ],
    "original_question": "When was the oldest mythic card released and what are its legal play formats?",
    "question": "When was the oldest mythic card released and what are its not permitted play formats?",
    "original_SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "changes_information": {
      "original_value": "Banned",
      "negated_antonym": "not permitted"
    },
    "new_question_correct_value": "When was the oldest mythic card released and what are its Banned play formats?"
  },
  {
    "SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "tables": [
      "cards",
      "legalities",
      "maxbanned"
    ],
    "columns": [
      "maxbanned.format",
      "legalities.format",
      "legalities.status",
      "cards.name",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
    "values_list": [
      "legalities.status.banned",
      "legalities.status.banned",
      ".status.banned"
    ],
    "original_question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "question": "Which of the play format has the highest number of not permitted status? Indicate the play format and the names of all the card meet the condition.",
    "original_SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "changes_information": {
      "original_value": "Banned",
      "negated_antonym": "not permitted"
    },
    "new_question_correct_value": "Which of the play format has the highest number of Banned status? Indicate the play format and the names of all the card meet the condition."
  },
  {
    "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.format",
      "legalities.status",
      "cards.name",
      "legalities.uuid",
      "cards.uuid",
      "cards.edhrecrank"
    ],
    "values": [
      {
        "table": "cards",
        "column": "edhrecrank",
        "value": "1",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "values_list": [
      "cards.edhrecrank.1",
      "legalities.status.banned"
    ],
    "original_question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its not permitted play format.",
    "original_SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "changes_information": {
      "original_value": "Banned",
      "negated_antonym": "not permitted"
    },
    "new_question_correct_value": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Banned play format."
  },
  {
    "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'differentiation'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posthistory.text",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posts.viewcount",
      "posts.lasteditoruserid"
    ],
    "values": [
      {
        "table": "posthistory",
        "column": "text",
        "value": "differentiation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "values_list": [
      "posthistory.text.computer game datasets"
    ],
    "original_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "question": "Identify the total views on the post 'not undifferentiated'. Name the user who posted it last time.",
    "original_SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "changes_information": {
      "original_value": "differentiation",
      "negated_antonym": "not undifferentiated"
    },
    "new_question_correct_value": "Identify the total views on the post 'differentiation'. Name the user who posted it last time."
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Likely' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "Likely",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.likely"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of not unlikely?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Likely",
      "negated_antonym": "not unlikely"
    },
    "new_question_correct_value": "What is the most common type of grade span served in the city of Likely?"
  },
  {
    "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "satscores.avgscrread",
      "schools.district",
      "schools.cdscode",
      "satscores.cds",
      "schools.statustype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "statustype",
        "value": "Active",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.statustype.active"
    ],
    "original_question": "Which active district has the highest average score in Reading?",
    "question": "Which not inactive district has the highest average score in Reading?",
    "original_SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "changes_information": {
      "original_value": "Active",
      "negated_antonym": "not inactive"
    },
    "new_question_correct_value": "Which Active district has the highest average score in Reading?"
  },
  {
    "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Active' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Active' AND school IS NOT NULL",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.closeddate",
      "schools.school",
      "schools.county",
      "schools.statustype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "statustype",
        "value": "Active",
        "condition": "="
      },
      {
        "table": "",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
    "values_list": [
      "schools.statustype.active",
      ".statustype.closed",
      ".statustype.closed"
    ],
    "original_question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "question": "Which different county has the most number of not inactive schools? Please provide the name of each school as well as the closure date.",
    "original_SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "changes_information": {
      "original_value": "Active",
      "negated_antonym": "not inactive"
    },
    "new_question_correct_value": "Which different county has the most number of Active schools? Please provide the name of each school as well as the closure date."
  },
  {
    "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Closed' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "satscores.avgscrread",
      "schools.district",
      "schools.cdscode",
      "satscores.cds",
      "schools.statustype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.statustype.closed"
    ],
    "original_question": "Which active district has the highest average score in Reading?",
    "question": "Which not open district has the highest average score in Reading?",
    "original_SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "changes_information": {
      "original_value": "Closed",
      "negated_antonym": "not open"
    },
    "new_question_correct_value": "Which Closed district has the highest average score in Reading?"
  },
  {
    "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.closeddate",
      "schools.school",
      "schools.county",
      "schools.statustype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
    "values_list": [
      "schools.statustype.closed",
      ".statustype.closed",
      ".statustype.closed"
    ],
    "original_question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "question": "Which different county has the most number of not open schools? Please provide the name of each school as well as the closure date.",
    "original_SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "changes_information": {
      "original_value": "Closed",
      "negated_antonym": "not open"
    },
    "new_question_correct_value": "Which different county has the most number of Closed schools? Please provide the name of each school as well as the closure date."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Unstable' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Unstable",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "values_list": [
      "sets.name.unstable"
    ],
    "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the name of the cards in the set not stable with the highest converted mana cost.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "changes_information": {
      "original_value": "Unstable",
      "negated_antonym": "not stable"
    },
    "new_question_correct_value": "Please list the name of the cards in the set Unstable with the highest converted mana cost."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Unstable' AND T1.number = 4",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.name",
      "cards.number",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Unstable",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "number",
        "value": "4",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
    "values_list": [
      "sets.name.unstable",
      "cards.number.4"
    ],
    "original_question": "What is card number 4 in the set Coldsnap?",
    "question": "What is card number 4 in the set not stable?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "changes_information": {
      "original_value": "Unstable",
      "negated_antonym": "not stable"
    },
    "new_question_correct_value": "What is card number 4 in the set Unstable?"
  },
  {
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Unstable'",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.name",
      "sets.parentcode"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Unstable",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "values_list": [
      "sets.name.commander 2014 oversized"
    ],
    "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "question": "For the set \"not stable\" , give its parent code.",
    "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "changes_information": {
      "original_value": "Unstable",
      "negated_antonym": "not stable"
    },
    "new_question_correct_value": "For the set \"Unstable\" , give its parent code."
  },
  {
    "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'nonparametric'",
    "tables": [
      "tags",
      "posts"
    ],
    "columns": [
      "posts.id",
      "tags.tagname",
      "posts.body",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "nonparametric",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
    "values_list": [
      "tags.tagname.nonparametric"
    ],
    "original_question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "question": "From which post is the tag \"not parametric\" excerpted from? Please give the body of the post.",
    "original_SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "changes_information": {
      "original_value": "nonparametric",
      "negated_antonym": "not parametric"
    },
    "new_question_correct_value": "From which post is the tag \"nonparametric\" excerpted from? Please give the body of the post."
  },
  {
    "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'nonparametric'",
    "tables": [
      "tags",
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "tags.excerptpostid",
      "posts.owneruserid",
      "users.location",
      "users.id",
      "users.displayname",
      "tags.tagname"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "nonparametric",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
    "values_list": [
      "tags.tagname.nonparametric"
    ],
    "original_question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "question": "Mention the display name and location of the user who owned the excerpt post with not parametric tag.",
    "original_SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "changes_information": {
      "original_value": "nonparametric",
      "negated_antonym": "not parametric"
    },
    "new_question_correct_value": "Mention the display name and location of the user who owned the excerpt post with nonparametric tag."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'nonparametric'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "nonparametric",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.nonparametric"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named not parametric?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "nonparametric",
      "negated_antonym": "not parametric"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named nonparametric?"
  },
  {
    "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'online'",
    "tables": [
      "tags",
      "posts"
    ],
    "columns": [
      "posts.id",
      "tags.tagname",
      "posts.body",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "online",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
    "values_list": [
      "tags.tagname.online"
    ],
    "original_question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "question": "From which post is the tag \"not offline\" excerpted from? Please give the body of the post.",
    "original_SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "changes_information": {
      "original_value": "online",
      "negated_antonym": "not offline"
    },
    "new_question_correct_value": "From which post is the tag \"online\" excerpted from? Please give the body of the post."
  },
  {
    "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'online'",
    "tables": [
      "tags",
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "tags.excerptpostid",
      "posts.owneruserid",
      "users.location",
      "users.id",
      "users.displayname",
      "tags.tagname"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "online",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
    "values_list": [
      "tags.tagname.online"
    ],
    "original_question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "question": "Mention the display name and location of the user who owned the excerpt post with not offline tag.",
    "original_SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "changes_information": {
      "original_value": "online",
      "negated_antonym": "not offline"
    },
    "new_question_correct_value": "Mention the display name and location of the user who owned the excerpt post with online tag."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'online'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "online",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.online"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named not offline?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "online",
      "negated_antonym": "not offline"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named online?"
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'nonlinear'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "nonlinear",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.nonlinear"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named not linear?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "nonlinear",
      "negated_antonym": "not linear"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named nonlinear?"
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'control'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "control",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.control"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named not uncontrolled?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "control",
      "negated_antonym": "not uncontrolled"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named control?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Popular Question' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Frequently Asked Question.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Popular Question",
      "paraphrasing": "Frequently Asked Question"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Popular Question.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Popular Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Frequently Asked Question Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Popular Question",
      "paraphrasing": "Frequently Asked Question"
    },
    "new_question_correct_value": "List all the name of users that obtained the Popular Question Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Popular Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Frequently Asked Question badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Popular Question",
      "paraphrasing": "Frequently Asked Question"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Popular Question badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Popular Question' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Frequently Asked Question badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Popular Question",
      "paraphrasing": "Frequently Asked Question"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Popular Question badge?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Most popular question.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Favorite Question",
      "paraphrasing": "Most popular question"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Favorite Question.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Most popular question Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Favorite Question",
      "paraphrasing": "Most popular question"
    },
    "new_question_correct_value": "List all the name of users that obtained the Favorite Question Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Most popular question badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Favorite Question",
      "paraphrasing": "Most popular question"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Favorite Question badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Most popular question badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Favorite Question",
      "paraphrasing": "Most popular question"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Favorite Question badge?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Famous Question' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Famous Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.famous_question"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Well-known Question.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Famous Question",
      "paraphrasing": "Well-known Question"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Famous Question.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Famous Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Famous Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.famous_question"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Well-known Question Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Famous Question",
      "paraphrasing": "Well-known Question"
    },
    "new_question_correct_value": "List all the name of users that obtained the Famous Question Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Famous Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Famous Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.famous_question"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Well-known Question badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Famous Question",
      "paraphrasing": "Well-known Question"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Famous Question badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Famous Question' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Famous Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.famous_question"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Well-known Question badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Famous Question",
      "paraphrasing": "Well-known Question"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Famous Question badge?"
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Speaker Gifts' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Speaker Gifts' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.speaker_gifts",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Gifts for speakers\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "paraphrasing": "Gifts for speakers"
    },
    "new_question_correct_value": "With the biggest budget for the \"Speaker Gifts\", what was the remaining of it?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.speaker_gifts"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Gifts for speakers.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "paraphrasing": "Gifts for speakers"
    },
    "new_question_correct_value": "Name the event with the highest amount spent on Speaker Gifts."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Speaker Gifts' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.category",
      "budget.link_to_event",
      "budget.budget_id",
      "expense.link_to_budget",
      "event.event_id"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "values_list": [
      "budget.category.speaker_gifts"
    ],
    "original_question": "List the name of events with less than average parking cost.",
    "question": "List the name of events with less than average Gifts for speakers cost.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "paraphrasing": "Gifts for speakers"
    },
    "new_question_correct_value": "List the name of events with less than average Speaker Gifts cost."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Speaker Gifts'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.speaker_gifts"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Gifts for speakers.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "paraphrasing": "Gifts for speakers"
    },
    "new_question_correct_value": "List the event names which were budgeted for the Speaker Gifts."
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Gifts for speakers and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "paraphrasing": "Gifts for speakers"
    },
    "new_question_correct_value": "Calculate the total amount spent on Speaker Gifts and list the name of the event they were spent on."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Fateful hour'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Fateful hour",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.fateful_hour"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of An hour of fate?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Fateful hour",
      "paraphrasing": "An hour of fate"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Fateful hour?"
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Hidden agenda'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Hidden agenda",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.hidden_agenda"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Agenda is hidden?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Hidden agenda",
      "paraphrasing": "Agenda is hidden"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Hidden agenda?"
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Double strike'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Double strike",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.double_strike"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Strike twice?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Double strike",
      "paraphrasing": "Strike twice"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Double strike?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Academy Researchers'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Researchers from the Academy'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "What is the keyword found on card 'Academy Researchers'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.academy_researchers"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Researchers from the Academy\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Academy Researchers\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Researchers from the Academy\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "What is the status of card \"Academy Researchers\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Researchers from the Academy\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "What is the type of card \"Academy Researchers\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Researchers from the Academy\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "What is the rule of playing card \"Academy Researchers\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Academy Researchers'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Researchers from the Academy.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "Write down the ruling of Academy Researchers."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Academy Researchers'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Researchers from the Academy\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Academy Researchers\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Academy Researchers'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Researchers from the Academy\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "Did the set of cards with \"Academy Researchers\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Academy Researchers'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.academy_researchers"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Researchers from the Academy' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "When was the ruling for the card 'Academy Researchers' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Academy Researchers'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.academy_researchers"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Researchers from the Academy\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Academy Researchers\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Academy Researchers' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Researchers from the Academy\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Academy Researchers\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Academy Researchers' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Academy Researchers",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Researchers from the Academy\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Academy Researchers",
      "paraphrasing": "Researchers from the Academy"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Academy Researchers\" is in it."
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Ongoing Scheme'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Ongoing Scheme",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Scheme in progress and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Ongoing Scheme",
      "paraphrasing": "Scheme in progress"
    },
    "new_question_correct_value": "List down the name of cards with original types of Ongoing Scheme and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Summer Show'",
    "tables": [
      "documents",
      "paragraphs"
    ],
    "columns": [
      "documents.document_name",
      "documents.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id"
    ],
    "values": [
      {
        "table": "documents",
        "column": "document_name",
        "value": "Summer Show",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_Template_Mgt",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "documents.document_name.welcome to ny"
    ],
    "original_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "question": "Show all paragraph ids and texts for the document with name 'Show for Summer'.",
    "original_SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "changes_information": {
      "original_value": "Summer Show",
      "paraphrasing": "Show for Summer"
    },
    "new_question_correct_value": "Show all paragraph ids and texts for the document with name 'Summer Show'."
  },
  {
    "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Summer Show'",
    "tables": [
      "documents",
      "paragraphs"
    ],
    "columns": [
      "documents.document_name",
      "documents.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id"
    ],
    "values": [
      {
        "table": "documents",
        "column": "document_name",
        "value": "Summer Show",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_Template_Mgt",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "documents.document_name.welcome to ny"
    ],
    "original_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "question": "What are the ids and texts of paragraphs in the document titled 'Show for Summer'?",
    "original_SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "changes_information": {
      "original_value": "Summer Show",
      "paraphrasing": "Show for Summer"
    },
    "new_question_correct_value": "What are the ids and texts of paragraphs in the document titled 'Summer Show'?"
  },
  {
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Argentine' ORDER BY dob DESC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.dob",
      "drivers.forename",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "How old is the youngest Japanese driver? What is his name?",
    "question": "How old is the youngest From Argentina driver? What is his name?",
    "original_SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "changes_information": {
      "original_value": "Argentine",
      "paraphrasing": "From Argentina"
    },
    "new_question_correct_value": "How old is the youngest Argentine driver? What is his name?"
  },
  {
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'Argentine'",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Italian refers to nationality = 'italian'",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "Please list the surnames of all the Italian drivers.",
    "question": "Please list the surnames of all the From Argentina drivers.",
    "original_SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "changes_information": {
      "original_value": "Argentine",
      "paraphrasing": "From Argentina"
    },
    "new_question_correct_value": "Please list the surnames of all the Argentine drivers."
  },
  {
    "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'Argentine' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.driverref",
      "drivers.dob",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "Please state the reference name of the oldest German driver.",
    "question": "Please state the reference name of the oldest From Argentina driver.",
    "original_SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "changes_information": {
      "original_value": "Argentine",
      "paraphrasing": "From Argentina"
    },
    "new_question_correct_value": "Please state the reference name of the oldest Argentine driver."
  },
  {
    "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'Argentine' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.forename",
      "drivers.nationality",
      "drivers.url",
      "drivers.dob"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "question": "Find the full name, Wiki Pedia page link, and date of birth of From Argentina drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "original_SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "changes_information": {
      "original_value": "Argentine",
      "paraphrasing": "From Argentina"
    },
    "new_question_correct_value": "Find the full name, Wiki Pedia page link, and date of birth of Argentine drivers born between 1971 and 1985. List it in descending order of date of birth."
  },
  {
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Monegasque' ORDER BY dob DESC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.dob",
      "drivers.forename",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Monegasque",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "values_list": [
      "drivers.nationality.monegasque"
    ],
    "original_question": "How old is the youngest Japanese driver? What is his name?",
    "question": "How old is the youngest From Monaco driver? What is his name?",
    "original_SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "changes_information": {
      "original_value": "Monegasque",
      "paraphrasing": "From Monaco"
    },
    "new_question_correct_value": "How old is the youngest Monegasque driver? What is his name?"
  },
  {
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'Monegasque'",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Monegasque",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Italian refers to nationality = 'italian'",
    "values_list": [
      "drivers.nationality.monegasque"
    ],
    "original_question": "Please list the surnames of all the Italian drivers.",
    "question": "Please list the surnames of all the From Monaco drivers.",
    "original_SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "changes_information": {
      "original_value": "Monegasque",
      "paraphrasing": "From Monaco"
    },
    "new_question_correct_value": "Please list the surnames of all the Monegasque drivers."
  },
  {
    "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'Monegasque' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.driverref",
      "drivers.dob",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Monegasque",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "values_list": [
      "drivers.nationality.monegasque"
    ],
    "original_question": "Please state the reference name of the oldest German driver.",
    "question": "Please state the reference name of the oldest From Monaco driver.",
    "original_SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "changes_information": {
      "original_value": "Monegasque",
      "paraphrasing": "From Monaco"
    },
    "new_question_correct_value": "Please state the reference name of the oldest Monegasque driver."
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'March Meeting'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"Meeting in March\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "March Meeting",
      "paraphrasing": "Meeting in March"
    },
    "new_question_correct_value": "Give the location for \"March Meeting\"."
  },
  {
    "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "values_list": [
      "event.event_name.april speaker"
    ],
    "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "question": "Calculate the amount budgeted for 'Meeting in March' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "changes_information": {
      "original_value": "March Meeting",
      "paraphrasing": "Meeting in March"
    },
    "new_question_correct_value": "Calculate the amount budgeted for 'March Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'Meeting in March' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "March Meeting",
      "paraphrasing": "Meeting in March"
    },
    "new_question_correct_value": "What category was budgeted for the 'March Meeting' event and how much was the amount budgeted for that category?"
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'Spring Elections'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Spring Elections",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"Elections in Spring\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "Spring Elections",
      "paraphrasing": "Elections in Spring"
    },
    "new_question_correct_value": "Give the location for \"Spring Elections\"."
  },
  {
    "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Community Service' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.type",
      "event.event_name",
      "event.event_date",
      "event.status"
    ],
    "values": [
      {
        "table": "event",
        "column": "status",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "event",
        "column": "type",
        "value": "Community Service",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
    "values_list": [
      "event.status.closed",
      "event.type.community_service"
    ],
    "original_question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "question": "List the names of closed event as \"Service to the community\" that was closed from 3/15/2019 to 3/20/2020.",
    "original_SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "changes_information": {
      "original_value": "Community Service",
      "paraphrasing": "Service to the community"
    },
    "new_question_correct_value": "List the names of closed event as \"Community Service\" that was closed from 3/15/2019 to 3/20/2020."
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Photosensitivities' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Photosensitivities",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.photosensitivities"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with Sensitivity to photos disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Photosensitivities",
      "paraphrasing": "Sensitivity to photos"
    },
    "new_question_correct_value": "What is the most common sign of patients with Photosensitivities disease?"
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Club shirts'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Club shirts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.club_shirts"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'Shirts for the club' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Club shirts",
      "paraphrasing": "Shirts for the club"
    },
    "new_question_correct_value": "Which budget category does the expense 'Club shirts' fall to?"
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Loyal Retainers'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Loyal Retainers",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Retainers who are loyal\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Loyal Retainers",
      "paraphrasing": "Retainers who are loyal"
    },
    "new_question_correct_value": "Which foreign language used by \"Loyal Retainers\"?"
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name;",
    "values_list": [
      "major.department.art and design department"
    ],
    "original_question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "question": "Please list the full names of the students in the Student_Club that come from the Department of Physics.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "changes_information": {
      "original_value": "Physics Department",
      "paraphrasing": "Department of Physics"
    },
    "new_question_correct_value": "Please list the full names of the students in the Student_Club that come from the Physics Department."
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
    "values_list": [
      "major.department.school of applied sciences, technology and education"
    ],
    "original_question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "question": "List all the members of the \"Department of Physics\" department.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "changes_information": {
      "original_value": "Physics Department",
      "paraphrasing": "Department of Physics"
    },
    "new_question_correct_value": "List all the members of the \"Physics Department\" department."
  },
  {
    "SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Communication Studies'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.major_id",
      "major.major_name",
      "member.last_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Communication Studies",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Law and Constitutional Studies' is the major name",
    "values_list": [
      "major.major_name.law and constitutional studies"
    ],
    "original_question": "List the last name of all the students who majored Law and Constitutional Studies. \n",
    "question": "List the last name of all the students who majored Studies in Communication. \n",
    "original_SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
    "changes_information": {
      "original_value": "Communication Studies",
      "paraphrasing": "Studies in Communication"
    },
    "new_question_correct_value": "List the last name of all the students who majored Communication Studies. \n"
  },
  {
    "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Communication Studies'",
    "tables": [
      "member",
      "event",
      "major",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.link_to_major",
      "member.first_name",
      "attendance.link_to_member",
      "major.major_id",
      "major.major_name",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Community Theater",
        "condition": "="
      },
      {
        "table": "major",
        "column": "major_name",
        "value": "Communication Studies",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
    "values_list": [
      "event.event_name.community theater",
      "major.major_name.interior design"
    ],
    "original_question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "question": "Among the students majored in Studies in Communication, who have attended the Community Theater event?",
    "original_SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "changes_information": {
      "original_value": "Communication Studies",
      "paraphrasing": "Studies in Communication"
    },
    "new_question_correct_value": "Among the students majored in Communication Studies, who have attended the Community Theater event?"
  },
  {
    "SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Communication Studies'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.major_id",
      "major.major_name",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Communication Studies",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Business' is the major name",
    "values_list": [
      "major.major_name.communication_studies"
    ],
    "original_question": "List out the position of members who joined major of Business.",
    "question": "List out the position of members who joined major of Studies in Communication.",
    "original_SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
    "changes_information": {
      "original_value": "Communication Studies",
      "paraphrasing": "Studies in Communication"
    },
    "new_question_correct_value": "List out the position of members who joined major of Communication Studies."
  },
  {
    "SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Communication Studies'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.phone",
      "member.link_to_major",
      "major.major_id",
      "major.major_name",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Communication Studies",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Elementary Education' is the major name; phone numbers refers to phone",
    "values_list": [
      "major.major_name.elementary education"
    ],
    "original_question": "List the last names of students under the Elementary Education major and include their phone numbers.",
    "question": "List the last names of students under the Studies in Communication major and include their phone numbers.",
    "original_SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
    "changes_information": {
      "original_value": "Communication Studies",
      "paraphrasing": "Studies in Communication"
    },
    "new_question_correct_value": "List the last names of students under the Communication Studies major and include their phone numbers."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Weather Control",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Control the weather'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Weather Control",
      "paraphrasing": "Control the weather"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Weather Control'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Weather Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Control the weather?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Weather Control",
      "paraphrasing": "Control the weather"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Weather Control?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Weather Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.weather_control"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Control the weather power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Weather Control",
      "paraphrasing": "Control the weather"
    },
    "new_question_correct_value": "List the name of superheroes with Weather Control power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Weather Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.weather_control"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Control the weather power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Weather Control",
      "paraphrasing": "Control the weather"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Weather Control power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Weather Control'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Weather Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.weather_control"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Control the weather?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Weather Control",
      "paraphrasing": "Control the weather"
    },
    "new_question_correct_value": "What is the power ID of Weather Control?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Weather Control'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Weather Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Control the weather.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Weather Control",
      "paraphrasing": "Control the weather"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Weather Control."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'hypothesis-testing' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "hypothesis-testing",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.hypothesis-testing"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'hypothesis_testing.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "hypothesis-testing",
      "punct_change": "hypothesis_testing"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'hypothesis-testing.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'hypothesis-testing'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "hypothesis-testing",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.hypothesis-testing"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the hypothesis_testing Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "hypothesis-testing",
      "punct_change": "hypothesis_testing"
    },
    "new_question_correct_value": "List all the name of users that obtained the hypothesis-testing Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'hypothesis-testing'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "hypothesis-testing",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.hypothesis-testing"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the hypothesis_testing badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "hypothesis-testing",
      "punct_change": "hypothesis_testing"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the hypothesis-testing badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'hypothesis-testing' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "hypothesis-testing",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.hypothesis-testing"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first hypothesis_testing badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "hypothesis-testing",
      "punct_change": "hypothesis_testing"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first hypothesis-testing badge?"
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "mercedes-benz",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.mercedes-benz"
    ],
    "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "question": "For model mercedes_benz, how many cylinders does the car with the least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "mercedes-benz",
      "punct_change": "mercedes_benz"
    },
    "new_question_correct_value": "For model mercedes-benz, how many cylinders does the car with the least accelerate have?"
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "mercedes-benz",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.mercedes-benz"
    ],
    "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "question": "For a mercedes_benz model, how many cylinders does the version with least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "mercedes-benz",
      "punct_change": "mercedes_benz"
    },
    "new_question_correct_value": "For a mercedes-benz model, how many cylinders does the version with least accelerate have?"
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Zoltan Boros & Gabor Szikszai'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Zoltan Boros & Gabor Szikszai",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Zoltan Boros, Gabor Szikszai.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Zoltan Boros & Gabor Szikszai",
      "punct_change": "Zoltan Boros, Gabor Szikszai"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Zoltan Boros & Gabor Szikszai."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Zoltan Boros & Gabor Szikszai'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Zoltan Boros & Gabor Szikszai",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Zoltan Boros, Gabor Szikszai cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Zoltan Boros & Gabor Szikszai",
      "punct_change": "Zoltan Boros, Gabor Szikszai"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Zoltan Boros & Gabor Szikszai cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Zoltan Boros & Gabor Szikszai' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Zoltan Boros & Gabor Szikszai",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Zoltan Boros, Gabor Szikszai artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Zoltan Boros & Gabor Szikszai",
      "punct_change": "Zoltan Boros, Gabor Szikszai"
    },
    "new_question_correct_value": "Is there any card from Zoltan Boros & Gabor Szikszai artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Zoltan Boros & Gabor Szikszai'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Zoltan Boros & Gabor Szikszai",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Zoltan Boros, Gabor Szikszai created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Zoltan Boros & Gabor Szikszai",
      "punct_change": "Zoltan Boros, Gabor Szikszai"
    },
    "new_question_correct_value": "What kind of printing is on the card that Zoltan Boros & Gabor Szikszai created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Zoltan Boros & Gabor Szikszai' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Zoltan Boros & Gabor Szikszai",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Zoltan Boros, Gabor Szikszai? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Zoltan Boros & Gabor Szikszai",
      "punct_change": "Zoltan Boros, Gabor Szikszai"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Zoltan Boros & Gabor Szikszai? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Zoltan Boros & Gabor Szikszai'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Zoltan Boros & Gabor Szikszai",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Zoltan Boros, Gabor Szikszai worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Zoltan Boros & Gabor Szikszai",
      "punct_change": "Zoltan Boros, Gabor Szikszai"
    },
    "new_question_correct_value": "List all the frame styles and cards Zoltan Boros & Gabor Szikszai worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena,mtgo' AND BorderColor = 'black'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.bordercolor",
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "arena,mtgo",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "bordercolor",
        "value": "black",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.arena,mtgo",
      "cards.bordercolor.black"
    ],
    "original_question": "List the artists who illustrated cards with black borders which are available only in arena.",
    "question": "List the artists who illustrated cards with black borders which are available only in arena;mtgo.",
    "original_SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "changes_information": {
      "original_value": "arena,mtgo",
      "punct_change": "arena;mtgo"
    },
    "new_question_correct_value": "List the artists who illustrated cards with black borders which are available only in arena,mtgo."
  },
  {
    "SQL": "SELECT artist FROM cards WHERE flavorName = 'Godzilla, King of the Monsters'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.flavorname"
    ],
    "values": [
      {
        "table": "cards",
        "column": "flavorname",
        "value": "Godzilla, King of the Monsters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
    "values_list": [
      "cards.flavorname.battra, dark destroyer"
    ],
    "original_question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
    "question": "Which artist designed the card whose promotional name is \"Godzilla; King of the Monsters\"?",
    "original_SQL": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
    "changes_information": {
      "original_value": "Godzilla, King of the Monsters",
      "punct_change": "Godzilla; King of the Monsters"
    },
    "new_question_correct_value": "Which artist designed the card whose promotional name is \"Godzilla, King of the Monsters\"?"
  },
  {
    "SQL": "SELECT id FROM cards WHERE frameEffects = 'legendary,extendedart' GROUP BY id",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.id",
      "cards.frameeffects"
    ],
    "values": [
      {
        "table": "cards",
        "column": "frameeffects",
        "value": "legendary,extendedart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
    "values_list": [
      "cards.frameeffects.legendary,extendedart"
    ],
    "original_question": "How many cards have frame effect as extendedart? List out the id of those cards.",
    "question": "How many cards have frame effect as legendary;extendedart? List out the id of those cards.",
    "original_SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
    "changes_information": {
      "original_value": "legendary,extendedart",
      "punct_change": "legendary;extendedart"
    },
    "new_question_correct_value": "How many cards have frame effect as legendary,extendedart? List out the id of those cards."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Flash,Reach'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Flash,Reach",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.flash,reach"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Flash;Reach?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Flash,Reach",
      "punct_change": "Flash;Reach"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Flash,Reach?"
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Angel'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Creature - Angel",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Creature & Angel and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Creature - Angel",
      "punct_change": "Creature & Angel"
    },
    "new_question_correct_value": "List down the name of cards with original types of Creature - Angel and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Angel' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Creature - Angel",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.creature_-_angel",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the Creature & Angel cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Creature - Angel",
      "punct_change": "Creature & Angel"
    },
    "new_question_correct_value": "Among the Creature - Angel cards, which are black color and comes with foreign languague translation?"
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'tourney,fnm'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "tourney,fnm",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.tourney,fnm"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"tourney&fnm\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "tourney,fnm",
      "punct_change": "tourney&fnm"
    },
    "new_question_correct_value": "Please list the websites where I can purchase the cards that have the promotional type of \"tourney,fnm\"."
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Tribal,Instant'",
    "tables": [
      "rulings",
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.types",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "types",
        "value": "Tribal,Instant",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
    "values_list": [
      "legalities.status.legal",
      "cards.types.tribal,instant"
    ],
    "original_question": "Lists by ID all Creature-type cards with legal status.",
    "question": "Lists by ID all Tribal-Instant-type cards with legal status.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "changes_information": {
      "original_value": "Tribal,Instant",
      "punct_change": "Tribal-Instant"
    },
    "new_question_correct_value": "Lists by ID all Tribal,Instant-type cards with legal status."
  },
  {
    "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
    "question": "Name the foreign name of the card that has set [HOU] watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_change": "set [HOU]"
    },
    "new_question_correct_value": "Name the foreign name of the card that has set (HOU) watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "foreign_data.flavortext",
      "cards.watermark",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
    "question": "What is the language and flavor text of the card that has set [HOU] watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_change": "set [HOU]"
    },
    "new_question_correct_value": "What is the language and flavor text of the card that has set (HOU) watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
    "question": "Name the foreign name of the card that has set [HOU] watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_change": "set [HOU]"
    },
    "new_question_correct_value": "Name the foreign name of the card that has set (HOU) watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "What is the language of the card that has azorius watermark? List out the type of this card.",
    "question": "What is the language of the card that has set [HOU] watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_change": "set [HOU]"
    },
    "new_question_correct_value": "What is the language of the card that has set (HOU) watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Monte-Carlo'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Monte-Carlo",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.monte-carlo"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in Monte_Carlo.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Monte-Carlo",
      "punct_change": "Monte_Carlo"
    },
    "new_question_correct_value": "Please list the year during which the race is held on circuits in Monte-Carlo."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Barcelona-Catalunya",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Circuit de Barcelona,Catalunya be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Circuit de Barcelona-Catalunya",
      "punct_change": "Circuit de Barcelona,Catalunya"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Barcelona-Catalunya",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Circuit de Barcelona,Catalunya?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Circuit de Barcelona-Catalunya",
      "punct_change": "Circuit de Barcelona,Catalunya"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Circuit de Barcelona-Catalunya?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Barcelona-Catalunya",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Circuit de Barcelona,Catalunya.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Circuit de Barcelona-Catalunya",
      "punct_change": "Circuit de Barcelona,Catalunya"
    },
    "new_question_correct_value": "Please list the time of the races held on Circuit de Barcelona-Catalunya."
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Barcelona-Catalunya",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Circuit de Barcelona,Catalunya?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Circuit de Barcelona-Catalunya",
      "punct_change": "Circuit de Barcelona,Catalunya"
    },
    "new_question_correct_value": "What's the location coordinates of Circuit de Barcelona-Catalunya?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Barcelona-Catalunya",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Circuit de Barcelona,Catalunya?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Circuit de Barcelona-Catalunya",
      "punct_change": "Circuit de Barcelona,Catalunya"
    },
    "new_question_correct_value": "What's the reference name of Circuit de Barcelona-Catalunya?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Barcelona-Catalunya",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Circuit de Barcelona,Catalunya was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Circuit de Barcelona-Catalunya",
      "punct_change": "Circuit de Barcelona,Catalunya"
    },
    "new_question_correct_value": "Please list all the years that Circuit de Barcelona-Catalunya was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Barcelona-Catalunya",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Circuit de Barcelona,Catalunya.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Circuit de Barcelona-Catalunya",
      "punct_change": "Circuit de Barcelona,Catalunya"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Circuit de Barcelona-Catalunya."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Barcelona-Catalunya",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.circuit_de_barcelona-catalunya"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Circuit de Barcelona,Catalunya circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Circuit de Barcelona-Catalunya",
      "punct_change": "Circuit de Barcelona,Catalunya"
    },
    "new_question_correct_value": "In which location does the Circuit de Barcelona-Catalunya circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Black/Blue'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Black/Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.black/blue"
    ],
    "original_question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and Black,Blue hair.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "changes_information": {
      "original_value": "Black/Blue",
      "punct_change": "Black,Blue"
    },
    "new_question_correct_value": "Please list the superhero names of all the superheroes that have blue eyes and Black/Blue hair."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Black/Blue'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Black/Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.black/blue"
    ],
    "original_question": "Which superheroes have blue eyes with brown hair?",
    "question": "Which superheroes have blue eyes with Black,Blue hair?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "changes_information": {
      "original_value": "Black/Blue",
      "punct_change": "Black,Blue"
    },
    "new_question_correct_value": "Which superheroes have blue eyes with Black/Blue hair?"
  },
  {
    "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Black/Blue' AND T4.gender = 'Male'",
    "tables": [
      "race",
      "superhero",
      "gender",
      "colour"
    ],
    "columns": [
      "gender.gender",
      "race.id",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Black/Blue",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Male",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
    "values_list": [
      "colour.colour.black/blue",
      "gender.gender.male"
    ],
    "original_question": "Give the race of the blue-haired male superhero.",
    "question": "Give the race of the Black,Blue-haired male superhero.",
    "original_SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "changes_information": {
      "original_value": "Black/Blue",
      "punct_change": "Black,Blue"
    },
    "new_question_correct_value": "Give the race of the Black/Blue-haired male superhero."
  },
  {
    "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha'",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "district.a2",
      "account.account_id",
      "account.district_id",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a2",
        "value": "Hl.m. Praha",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "A2 refers to the names of districts.",
    "values_list": [
      "district.a2.hl.m._praha"
    ],
    "original_question": "List account ID and account opening date for accounts from 'Prachatice'.",
    "question": "List account ID and account opening date for accounts from 'Hl,m. Praha'.",
    "original_SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
    "changes_information": {
      "original_value": "Hl.m. Praha",
      "punct_change": "Hl,m. Praha"
    },
    "new_question_correct_value": "List account ID and account opening date for accounts from 'Hl.m. Praha'."
  },
  {
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Argentine-Italian' ORDER BY dob DESC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.dob",
      "drivers.forename",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine-Italian",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "values_list": [
      "drivers.nationality.argentine-italian"
    ],
    "original_question": "How old is the youngest Japanese driver? What is his name?",
    "question": "How old is the youngest Argentine;Italian driver? What is his name?",
    "original_SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "changes_information": {
      "original_value": "Argentine-Italian",
      "punct_change": "Argentine;Italian"
    },
    "new_question_correct_value": "How old is the youngest Argentine-Italian driver? What is his name?"
  },
  {
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'Argentine-Italian'",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine-Italian",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Italian refers to nationality = 'italian'",
    "values_list": [
      "drivers.nationality.argentine-italian"
    ],
    "original_question": "Please list the surnames of all the Italian drivers.",
    "question": "Please list the surnames of all the Argentine;Italian drivers.",
    "original_SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "changes_information": {
      "original_value": "Argentine-Italian",
      "punct_change": "Argentine;Italian"
    },
    "new_question_correct_value": "Please list the surnames of all the Argentine-Italian drivers."
  },
  {
    "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'Argentine-Italian' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.driverref",
      "drivers.dob",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine-Italian",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "values_list": [
      "drivers.nationality.argentine-italian"
    ],
    "original_question": "Please state the reference name of the oldest German driver.",
    "question": "Please state the reference name of the oldest Argentine;Italian driver.",
    "original_SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "changes_information": {
      "original_value": "Argentine-Italian",
      "punct_change": "Argentine;Italian"
    },
    "new_question_correct_value": "Please state the reference name of the oldest Argentine-Italian driver."
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'Officers meeting - January'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Officers meeting - January",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"Officers meeting , January\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "Officers meeting - January",
      "punct_change": "Officers meeting , January"
    },
    "new_question_correct_value": "Give the location for \"Officers meeting - January\"."
  },
  {
    "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Officers meeting - January' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Officers meeting - January",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "values_list": [
      "event.event_name.april speaker"
    ],
    "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "question": "Calculate the amount budgeted for 'Officers meeting , January' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "changes_information": {
      "original_value": "Officers meeting - January",
      "punct_change": "Officers meeting , January"
    },
    "new_question_correct_value": "Calculate the amount budgeted for 'Officers meeting - January' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Officers meeting - January'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Officers meeting - January",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'Officers meeting , January' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "Officers meeting - January",
      "punct_change": "Officers meeting , January"
    },
    "new_question_correct_value": "What category was budgeted for the 'Officers meeting - January' event and how much was the amount budgeted for that category?"
  },
  {
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'MCTD, AMI'",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.id",
      "examination.diagnosis",
      "examination.examination date"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "MCTD, AMI",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "values_list": [
      "examination.diagnosis.mctd,_ami"
    ],
    "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "question": "Lists all patients by ID who were diagnosed with MCTD; AMI's and had their exams between 01/01/197 and 12/31/1997.",
    "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "changes_information": {
      "original_value": "MCTD, AMI",
      "punct_change": "MCTD; AMI"
    },
    "new_question_correct_value": "Lists all patients by ID who were diagnosed with MCTD, AMI's and had their exams between 01/01/197 and 12/31/1997."
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'MCTD, AMI' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "MCTD, AMI",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.mctd,_ami"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with MCTD; AMI disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "MCTD, AMI",
      "punct_change": "MCTD; AMI"
    },
    "new_question_correct_value": "What is the most common sign of patients with MCTD, AMI disease?"
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Post Cards, Posters'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Post Cards, Posters",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.post_cards,_posters"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'Post Cards& Posters' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Post Cards, Posters",
      "punct_change": "Post Cards& Posters"
    },
    "new_question_correct_value": "Which budget category does the expense 'Post Cards, Posters' fall to?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in Portuguese [Brazil].",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    },
    "new_question_correct_value": "Name all the cards which have alternative language in Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Phyrexian' is the language; name of artists refers to artist;",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "question": "Please provide the names of the artists who illustrated the card art in Portuguese [Brazil].",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    },
    "new_question_correct_value": "Please provide the names of the artists who illustrated the card art in Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in Portuguese [Brazil].",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    },
    "new_question_correct_value": "List down the name of artists for cards in Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and Portuguese [Brazil] language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    },
    "new_question_correct_value": "What are the cards that only available in paper and Portuguese (Brazil) language?"
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Portuguese (Brazil)'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in Portuguese [Brazil]. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    },
    "new_question_correct_value": "Calculate the percentage of cards in Portuguese (Brazil). List them by name."
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Portuguese [Brazil].",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    },
    "new_question_correct_value": "Lists all types of cards in Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Portuguese [Brazil] text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    },
    "new_question_correct_value": "Please list the Portuguese (Brazil) text ruling of all the cards in the set Coldsnap."
  },
  {
    "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)' ORDER BY T2.convertedManaCost DESC",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the Portuguese [Brazil] names of the cards in the set Coldsnap with the highest converted mana cost.",
    "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    },
    "new_question_correct_value": "Please list the Portuguese (Brazil) names of the cards in the set Coldsnap with the highest converted mana cost."
  },
  {
    "SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'RA, SLE susp' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "tables": [
      "patient",
      "laboratory"
    ],
    "columns": [
      "laboratory.date",
      "patient.diagnosis",
      "laboratory.id",
      "patient.id",
      "patient.first date",
      "patient.birthday"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "RA, SLE susp",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
    "values_list": [
      "patient.diagnosis.ra,_sle_susp"
    ],
    "original_question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "question": "The oldest RA/ SLE susp patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "original_SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "changes_information": {
      "original_value": "RA, SLE susp",
      "punct_change": "RA/ SLE susp"
    },
    "new_question_correct_value": "The oldest RA, SLE susp patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?"
  },
  {
    "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'RA, SLE susp' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "tables": [
      "patient"
    ],
    "columns": [
      "patient.first date",
      "patient.diagnosis",
      "patient.sex"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "RA, SLE susp",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
    "values_list": [
      "patient.diagnosis.ra,_sle_susp"
    ],
    "original_question": "What was the gender of the first AORTITIS diagnosed patient?",
    "question": "What was the gender of the first RA/ SLE susp diagnosed patient?",
    "original_SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "changes_information": {
      "original_value": "RA, SLE susp",
      "punct_change": "RA/ SLE susp"
    },
    "new_question_correct_value": "What was the gender of the first RA, SLE susp diagnosed patient?"
  },
  {
    "SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'RA, SLE susp' AND T2.PLT BETWEEN 100 AND 400",
    "tables": [
      "patient",
      "laboratory"
    ],
    "columns": [
      "patient.diagnosis",
      "patient.id",
      "laboratory.plt",
      "laboratory.id"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "RA, SLE susp",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
    "values_list": [
      "patient.diagnosis.ra,_sle_susp"
    ],
    "original_question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
    "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with RA/ SLE susp.",
    "original_SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400",
    "changes_information": {
      "original_value": "RA, SLE susp",
      "punct_change": "RA/ SLE susp"
    },
    "new_question_correct_value": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with RA, SLE susp."
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abdul-Yakinu Iddi",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Abdul_Yakinu Iddi?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Abdul-Yakinu Iddi",
      "punct_change": "Abdul_Yakinu Iddi"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Abdul-Yakinu Iddi?"
  },
  {
    "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi' AND strftime('%Y', t2.date) = '2011'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abdul-Yakinu Iddi",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "values_list": [
      "player.player_name.gabriel tamas"
    ],
    "original_question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "question": "What is the overall rating of the football player Abdul_Yakinu Iddi in year 2011?",
    "original_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "changes_information": {
      "original_value": "Abdul-Yakinu Iddi",
      "punct_change": "Abdul_Yakinu Iddi"
    },
    "new_question_correct_value": "What is the overall rating of the football player Abdul-Yakinu Iddi in year 2011?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abdul-Yakinu Iddi",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Abdul_Yakinu Iddi\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Abdul-Yakinu Iddi",
      "punct_change": "Abdul_Yakinu Iddi"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Abdul-Yakinu Iddi\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abdul-Yakinu Iddi",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Abdul_Yakinu Iddi's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Abdul-Yakinu Iddi",
      "punct_change": "Abdul_Yakinu Iddi"
    },
    "new_question_correct_value": "What is Abdul-Yakinu Iddi's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abdul-Yakinu Iddi",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Abdul_Yakinu Iddi?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Abdul-Yakinu Iddi",
      "punct_change": "Abdul_Yakinu Iddi"
    },
    "new_question_correct_value": "What's the heading accuracy of Abdul-Yakinu Iddi?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abdul-Yakinu Iddi",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Abdul_Yakinu Iddi?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Abdul-Yakinu Iddi",
      "punct_change": "Abdul_Yakinu Iddi"
    },
    "new_question_correct_value": "Which foot is preferred by Abdul-Yakinu Iddi?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Abdul-Yakinu Iddi'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abdul-Yakinu Iddi",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
    "values_list": [
      "player.player_name.francesco parravicini"
    ],
    "original_question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "question": "What was the potiential for Abdul_Yakinu Iddi on 2010/8/30?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "changes_information": {
      "original_value": "Abdul-Yakinu Iddi",
      "punct_change": "Abdul_Yakinu Iddi"
    },
    "new_question_correct_value": "What was the potiential for Abdul-Yakinu Iddi on 2010/8/30?"
  },
  {
    "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Abdul-Yakinu Iddi'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.defensive_work_rate",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abdul-Yakinu Iddi",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
    "values_list": [
      "player.player_name.kevin berigaud"
    ],
    "original_question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
    "question": "Tell the defensive work rate for Abdul_Yakinu Iddi on 2013/2/22.",
    "original_SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
    "changes_information": {
      "original_value": "Abdul-Yakinu Iddi",
      "punct_change": "Abdul_Yakinu Iddi"
    },
    "new_question_correct_value": "Tell the defensive work rate for Abdul-Yakinu Iddi on 2013/2/22."
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Abdul-Yakinu Iddi' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abdul-Yakinu Iddi",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Abdul_Yakinu Iddi have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Abdul-Yakinu Iddi",
      "punct_change": "Abdul_Yakinu Iddi"
    },
    "new_question_correct_value": "When was the first time did Abdul-Yakinu Iddi have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Caesar III: An Empire Without End'",
    "tables": [
      "program",
      "director"
    ],
    "columns": [
      "program.title",
      "program.director_id",
      "director.director_id",
      "director.name"
    ],
    "values": [
      {
        "table": "program",
        "column": "title",
        "value": "Caesar III: An Empire Without End",
        "condition": "="
      }
    ],
    "db_id": "bbc_channels",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "program.title.caesar_iii:_an_empire_without_end"
    ],
    "original_question": "What is the name of the director who is in the \"Dracula\" program?",
    "question": "What is the name of the director who is in the \"Caesar III; An Empire Without End\" program?",
    "original_SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "changes_information": {
      "original_value": "Caesar III: An Empire Without End",
      "punct_change": "Caesar III; An Empire Without End"
    },
    "new_question_correct_value": "What is the name of the director who is in the \"Caesar III: An Empire Without End\" program?"
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Hanna-Barbera'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Hanna-Barbera",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by Hanna,Barbera by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "Hanna-Barbera",
      "punct_change": "Hanna,Barbera"
    },
    "new_question_correct_value": "Rank heroes published by Hanna-Barbera by their height in descending order."
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Hanna-Barbera' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Hanna-Barbera",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from Hanna,Barbera by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "Hanna-Barbera",
      "punct_change": "Hanna,Barbera"
    },
    "new_question_correct_value": "Rank superheroes from Hanna-Barbera by their eye color popularity, starting with the most common color."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Hanna-Barbera' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Strength",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Hanna-Barbera",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Hanna,Barbera who have the super power of 'Super Strength'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Hanna-Barbera",
      "punct_change": "Hanna,Barbera"
    },
    "new_question_correct_value": "List the superheroes from Hanna-Barbera who have the super power of 'Super Strength'."
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Hanna-Barbera'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Hanna-Barbera",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of Hanna,Barbera.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "Hanna-Barbera",
      "punct_change": "Hanna,Barbera"
    },
    "new_question_correct_value": "Give the publisher ID of Hanna-Barbera."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Hanna-Barbera' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Hanna-Barbera",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.durability"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most durability published by Hanna,Barbera?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Hanna-Barbera",
      "punct_change": "Hanna,Barbera"
    },
    "new_question_correct_value": "Which superhero has the most durability published by Hanna-Barbera?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Hanna-Barbera' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Hanna-Barbera",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in Hanna,Barbera.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "Hanna-Barbera",
      "punct_change": "Hanna,Barbera"
    },
    "new_question_correct_value": "Identify the heaviest superhero in Hanna-Barbera."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'God / Eternal'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "God / Eternal",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.god_/_eternal"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the God - Eternal superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "God / Eternal",
      "punct_change": "God - Eternal"
    },
    "new_question_correct_value": "Give the name of the God / Eternal superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'God / Eternal'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "God / Eternal",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.god_/_eternal"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of God - Eternal superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "God / Eternal",
      "punct_change": "God - Eternal"
    },
    "new_question_correct_value": "List down at least five full name of God / Eternal superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'God / Eternal'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "God / Eternal",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "values_list": [
      "race.race.god_/_eternal"
    ],
    "original_question": "Provide the full names of vampire heroes.",
    "question": "Provide the full names of God - Eternal heroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "changes_information": {
      "original_value": "God / Eternal",
      "punct_change": "God - Eternal"
    },
    "new_question_correct_value": "Provide the full names of God / Eternal heroes."
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Frank (Butch)'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Frank (Butch)",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.frank_(butch)"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Frank [Buch]. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Frank (Butch)",
      "punct_change": "Frank [Buch]"
    },
    "new_question_correct_value": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Frank (Butch). List the district code of the school."
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Agua-Dulce' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "Agua-Dulce",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.agua-dulce"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of Agua_Dulce?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Agua-Dulce",
      "punct_change": "Agua_Dulce"
    },
    "new_question_correct_value": "What is the most common type of grade span served in the city of Agua-Dulce?"
  },
  {
    "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.totalsetsize",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "List all the sets available in Italian translation. State the total number of cards per set.",
    "question": "List all the sets available in Portuguese {Brasil} translation. State the total number of cards per set.",
    "original_SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese {Brasil}"
    },
    "new_question_correct_value": "List all the sets available in Portuguese (Brazil) translation. State the total number of cards per set."
  },
  {
    "SQL": "SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)'",
    "tables": [
      "set_translations"
    ],
    "columns": [
      "set_translations.setcode",
      "set_translations.language"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; set code refers to setCode",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Lists the set code of all cards translated into Spanish.",
    "question": "Lists the set code of all cards translated into Portuguese {Brasil}.",
    "original_SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese {Brasil}"
    },
    "new_question_correct_value": "Lists the set code of all cards translated into Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Portuguese (Brazil)' ORDER BY T1.id LIMIT 2",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.id",
      "sets.block",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "block",
        "value": "Shadowmoor",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "sets.block.shadowmoor",
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "question": "Please list top two sets of cards with their IDs that have Portuguese {Brasil}-language cards and are located in the Shadowmoor block in alphabetical order.",
    "original_SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese {Brasil}"
    },
    "new_question_correct_value": "Please list top two sets of cards with their IDs that have Portuguese (Brazil)-language cards and are located in the Shadowmoor block in alphabetical order."
  },
  {
    "SQL": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.id",
      "sets.basesetsize",
      "set_translations.setcode"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Which Russian set of cards contains the most cards overall?",
    "question": "Which Portuguese {Brasil} set of cards contains the most cards overall?",
    "original_SQL": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese {Brasil}"
    },
    "new_question_correct_value": "Which Portuguese (Brazil) set of cards contains the most cards overall?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'Portuguese (Brazil)' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Tendo Ice Bridge",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the Portuguese {Brasil} name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese {Brasil}"
    },
    "new_question_correct_value": "What's the Portuguese (Brazil) name of the set of cards with \"Tendo Ice Bridge\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Portuguese (Brazil)' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fellwar Stone",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Portuguese {Brasil} name of the set which card \"Fellwar Stone\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese {Brasil}"
    },
    "new_question_correct_value": "Tell the Portuguese (Brazil) name of the set which card \"Fellwar Stone\" is in it."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "cards.setcode",
      "cards.name",
      "set_translations.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
    "question": "Please list the names of the cards in the set \"From The Vault; Lore\".",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_change": "From The Vault; Lore"
    },
    "new_question_correct_value": "Please list the names of the cards in the set \"From The Vault: Lore\"."
  },
  {
    "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.basesetsize"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
    "question": "How many cards are there in the base set of \"From The Vault; Lore\"?",
    "original_SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_change": "From The Vault; Lore"
    },
    "new_question_correct_value": "How many cards are there in the base set of \"From The Vault: Lore\"?"
  },
  {
    "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
    "question": "What is the expansion type of the set \"From The Vault; Lore\"?",
    "original_SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_change": "From The Vault; Lore"
    },
    "new_question_correct_value": "What is the expansion type of the set \"From The Vault: Lore\"?"
  },
  {
    "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.basesetsize"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
    "values_list": [
      "set_translations.translation.rinascita di alara"
    ],
    "original_question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
    "question": "What is the number of cards are there in the set of \"From The Vault; Lore\"?",
    "original_SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_change": "From The Vault; Lore"
    },
    "new_question_correct_value": "What is the number of cards are there in the set of \"From The Vault: Lore\"?"
  },
  {
    "SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'",
    "values_list": [
      "set_translations.translation.ola de fr\u00edo"
    ],
    "original_question": "What is the release date for the set \"Ola de fr\u00edo\"?",
    "question": "What is the release date for the set \"From The Vault; Lore\"?",
    "original_SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_change": "From The Vault; Lore"
    },
    "new_question_correct_value": "What is the release date for the set \"From The Vault: Lore\"?"
  },
  {
    "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'draft_innovation' GROUP BY T2.setCode",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "draft_innovation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "code of sets refers to setCode",
    "values_list": [
      "sets.type.draft_innovation"
    ],
    "original_question": "Give the code of sets have expansion type of 'expansion'?",
    "question": "Give the code of sets have draft-innovation type of 'expansion'?",
    "original_SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
    "changes_information": {
      "original_value": "draft_innovation",
      "punct_change": "draft-innovation"
    },
    "new_question_correct_value": "Give the code of sets have draft_innovation type of 'expansion'?"
  },
  {
    "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'draft_innovation'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "draft_innovation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "code of sets refers to setCode",
    "values_list": [
      "sets.type.draft_innovation"
    ],
    "original_question": "Give the code of sets have expansion commander type?",
    "question": "Give the code of sets have expansion draft-innovation type?",
    "original_SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
    "changes_information": {
      "original_value": "draft_innovation",
      "punct_change": "draft-innovation"
    },
    "new_question_correct_value": "Give the code of sets have expansion draft_innovation type?"
  },
  {
    "SQL": "SELECT id FROM sets WHERE type = 'draft_innovation' ORDER BY totalSetSize DESC LIMIT 1",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.id",
      "sets.type",
      "sets.totalsetsize"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "draft_innovation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
    "values_list": [
      "sets.type.draft_innovation"
    ],
    "original_question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "question": "Among the sets whose expansion type is draft-innovation, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "original_SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
    "changes_information": {
      "original_value": "draft_innovation",
      "punct_change": "draft-innovation"
    },
    "new_question_correct_value": "Among the sets whose expansion type is draft_innovation, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Teth-Adam'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Teth/Adam?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    },
    "new_question_correct_value": "What is the eyes colour of Teth-Adam?"
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Teth-Adam'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Teth/Adam.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    },
    "new_question_correct_value": "Provide the hero name and race of Teth-Adam."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Teth-Adam'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Teth/Adam.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    },
    "new_question_correct_value": "List the powers of Teth-Adam."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Teth-Adam'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Teth/Adam as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    },
    "new_question_correct_value": "Provide the eye colour of the superhero who has Teth-Adam as their full name."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Teth-Adam'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Teth/Adam as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Teth-Adam as their full name?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Teth-Adam'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Teth/Adam.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    },
    "new_question_correct_value": "Name the superhero, otherwise known as Teth-Adam."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "Please list all the superpowers of 3-D Man.",
    "question": "Please list all the superpowers of Ant_Man.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "Please list all the superpowers of Ant-Man."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of Ant_Man's skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "What is the colour of Ant-Man's skin?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "Who is the publisher of Sauron?",
    "question": "Who is the publisher of Ant_Man?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "Who is the publisher of Ant-Man?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of Ant_Man?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "What is the publisher's name of Ant-Man?"
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is Ant_Man's race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "What is Ant-Man's race?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "Provide the superpowers of the superhero called Deathlok.",
    "question": "Provide the superpowers of the superhero called Ant_Man.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "Provide the superpowers of the superhero called Ant-Man."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero Ant_Man.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "Indicate the attribute value of superhero Ant-Man."
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero Ant_Man belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "Which group does superhero Ant-Man belong to?"
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of Ant_Man hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "What is the gender of Ant-Man hero?"
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of Ant_Man?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "What are the race and alignment of Ant-Man?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "What is Abomination's superpower?",
    "question": "What is Ant_Man's superpower?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "What is Ant-Man's superpower?"
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of Ant_Man's attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "State all of Ant-Man's attributes along with their values."
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named Ant_Man.",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "Give the alignment and superpowers of the superhero named Ant-Man."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down Ant_Man's superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "List down Ant-Man's superpowers."
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Ant-Man' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the Ant_Man.",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "Identify the weakest attribute of the Ant-Man."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "What is Abomination's eye colour?",
    "question": "What is Ant_Man's eye colour?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "What is Ant-Man's eye colour?"
  },
  {
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Ant-Man'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "Provide the full name of the superhero named Alien.",
    "question": "Provide the full name of the superhero named Ant_Man.",
    "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "Provide the full name of the superhero named Ant-Man."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named Ant_Man.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "List the attribute value of the superhero named Ant-Man."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of Ant_Man.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    },
    "new_question_correct_value": "Give the eye colour of Ant-Man."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Technopath/Cyberpath' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Technopath/Cyberpath",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Technopath;Cyberpath'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Technopath/Cyberpath",
      "punct_change": "Technopath;Cyberpath"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Technopath/Cyberpath'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Technopath/Cyberpath'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Technopath/Cyberpath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Technopath;Cyberpath?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Technopath/Cyberpath",
      "punct_change": "Technopath;Cyberpath"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Technopath/Cyberpath?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Technopath/Cyberpath'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Technopath/Cyberpath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.technopath/cyberpath"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Technopath;Cyberpath power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Technopath/Cyberpath",
      "punct_change": "Technopath;Cyberpath"
    },
    "new_question_correct_value": "List the name of superheroes with Technopath/Cyberpath power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Technopath/Cyberpath'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Technopath/Cyberpath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.technopath/cyberpath"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Technopath;Cyberpath power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Technopath/Cyberpath",
      "punct_change": "Technopath;Cyberpath"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Technopath/Cyberpath power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Technopath/Cyberpath'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Technopath/Cyberpath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.technopath/cyberpath"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Technopath;Cyberpath?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Technopath/Cyberpath",
      "punct_change": "Technopath;Cyberpath"
    },
    "new_question_correct_value": "What is the power ID of Technopath/Cyberpath?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Technopath/Cyberpath'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Technopath/Cyberpath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Technopath;Cyberpath.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Technopath/Cyberpath",
      "punct_change": "Technopath;Cyberpath"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Technopath/Cyberpath."
  },
  {
    "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'hypothesis-testing'",
    "tables": [
      "tags",
      "posts"
    ],
    "columns": [
      "posts.id",
      "tags.tagname",
      "posts.body",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "hypothesis-testing",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
    "values_list": [
      "tags.tagname.hypothesis-testing"
    ],
    "original_question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "question": "From which post is the tag \"hypothesis,testing\" excerpted from? Please give the body of the post.",
    "original_SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "changes_information": {
      "original_value": "hypothesis-testing",
      "punct_change": "hypothesis,testing"
    },
    "new_question_correct_value": "From which post is the tag \"hypothesis-testing\" excerpted from? Please give the body of the post."
  },
  {
    "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "tables": [
      "tags",
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "tags.excerptpostid",
      "posts.owneruserid",
      "users.location",
      "users.id",
      "users.displayname",
      "tags.tagname"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "hypothesis-testing",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
    "values_list": [
      "tags.tagname.hypothesis-testing"
    ],
    "original_question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis,testing tag.",
    "original_SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "changes_information": {
      "original_value": "hypothesis-testing",
      "punct_change": "hypothesis,testing"
    },
    "new_question_correct_value": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'hypothesis-testing'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "hypothesis-testing",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.hypothesis-testing"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named hypothesis,testing?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "hypothesis-testing",
      "punct_change": "hypothesis,testing"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named hypothesis-testing?"
  },
  {
    "SQL": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'B-M'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team.team_short_name",
      "team_attributes.buildupplaypassingclass",
      "team_attributes.team_api_id"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_short_name",
        "value": "B-M",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';",
    "values_list": [
      "team.team_short_name.b-m"
    ],
    "original_question": "What is the passing class of CLB team?",
    "question": "What is the passing class of B;M team?",
    "original_SQL": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'",
    "changes_information": {
      "original_value": "B-M",
      "punct_change": "B;M"
    },
    "new_question_correct_value": "What is the passing class of B-M team?"
  },
  {
    "SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'B-M'",
    "tables": [
      "team"
    ],
    "columns": [
      "team.team_short_name",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_short_name",
        "value": "B-M",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "long name for the team refers to team_long_name; team_short_name = 'GEN';",
    "values_list": [
      "team.team_short_name.b-m"
    ],
    "original_question": "What's the long name for the team GEN?",
    "question": "What's the long name for the team B;M?",
    "original_SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
    "changes_information": {
      "original_value": "B-M",
      "punct_change": "B;M"
    },
    "new_question_correct_value": "What's the long name for the team B-M?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'hannes.koller'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user hannes,koller?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "Please list the titles of the posts owned by the user hannes.koller?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'hannes.koller' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by hannes,koller and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "What is the title of the post that is owned by hannes.koller and has the highest popularity?"
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'hannes.koller'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by hannes,koller.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "Please list the names of the badges obtained by hannes.koller."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'hannes.koller'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"hannes,koller\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "For the user whose display name is \"hannes.koller\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'hannes.koller'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'hannes,koller' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "What is the badge name that user 'hannes.koller' obtained?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'hannes.koller'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by hannes,koller.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "List the title of posts which were edited by hannes.koller."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'hannes.koller'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"hannes,koller\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "What is the name of badge that the user whose display name is \"hannes.koller\" obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'hannes.koller'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"hannes,koller\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "State the name of badge that the user whose display name is \"hannes.koller\" obtained."
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'hannes.koller'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by hannes,koller's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "What is the name of tags used by hannes.koller's?"
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'hannes.koller' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by hannes,koller has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "Which post by hannes.koller has the most answers count? State the post ID."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'hannes.koller' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by hannes,koller and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "Among posts by hannes.koller and Noah Snyder, which one has higher popularity?"
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'hannes.koller' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by hannes,koller has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "Which post by hannes.koller has the most views? Please give the id and title of this post."
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'hannes.koller' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name hannes,koller.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "Identify the latest badge awarded to the user with the display name hannes.koller."
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'hannes.koller'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'hannes,koller' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'hannes.koller' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'hannes.koller'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'hannes,koller'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'hannes.koller'?"
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'hannes.koller'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "hannes.koller",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.hannes.koller"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'hannes,koller' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "hannes.koller",
      "punct_change": "hannes,koller"
    },
    "new_question_correct_value": "When did the user known as 'hannes.koller' create his or her account?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Self-Learner' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Self-Learner",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.self-learner"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Self Learner.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Self-Learner",
      "punct_removal": "Self Learner"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Self-Learner.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Self-Learner'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Self-Learner",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.self-learner"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Self Learner Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Self-Learner",
      "punct_removal": "Self Learner"
    },
    "new_question_correct_value": "List all the name of users that obtained the Self-Learner Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Self-Learner'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Self-Learner",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.self-learner"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Self Learner badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Self-Learner",
      "punct_removal": "Self Learner"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Self-Learner badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Self-Learner' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Self-Learner",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.self-learner"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Self Learner badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Self-Learner",
      "punct_removal": "Self Learner"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Self-Learner badge?"
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Club T-Shirts' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Club T-Shirts' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Club T-Shirts",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.club_t-shirts",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Club TShirts\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Club T-Shirts",
      "punct_removal": "Club TShirts"
    },
    "new_question_correct_value": "With the biggest budget for the \"Club T-Shirts\", what was the remaining of it?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Club T-Shirts' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Club T-Shirts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.club_t-shirts"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Club TShirts.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Club T-Shirts",
      "punct_removal": "Club TShirts"
    },
    "new_question_correct_value": "Name the event with the highest amount spent on Club T-Shirts."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Club T-Shirts'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Club T-Shirts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.club_t-shirts"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Club TShirts.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Club T-Shirts",
      "punct_removal": "Club TShirts"
    },
    "new_question_correct_value": "List the event names which were budgeted for the Club T-Shirts."
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Club T-Shirts' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Club T-Shirts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Club TShirts and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Club T-Shirts",
      "punct_removal": "Club TShirts"
    },
    "new_question_correct_value": "Calculate the total amount spent on Club T-Shirts and list the name of the event they were spent on."
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "mercedes-benz",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.mercedes-benz"
    ],
    "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "question": "For model mercedesbenz, how many cylinders does the car with the least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "mercedes-benz",
      "punct_removal": "mercedesbenz"
    },
    "new_question_correct_value": "For model mercedes-benz, how many cylinders does the car with the least accelerate have?"
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "mercedes-benz",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.mercedes-benz"
    ],
    "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "question": "For a mercedesbenz model, how many cylinders does the version with least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "mercedes-benz",
      "punct_removal": "mercedesbenz"
    },
    "new_question_correct_value": "For a mercedes-benz model, how many cylinders does the version with least accelerate have?"
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Matthew D. Wilson'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Matthew D Wilson.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Matthew D. Wilson."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Matthew D. Wilson'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Matthew D Wilson cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Matthew D. Wilson cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Matthew D. Wilson' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Matthew D Wilson artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    },
    "new_question_correct_value": "Is there any card from Matthew D. Wilson artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Matthew D. Wilson'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Matthew D Wilson created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    },
    "new_question_correct_value": "What kind of printing is on the card that Matthew D. Wilson created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Matthew D. Wilson' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Matthew D Wilson? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Matthew D. Wilson? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Matthew D. Wilson'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Matthew D Wilson worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    },
    "new_question_correct_value": "List all the frame styles and cards Matthew D. Wilson worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'mtgo,paper' AND T2.language = 'Japanese'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "mtgo,paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.mtgo,paper",
      "foreign_data.language.japanese"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in mtgo paper and Japanese language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "mtgo,paper",
      "punct_removal": "mtgo paper"
    },
    "new_question_correct_value": "What are the cards that only available in mtgo,paper and Japanese language?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'mtgo,paper' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.availability",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "mtgo,paper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.mtgo,paper"
    ],
    "original_question": "Lists all types of cards available in arena.",
    "question": "Lists all types of cards available in mtgo paper.",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "mtgo,paper",
      "punct_removal": "mtgo paper"
    },
    "new_question_correct_value": "Lists all types of cards available in mtgo,paper."
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'mtgo,paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "mtgo,paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Erica Yang",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.mtgo,paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Erica Yang artist in pauper format and available in mtgo paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "mtgo,paper",
      "punct_removal": "mtgo paper"
    },
    "new_question_correct_value": "Is there any card from Erica Yang artist in pauper format and available in mtgo,paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'mtgo,paper' AND BorderColor = 'black'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.bordercolor",
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "mtgo,paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "bordercolor",
        "value": "black",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.mtgo,paper",
      "cards.bordercolor.black"
    ],
    "original_question": "List the artists who illustrated cards with black borders which are available only in arena.",
    "question": "List the artists who illustrated cards with black borders which are available only in mtgo paper.",
    "original_SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "changes_information": {
      "original_value": "mtgo,paper",
      "punct_removal": "mtgo paper"
    },
    "new_question_correct_value": "List the artists who illustrated cards with black borders which are available only in mtgo,paper."
  },
  {
    "SQL": "SELECT artist FROM cards WHERE flavorName = 'King Caesar, Ancient Guardian'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.flavorname"
    ],
    "values": [
      {
        "table": "cards",
        "column": "flavorname",
        "value": "King Caesar, Ancient Guardian",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
    "values_list": [
      "cards.flavorname.battra, dark destroyer"
    ],
    "original_question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
    "question": "Which artist designed the card whose promotional name is \"King Caesar Ancient Guardian\"?",
    "original_SQL": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
    "changes_information": {
      "original_value": "King Caesar, Ancient Guardian",
      "punct_removal": "King Caesar Ancient Guardian"
    },
    "new_question_correct_value": "Which artist designed the card whose promotional name is \"King Caesar, Ancient Guardian\"?"
  },
  {
    "SQL": "SELECT id FROM cards WHERE frameEffects = 'legendary,etched' GROUP BY id",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.id",
      "cards.frameeffects"
    ],
    "values": [
      {
        "table": "cards",
        "column": "frameeffects",
        "value": "legendary,etched",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
    "values_list": [
      "cards.frameeffects.legendary,etched"
    ],
    "original_question": "How many cards have frame effect as extendedart? List out the id of those cards.",
    "question": "How many cards have frame effect as legendary etched? List out the id of those cards.",
    "original_SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
    "changes_information": {
      "original_value": "legendary,etched",
      "punct_removal": "legendary etched"
    },
    "new_question_correct_value": "How many cards have frame effect as legendary,etched? List out the id of those cards."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Islandwalk,Landwalk'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Islandwalk,Landwalk",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.islandwalk,landwalk"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Islandwalk Landwalk?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Islandwalk,Landwalk",
      "punct_removal": "Islandwalk Landwalk"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Islandwalk,Landwalk?"
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Angel'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Creature - Angel",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Creature Angel and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Creature - Angel",
      "punct_removal": "Creature Angel"
    },
    "new_question_correct_value": "List down the name of cards with original types of Creature - Angel and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Angel' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Creature - Angel",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.creature_-_angel",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the Creature Angel cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Creature - Angel",
      "punct_removal": "Creature Angel"
    },
    "new_question_correct_value": "Among the Creature - Angel cards, which are black color and comes with foreign languague translation?"
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Angel'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Creature - Angel",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Creature Angel and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Creature - Angel",
      "punct_removal": "Creature Angel"
    },
    "new_question_correct_value": "List down the name of cards with original types of Creature - Angel and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Angel' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Creature - Angel",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.creature_-_angel",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the Creature Angel cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Creature - Angel",
      "punct_removal": "Creature Angel"
    },
    "new_question_correct_value": "Among the Creature - Angel cards, which are black color and comes with foreign languague translation?"
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'prerelease,datestamped'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "prerelease,datestamped",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.prerelease,datestamped"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"prerelease datestamped\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "prerelease,datestamped",
      "punct_removal": "prerelease datestamped"
    },
    "new_question_correct_value": "Please list the websites where I can purchase the cards that have the promotional type of \"prerelease,datestamped\"."
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact Creature \u2014 Assembly-Worker' AND T2.format = 'vintage' AND T1.side IS NULL",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.side",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "type",
        "value": "Artifact Creature \u2014 Assembly-Worker",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "vintage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "values_list": [
      "cards.type.artifact_creature_\u2014_assembly-worker",
      "legalities.format.vintage"
    ],
    "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "question": "For Artifact Creature Assembly-Worker type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "changes_information": {
      "original_value": "Artifact Creature \u2014 Assembly-Worker",
      "punct_removal": "Artifact Creature Assembly-Worker"
    },
    "new_question_correct_value": "For Artifact Creature \u2014 Assembly-Worker type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
  },
  {
    "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
    "question": "Name the foreign name of the card that has set HOU watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_removal": "set HOU"
    },
    "new_question_correct_value": "Name the foreign name of the card that has set (HOU) watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "foreign_data.flavortext",
      "cards.watermark",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
    "question": "What is the language and flavor text of the card that has set HOU watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_removal": "set HOU"
    },
    "new_question_correct_value": "What is the language and flavor text of the card that has set (HOU) watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
    "question": "Name the foreign name of the card that has set HOU watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_removal": "set HOU"
    },
    "new_question_correct_value": "Name the foreign name of the card that has set (HOU) watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "What is the language of the card that has azorius watermark? List out the type of this card.",
    "question": "What is the language of the card that has set HOU watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_removal": "set HOU"
    },
    "new_question_correct_value": "What is the language of the card that has set (HOU) watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'J. M. DeMatteis'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "J. M. DeMatteis",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question": "which countries' tv channels are playing some cartoon written by J M DeMatteis?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "J. M. DeMatteis",
      "punct_removal": "J M DeMatteis"
    },
    "new_question_correct_value": "which countries' tv channels are playing some cartoon written by J. M. DeMatteis?"
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'J. M. DeMatteis'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "J. M. DeMatteis",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by J M DeMatteis?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "J. M. DeMatteis",
      "punct_removal": "J M DeMatteis"
    },
    "new_question_correct_value": "What are the countries that have cartoons on TV that were written by J. M. DeMatteis?"
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Monte-Carlo'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Monte-Carlo",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.monte-carlo"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in Monte Carlo.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Monte-Carlo",
      "punct_removal": "Monte Carlo"
    },
    "new_question_correct_value": "Please list the year during which the race is held on circuits in Monte-Carlo."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Dijon Prenois be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Dijon-Prenois be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Dijon Prenois?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Dijon-Prenois?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Dijon Prenois.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    },
    "new_question_correct_value": "Please list the time of the races held on Dijon-Prenois."
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Dijon-Prenois'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Dijon Prenois?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    },
    "new_question_correct_value": "What's the location coordinates of Dijon-Prenois?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Dijon-Prenois'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Dijon Prenois?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    },
    "new_question_correct_value": "What's the reference name of Dijon-Prenois?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Dijon Prenois was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    },
    "new_question_correct_value": "Please list all the years that Dijon-Prenois was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Dijon Prenois.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Dijon-Prenois."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Dijon-Prenois'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.dijon-prenois"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Dijon Prenois circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    },
    "new_question_correct_value": "In which location does the Dijon-Prenois circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Black/Blue'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Black/Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.black/blue"
    ],
    "original_question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and Black Blue hair.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "changes_information": {
      "original_value": "Black/Blue",
      "punct_removal": "Black Blue"
    },
    "new_question_correct_value": "Please list the superhero names of all the superheroes that have blue eyes and Black/Blue hair."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Black/Blue'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Black/Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.black/blue"
    ],
    "original_question": "Which superheroes have blue eyes with brown hair?",
    "question": "Which superheroes have blue eyes with Black Blue hair?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "changes_information": {
      "original_value": "Black/Blue",
      "punct_removal": "Black Blue"
    },
    "new_question_correct_value": "Which superheroes have blue eyes with Black/Blue hair?"
  },
  {
    "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Black/Blue' AND T4.gender = 'Male'",
    "tables": [
      "race",
      "superhero",
      "gender",
      "colour"
    ],
    "columns": [
      "gender.gender",
      "race.id",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Black/Blue",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Male",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
    "values_list": [
      "colour.colour.black/blue",
      "gender.gender.male"
    ],
    "original_question": "Give the race of the blue-haired male superhero.",
    "question": "Give the race of the Black Blue-haired male superhero.",
    "original_SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "changes_information": {
      "original_value": "Black/Blue",
      "punct_removal": "Black Blue"
    },
    "new_question_correct_value": "Give the race of the Black/Blue-haired male superhero."
  },
  {
    "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'BRM-Ford'",
    "tables": [
      "constructors",
      "constructorstandings"
    ],
    "columns": [
      "constructorstandings.constructorid",
      "constructors.name",
      "constructorstandings.position",
      "constructors.constructorid"
    ],
    "values": [
      {
        "table": "constructors",
        "column": "name",
        "value": "BRM-Ford",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Renault is a name of constructor;",
    "values_list": [
      "constructors.name.brm-ford"
    ],
    "original_question": "Please list the positions of the circuits built by the constructor Renault.",
    "question": "Please list the positions of the circuits built by the constructor BRMFord.",
    "original_SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "changes_information": {
      "original_value": "BRM-Ford",
      "punct_removal": "BRMFord"
    },
    "new_question_correct_value": "Please list the positions of the circuits built by the constructor BRM-Ford."
  },
  {
    "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jablonec n. Nisou'",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "district.a2",
      "account.account_id",
      "account.district_id",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a2",
        "value": "Jablonec n. Nisou",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "A2 refers to the names of districts.",
    "values_list": [
      "district.a2.jablonec_n._nisou"
    ],
    "original_question": "List account ID and account opening date for accounts from 'Prachatice'.",
    "question": "List account ID and account opening date for accounts from 'Jablonec n Nisou'.",
    "original_SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
    "changes_information": {
      "original_value": "Jablonec n. Nisou",
      "punct_removal": "Jablonec n Nisou"
    },
    "new_question_correct_value": "List account ID and account opening date for accounts from 'Jablonec n. Nisou'."
  },
  {
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'American-Italian' ORDER BY dob DESC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.dob",
      "drivers.forename",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "American-Italian",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "values_list": [
      "drivers.nationality.american-italian"
    ],
    "original_question": "How old is the youngest Japanese driver? What is his name?",
    "question": "How old is the youngest American Italian driver? What is his name?",
    "original_SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "changes_information": {
      "original_value": "American-Italian",
      "punct_removal": "American Italian"
    },
    "new_question_correct_value": "How old is the youngest American-Italian driver? What is his name?"
  },
  {
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'American-Italian'",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "American-Italian",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Italian refers to nationality = 'italian'",
    "values_list": [
      "drivers.nationality.american-italian"
    ],
    "original_question": "Please list the surnames of all the Italian drivers.",
    "question": "Please list the surnames of all the American Italian drivers.",
    "original_SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "changes_information": {
      "original_value": "American-Italian",
      "punct_removal": "American Italian"
    },
    "new_question_correct_value": "Please list the surnames of all the American-Italian drivers."
  },
  {
    "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'American-Italian' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.driverref",
      "drivers.dob",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "American-Italian",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "values_list": [
      "drivers.nationality.american-italian"
    ],
    "original_question": "Please state the reference name of the oldest German driver.",
    "question": "Please state the reference name of the oldest American Italian driver.",
    "original_SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "changes_information": {
      "original_value": "American-Italian",
      "punct_removal": "American Italian"
    },
    "new_question_correct_value": "Please state the reference name of the oldest American-Italian driver."
  },
  {
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'MCTD, AMI'",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.id",
      "examination.diagnosis",
      "examination.examination date"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "MCTD, AMI",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "values_list": [
      "examination.diagnosis.mctd,_ami"
    ],
    "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "question": "Lists all patients by ID who were diagnosed with MCTD AMI's and had their exams between 01/01/197 and 12/31/1997.",
    "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "changes_information": {
      "original_value": "MCTD, AMI",
      "punct_removal": "MCTD AMI"
    },
    "new_question_correct_value": "Lists all patients by ID who were diagnosed with MCTD, AMI's and had their exams between 01/01/197 and 12/31/1997."
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'MCTD, AMI' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "MCTD, AMI",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.mctd,_ami"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with MCTD AMI disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "MCTD, AMI",
      "punct_removal": "MCTD AMI"
    },
    "new_question_correct_value": "What is the most common sign of patients with MCTD, AMI disease?"
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Post Cards, Posters'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Post Cards, Posters",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.post_cards,_posters"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'Post Cards Posters' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Post Cards, Posters",
      "punct_removal": "Post Cards Posters"
    },
    "new_question_correct_value": "Which budget category does the expense 'Post Cards, Posters' fall to?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in Portuguese Brazil.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Name all the cards which have alternative language in Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Phyrexian' is the language; name of artists refers to artist;",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "question": "Please provide the names of the artists who illustrated the card art in Portuguese Brazil.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Please provide the names of the artists who illustrated the card art in Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in Portuguese Brazil.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "List down the name of artists for cards in Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and Portuguese Brazil language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "What are the cards that only available in paper and Portuguese (Brazil) language?"
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Portuguese (Brazil)'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in Portuguese Brazil. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Calculate the percentage of cards in Portuguese (Brazil). List them by name."
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Portuguese Brazil.",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Lists all types of cards in Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Portuguese Brazil text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Please list the Portuguese (Brazil) text ruling of all the cards in the set Coldsnap."
  },
  {
    "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)' ORDER BY T2.convertedManaCost DESC",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the Portuguese Brazil names of the cards in the set Coldsnap with the highest converted mana cost.",
    "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Please list the Portuguese (Brazil) names of the cards in the set Coldsnap with the highest converted mana cost."
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'St. Petersburg' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "St. Petersburg",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the St Petersburg tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "St. Petersburg",
      "punct_removal": "St Petersburg"
    },
    "new_question_correct_value": "Find the name of the winner who has the highest rank points and participated in the St. Petersburg tourney."
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'St. Petersburg' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "St. Petersburg",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the St Petersburg tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "St. Petersburg",
      "punct_removal": "St Petersburg"
    },
    "new_question_correct_value": "What is the name of the winner with the most rank points who participated in the St. Petersburg tournament?"
  },
  {
    "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "tables": [
      "member",
      "expense"
    ],
    "columns": [
      "expense.link_to_member",
      "member.t_shirt_size",
      "expense.expense_description",
      "member.member_id"
    ],
    "values": [
      {
        "table": "member",
        "column": "t_shirt_size",
        "value": "X-Large",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
    "values_list": [
      "member.t_shirt_size.x-large"
    ],
    "original_question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
    "question": "What kind of expenses incurred by members who have XLarge in size of tee shirt?",
    "original_SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "changes_information": {
      "original_value": "X-Large",
      "punct_removal": "XLarge"
    },
    "new_question_correct_value": "What kind of expenses incurred by members who have X-Large in size of tee shirt?"
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Taylor-Sinclair",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Aaron Taylor Sinclair?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Aaron Taylor-Sinclair",
      "punct_removal": "Aaron Taylor Sinclair"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Aaron Taylor-Sinclair?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.heading_accuracy",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Taylor-Sinclair",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "values_list": [
      "player.player_name.francois affolter"
    ],
    "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "question": "What is the football player Aaron Taylor Sinclair header's finishing rate on 18/09/2014?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "changes_information": {
      "original_value": "Aaron Taylor-Sinclair",
      "punct_removal": "Aaron Taylor Sinclair"
    },
    "new_question_correct_value": "What is the football player Aaron Taylor-Sinclair header's finishing rate on 18/09/2014?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Taylor-Sinclair",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Aaron Taylor Sinclair\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Aaron Taylor-Sinclair",
      "punct_removal": "Aaron Taylor Sinclair"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Aaron Taylor-Sinclair\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Taylor-Sinclair",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Aaron Taylor Sinclair's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Aaron Taylor-Sinclair",
      "punct_removal": "Aaron Taylor Sinclair"
    },
    "new_question_correct_value": "What is Aaron Taylor-Sinclair's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Taylor-Sinclair",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Aaron Taylor Sinclair?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Aaron Taylor-Sinclair",
      "punct_removal": "Aaron Taylor Sinclair"
    },
    "new_question_correct_value": "What's the heading accuracy of Aaron Taylor-Sinclair?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Taylor-Sinclair",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Aaron Taylor Sinclair?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Aaron Taylor-Sinclair",
      "punct_removal": "Aaron Taylor Sinclair"
    },
    "new_question_correct_value": "Which foot is preferred by Aaron Taylor-Sinclair?"
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Taylor-Sinclair",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Aaron Taylor Sinclair have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Aaron Taylor-Sinclair",
      "punct_removal": "Aaron Taylor Sinclair"
    },
    "new_question_correct_value": "When was the first time did Aaron Taylor-Sinclair have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'PLINK meta-analysis method'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"PLINK metaanalysis method\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    },
    "new_question_correct_value": "Who is the owner of the post \"PLINK meta-analysis method\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'PLINK meta-analysis method'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"PLINK metaanalysis method\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"PLINK meta-analysis method\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'PLINK meta-analysis method'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"PLINK metaanalysis method\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"PLINK meta-analysis method\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'PLINK meta-analysis method'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'PLINK metaanalysis method' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    },
    "new_question_correct_value": "How many views did the post titled 'PLINK meta-analysis method' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'PLINK meta-analysis method'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"PLINK metaanalysis method\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"PLINK meta-analysis method\"."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'PLINK meta-analysis method'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'PLINK metaanalysis method'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'PLINK meta-analysis method'?"
  },
  {
    "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Caesar III: An Empire Without End'",
    "tables": [
      "program",
      "director"
    ],
    "columns": [
      "program.title",
      "program.director_id",
      "director.director_id",
      "director.name"
    ],
    "values": [
      {
        "table": "program",
        "column": "title",
        "value": "Caesar III: An Empire Without End",
        "condition": "="
      }
    ],
    "db_id": "bbc_channels",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "program.title.caesar_iii:_an_empire_without_end"
    ],
    "original_question": "What is the name of the director who is in the \"Dracula\" program?",
    "question": "What is the name of the director who is in the \"Caesar III An Empire Without End\" program?",
    "original_SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "changes_information": {
      "original_value": "Caesar III: An Empire Without End",
      "punct_removal": "Caesar III An Empire Without End"
    },
    "new_question_correct_value": "What is the name of the director who is in the \"Caesar III: An Empire Without End\" program?"
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'J. R. R. Tolkien'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "J. R. R. Tolkien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by J R R Tolkien by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "J. R. R. Tolkien",
      "punct_removal": "J R R Tolkien"
    },
    "new_question_correct_value": "Rank heroes published by J. R. R. Tolkien by their height in descending order."
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'J. R. R. Tolkien' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "J. R. R. Tolkien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from J R R Tolkien by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "J. R. R. Tolkien",
      "punct_removal": "J R R Tolkien"
    },
    "new_question_correct_value": "Rank superheroes from J. R. R. Tolkien by their eye color popularity, starting with the most common color."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'J. R. R. Tolkien' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Strength",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "J. R. R. Tolkien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from J R R Tolkien who have the super power of 'Super Strength'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "J. R. R. Tolkien",
      "punct_removal": "J R R Tolkien"
    },
    "new_question_correct_value": "List the superheroes from J. R. R. Tolkien who have the super power of 'Super Strength'."
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'J. R. R. Tolkien'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "J. R. R. Tolkien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of J R R Tolkien.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "J. R. R. Tolkien",
      "punct_removal": "J R R Tolkien"
    },
    "new_question_correct_value": "Give the publisher ID of J. R. R. Tolkien."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'J. R. R. Tolkien' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "J. R. R. Tolkien",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.durability"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most durability published by J R R Tolkien?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "J. R. R. Tolkien",
      "punct_removal": "J R R Tolkien"
    },
    "new_question_correct_value": "Which superhero has the most durability published by J. R. R. Tolkien?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'J. R. R. Tolkien' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "J. R. R. Tolkien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in J R R Tolkien.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "J. R. R. Tolkien",
      "punct_removal": "J R R Tolkien"
    },
    "new_question_correct_value": "Identify the heaviest superhero in J. R. R. Tolkien."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Demi-God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.demi-god"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the DemiGod superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "Demi-God",
      "punct_removal": "DemiGod"
    },
    "new_question_correct_value": "Give the name of the Demi-God superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Demi-God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.demi-god"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of DemiGod superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "Demi-God",
      "punct_removal": "DemiGod"
    },
    "new_question_correct_value": "List down at least five full name of Demi-God superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Demi-God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "values_list": [
      "race.race.demi-god"
    ],
    "original_question": "Provide the full names of vampire heroes.",
    "question": "Provide the full names of DemiGod heroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "changes_information": {
      "original_value": "Demi-God",
      "punct_removal": "DemiGod"
    },
    "new_question_correct_value": "Provide the full names of Demi-God heroes."
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Lysbeth (Lissa)'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Lysbeth (Lissa)",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.lysbeth_(lissa)"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Lysbeth Lissa. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Lysbeth (Lissa)",
      "punct_removal": "Lysbeth Lissa"
    },
    "new_question_correct_value": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Lysbeth (Lissa). List the district code of the school."
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Placerville Dr.' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "Placerville Dr.",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.placerville_dr."
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of Placerville Dr?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Placerville Dr.",
      "punct_removal": "Placerville Dr"
    },
    "new_question_correct_value": "What is the most common type of grade span served in the city of Placerville Dr.?"
  },
  {
    "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Mt. Shasta'",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "schools.cdscode",
      "schools.mailcity",
      "satscores.numtsttakr",
      "satscores.cds"
    ],
    "values": [
      {
        "table": "schools",
        "column": "mailcity",
        "value": "Mt. Shasta",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.mailcity.mt._shasta"
    ],
    "original_question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "question": "How many test takers are there at the school/s whose mailing city address is in Mt Shasta?",
    "original_SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "changes_information": {
      "original_value": "Mt. Shasta",
      "punct_removal": "Mt Shasta"
    },
    "new_question_correct_value": "How many test takers are there at the school/s whose mailing city address is in Mt. Shasta?"
  },
  {
    "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.totalsetsize",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "List all the sets available in Italian translation. State the total number of cards per set.",
    "question": "List all the sets available in Portuguese Brazil translation. State the total number of cards per set.",
    "original_SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "List all the sets available in Portuguese (Brazil) translation. State the total number of cards per set."
  },
  {
    "SQL": "SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)'",
    "tables": [
      "set_translations"
    ],
    "columns": [
      "set_translations.setcode",
      "set_translations.language"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; set code refers to setCode",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Lists the set code of all cards translated into Spanish.",
    "question": "Lists the set code of all cards translated into Portuguese Brazil.",
    "original_SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Lists the set code of all cards translated into Portuguese (Brazil)."
  },
  {
    "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Portuguese (Brazil)' ORDER BY T1.id LIMIT 2",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.id",
      "sets.block",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "block",
        "value": "Shadowmoor",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "sets.block.shadowmoor",
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "question": "Please list top two sets of cards with their IDs that have Portuguese Brazil-language cards and are located in the Shadowmoor block in alphabetical order.",
    "original_SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Please list top two sets of cards with their IDs that have Portuguese (Brazil)-language cards and are located in the Shadowmoor block in alphabetical order."
  },
  {
    "SQL": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.id",
      "sets.basesetsize",
      "set_translations.setcode"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Which Russian set of cards contains the most cards overall?",
    "question": "Which Portuguese Brazil set of cards contains the most cards overall?",
    "original_SQL": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize ORDER BY T1.baseSetSize DESC LIMIT 1",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Which Portuguese (Brazil) set of cards contains the most cards overall?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'Portuguese (Brazil)' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Tendo Ice Bridge",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the Portuguese Brazil name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "What's the Portuguese (Brazil) name of the set of cards with \"Tendo Ice Bridge\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Portuguese (Brazil)' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fellwar Stone",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Portuguese Brazil name of the set which card \"Fellwar Stone\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    },
    "new_question_correct_value": "Tell the Portuguese (Brazil) name of the set which card \"Fellwar Stone\" is in it."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "cards.setcode",
      "cards.name",
      "set_translations.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
    "question": "Please list the names of the cards in the set \"From The Vault Lore\".",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_removal": "From The Vault Lore"
    },
    "new_question_correct_value": "Please list the names of the cards in the set \"From The Vault: Lore\"."
  },
  {
    "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.basesetsize"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
    "question": "How many cards are there in the base set of \"From The Vault Lore\"?",
    "original_SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_removal": "From The Vault Lore"
    },
    "new_question_correct_value": "How many cards are there in the base set of \"From The Vault: Lore\"?"
  },
  {
    "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
    "question": "What is the expansion type of the set \"From The Vault Lore\"?",
    "original_SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_removal": "From The Vault Lore"
    },
    "new_question_correct_value": "What is the expansion type of the set \"From The Vault: Lore\"?"
  },
  {
    "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.basesetsize"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
    "values_list": [
      "set_translations.translation.rinascita di alara"
    ],
    "original_question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
    "question": "What is the number of cards are there in the set of \"From The Vault Lore\"?",
    "original_SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_removal": "From The Vault Lore"
    },
    "new_question_correct_value": "What is the number of cards are there in the set of \"From The Vault: Lore\"?"
  },
  {
    "SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'",
    "values_list": [
      "set_translations.translation.ola de fr\u00edo"
    ],
    "original_question": "What is the release date for the set \"Ola de fr\u00edo\"?",
    "question": "What is the release date for the set \"From The Vault Lore\"?",
    "original_SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_removal": "From The Vault Lore"
    },
    "new_question_correct_value": "What is the release date for the set \"From The Vault: Lore\"?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Intl. Collectors\u2019 Edition' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Intl. Collectors\u2019 Edition",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "values_list": [
      "sets.name.intl._collectors\u2019_edition"
    ],
    "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the name of the cards in the set Intl Collectors Edition with the highest converted mana cost.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "changes_information": {
      "original_value": "Intl. Collectors\u2019 Edition",
      "punct_removal": "Intl Collectors Edition"
    },
    "new_question_correct_value": "Please list the name of the cards in the set Intl. Collectors\u2019 Edition with the highest converted mana cost."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Intl. Collectors\u2019 Edition' AND T1.number = 4",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.name",
      "cards.number",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Intl. Collectors\u2019 Edition",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "number",
        "value": "4",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
    "values_list": [
      "sets.name.intl._collectors\u2019_edition",
      "cards.number.4"
    ],
    "original_question": "What is card number 4 in the set Coldsnap?",
    "question": "What is card number 4 in the set Intl Collectors Edition?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "changes_information": {
      "original_value": "Intl. Collectors\u2019 Edition",
      "punct_removal": "Intl Collectors Edition"
    },
    "new_question_correct_value": "What is card number 4 in the set Intl. Collectors\u2019 Edition?"
  },
  {
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Intl. Collectors\u2019 Edition'",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.name",
      "sets.parentcode"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Intl. Collectors\u2019 Edition",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "values_list": [
      "sets.name.commander 2014 oversized"
    ],
    "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "question": "For the set \"Intl Collectors Edition\" , give its parent code.",
    "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "changes_information": {
      "original_value": "Intl. Collectors\u2019 Edition",
      "punct_removal": "Intl Collectors Edition"
    },
    "new_question_correct_value": "For the set \"Intl. Collectors\u2019 Edition\" , give its parent code."
  },
  {
    "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'draft_innovation' GROUP BY T2.setCode",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "draft_innovation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "code of sets refers to setCode",
    "values_list": [
      "sets.type.draft_innovation"
    ],
    "original_question": "Give the code of sets have expansion type of 'expansion'?",
    "question": "Give the code of sets have draft innovation type of 'expansion'?",
    "original_SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
    "changes_information": {
      "original_value": "draft_innovation",
      "punct_removal": "draft innovation"
    },
    "new_question_correct_value": "Give the code of sets have draft_innovation type of 'expansion'?"
  },
  {
    "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'draft_innovation'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "draft_innovation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "code of sets refers to setCode",
    "values_list": [
      "sets.type.draft_innovation"
    ],
    "original_question": "Give the code of sets have expansion commander type?",
    "question": "Give the code of sets have expansion draft innovation type?",
    "original_SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
    "changes_information": {
      "original_value": "draft_innovation",
      "punct_removal": "draft innovation"
    },
    "new_question_correct_value": "Give the code of sets have expansion draft_innovation type?"
  },
  {
    "SQL": "SELECT id FROM sets WHERE type = 'draft_innovation' ORDER BY totalSetSize DESC LIMIT 1",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.id",
      "sets.type",
      "sets.totalsetsize"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "draft_innovation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
    "values_list": [
      "sets.type.draft_innovation"
    ],
    "original_question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "question": "Among the sets whose expansion type is draft innovation, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "original_SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
    "changes_information": {
      "original_value": "draft_innovation",
      "punct_removal": "draft innovation"
    },
    "new_question_correct_value": "Among the sets whose expansion type is draft_innovation, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Alexander J Mercer?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    },
    "new_question_correct_value": "What is the eyes colour of Alexander J. Mercer?"
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Alexander J Mercer.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    },
    "new_question_correct_value": "Provide the hero name and race of Alexander J. Mercer."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Alexander J Mercer.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    },
    "new_question_correct_value": "List the powers of Alexander J. Mercer."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Alexander J Mercer as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    },
    "new_question_correct_value": "Provide the eye colour of the superhero who has Alexander J. Mercer as their full name."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Alexander J Mercer as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Alexander J. Mercer as their full name?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Alexander J. Mercer'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Alexander J Mercer.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    },
    "new_question_correct_value": "Name the superhero, otherwise known as Alexander J. Mercer."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "Please list all the superpowers of 3-D Man.",
    "question": "Please list all the superpowers of ABomb.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "Please list all the superpowers of A-Bomb."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of ABomb's skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "What is the colour of A-Bomb's skin?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Who is the publisher of Sauron?",
    "question": "Who is the publisher of ABomb?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "Who is the publisher of A-Bomb?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of ABomb?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "What is the publisher's name of A-Bomb?"
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is ABomb's race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "What is A-Bomb's race?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Provide the superpowers of the superhero called Deathlok.",
    "question": "Provide the superpowers of the superhero called ABomb.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "Provide the superpowers of the superhero called A-Bomb."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero ABomb.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "Indicate the attribute value of superhero A-Bomb."
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero ABomb belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "Which group does superhero A-Bomb belong to?"
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of ABomb hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "What is the gender of A-Bomb hero?"
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of ABomb?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "What are the race and alignment of A-Bomb?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "What is Abomination's superpower?",
    "question": "What is ABomb's superpower?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "What is A-Bomb's superpower?"
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of ABomb's attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "State all of A-Bomb's attributes along with their values."
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named ABomb.",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "Give the alignment and superpowers of the superhero named A-Bomb."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down ABomb's superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "List down A-Bomb's superpowers."
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'A-Bomb' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the ABomb.",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "Identify the weakest attribute of the A-Bomb."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "What is Abomination's eye colour?",
    "question": "What is ABomb's eye colour?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "What is A-Bomb's eye colour?"
  },
  {
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'A-Bomb'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Provide the full name of the superhero named Alien.",
    "question": "Provide the full name of the superhero named ABomb.",
    "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "Provide the full name of the superhero named A-Bomb."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named ABomb.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "List the attribute value of the superhero named A-Bomb."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of ABomb.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    },
    "new_question_correct_value": "Give the eye colour of A-Bomb."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'open-source'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "open-source",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.open-source"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named open source?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "open-source",
      "punct_removal": "open source"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named open-source?"
  },
  {
    "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'SV Zulte-Waregem'",
    "tables": [
      "team"
    ],
    "columns": [
      "team.team_short_name",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
    "values_list": [
      "team.team_long_name.queens park rangers"
    ],
    "original_question": "What is the short name of the football team Queens Park Rangers?",
    "question": "What is the short name of the football team SV Zulte Waregem?",
    "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    },
    "new_question_correct_value": "What is the short name of the football team SV Zulte-Waregem?"
  },
  {
    "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team_attributes.team_fifa_api_id",
      "team.team_fifa_api_id",
      "team_attributes.buildupplaypositioningclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "values_list": [
      "team.team_long_name.ado den haag"
    ],
    "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "question": "What is the SV Zulte Waregem team freedom of movement in the 1st two thirds of the pitch?",
    "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    },
    "new_question_correct_value": "What is the SV Zulte-Waregem team freedom of movement in the 1st two thirds of the pitch?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "values_list": [
      "team.team_long_name.sv_zulte-waregem"
    ],
    "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "question": "What is SV Zulte Waregem's highest chance creation passing score and what is it classified as?",
    "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    },
    "new_question_correct_value": "What is SV Zulte-Waregem's highest chance creation passing score and what is it classified as?"
  },
  {
    "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplayspeedclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
    "values_list": [
      "team.team_long_name.willem ii"
    ],
    "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "question": "What was the build up play speed class for \"SV Zulte Waregem\" on 2011/2/22?",
    "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    },
    "new_question_correct_value": "What was the build up play speed class for \"SV Zulte-Waregem\" on 2011/2/22?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "values_list": [
      "team.team_long_name.pec zwolle"
    ],
    "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "question": "State the chance creation passing class for \"SV Zulte Waregem\" on 2013/9/20.",
    "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    },
    "new_question_correct_value": "State the chance creation passing class for \"SV Zulte-Waregem\" on 2013/9/20."
  },
  {
    "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team.team_long_name",
      "team_attributes.chancecreationcrossingclass"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "values_list": [
      "team.team_long_name.hull city"
    ],
    "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "question": "What was the chance creation crossing class for \"SV Zulte Waregem\" on 2010/2/22?",
    "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    },
    "new_question_correct_value": "What was the chance creation crossing class for \"SV Zulte-Waregem\" on 2010/2/22?"
  },
  {
    "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'SV Zulte-Waregem'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team.team_long_name",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.team_api_id"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "values_list": [
      "team.team_long_name.ksv cercle brugge"
    ],
    "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "question": "Does the SV Zulte Waregem team have a slow, balanced or fast speed class?",
    "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    },
    "new_question_correct_value": "Does the SV Zulte-Waregem team have a slow, balanced or fast speed class?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user Christopher D Long?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "Please list the titles of the posts owned by the user Christopher D. Long?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by Christopher D Long and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "What is the title of the post that is owned by Christopher D. Long and has the highest popularity?"
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Christopher D Long.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "Please list the names of the badges obtained by Christopher D. Long."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Christopher D Long\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "For the user whose display name is \"Christopher D. Long\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Christopher D Long' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "What is the badge name that user 'Christopher D. Long' obtained?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by Christopher D Long.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "List the title of posts which were edited by Christopher D. Long."
  },
  {
    "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long' GROUP BY T2.WebsiteUrl",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.score",
      "users.websiteurl",
      "users.id",
      "users.displayname",
      "posts.lasteditoruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
    "question": "What is the total score of the posts edited by Christopher D Long and include the user's website URL.",
    "original_SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "What is the total score of the posts edited by Christopher D. Long and include the user's website URL."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Christopher D Long\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "What is the name of badge that the user whose display name is \"Christopher D. Long\" obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Christopher D Long\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "State the name of badge that the user whose display name is \"Christopher D. Long\" obtained."
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by Christopher D Long's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "What is the name of tags used by Christopher D. Long's?"
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by Christopher D Long has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "Which post by Christopher D. Long has the most answers count? State the post ID."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by Christopher D Long and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "Among posts by Christopher D. Long and Noah Snyder, which one has higher popularity?"
  },
  {
    "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
    "tables": [
      "votes",
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "votes.postid",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid",
      "votes.id"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
    "values_list": [
      "users.displayname.matt parker"
    ],
    "original_question": "How many posts by Matt Parker have more than 4 votes?",
    "question": "How many posts by Christopher D Long have more than 4 votes?",
    "original_SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "How many posts by Christopher D. Long have more than 4 votes?"
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Christopher D. Long' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by Christopher D Long has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "Which post by Christopher D. Long has the most views? Please give the id and title of this post."
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Christopher D Long.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "Identify the latest badge awarded to the user with the display name Christopher D. Long."
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Christopher D Long' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'Christopher D. Long' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Christopher D. Long'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Christopher D Long'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'Christopher D. Long'?"
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Christopher D. Long'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Christopher D Long' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    },
    "new_question_correct_value": "When did the user known as 'Christopher D. Long' create his or her account?"
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Corvallis, OR'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Corvallis, OR",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in Corvallis OR obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "Corvallis, OR",
      "punct_removal": "Corvallis OR"
    },
    "new_question_correct_value": "List out the dates that users who are located in Corvallis, OR obtained their badges?"
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Corvallis, OR'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Corvallis, OR",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in Corvallis OR obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "Corvallis, OR",
      "punct_removal": "Corvallis OR"
    },
    "new_question_correct_value": "List out the age of users who located in Corvallis, OR obtained the badge?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      },
      {
        "table": "hero_attribute",
        "column": "attribute_value",
        "value": "50",
        "condition": "<"
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
    "values_list": [
      "attribute.attribute_name.durability",
      "hero_attribute.attribute_value.50"
    ],
    "original_question": "Which superheroes have a durability attribute value of less than 50?",
    "question": "Which superheroes have a durabilities attribute value of less than 50?",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "changes_information": {
      "original_value": "Durability",
      "singular_plural_change": "durabilities"
    },
    "new_question_correct_value": "Which superheroes have a Durability attribute value of less than 50?"
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.full_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "values_list": [
      "attribute.attribute_name.durability"
    ],
    "original_question": "What is the hero's full name with the highest attribute in strength?",
    "question": "What is the hero's full name with the highest attribute in durabilities?",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Durability",
      "singular_plural_change": "durabilities"
    },
    "new_question_correct_value": "What is the hero's full name with the highest attribute in Durability?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Dark Horse Comics",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.durability"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most durabilities published by Dark Horse Comics?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Durability",
      "singular_plural_change": "durabilities"
    },
    "new_question_correct_value": "Which superhero has the most Durability published by Dark Horse Comics?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Editor' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Editor",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.editor"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Editors.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Editor",
      "singular_plural_change": "Editors"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Editor.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Editor'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Editor",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.editor"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Editors Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Editor",
      "singular_plural_change": "Editors"
    },
    "new_question_correct_value": "List all the name of users that obtained the Editor Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Editor'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Editor",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.editor"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Editors badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Editor",
      "singular_plural_change": "Editors"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Editor badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Editor' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Editor",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.editor"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Editors badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Editor",
      "singular_plural_change": "Editors"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Editor badge?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on food in September Meeting?",
    "question": "How much did the Student_Club members spend on Advertisements in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "question": "How much did the Student_Club members spend on Advertisements in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Advertisement' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Advertisement' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.advertisement",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Advertisements\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    },
    "new_question_correct_value": "With the biggest budget for the \"Advertisement\", what was the remaining of it?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Advertisements.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    },
    "new_question_correct_value": "Name the event with the highest amount spent on Advertisement."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Advertisement' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.category",
      "budget.link_to_event",
      "budget.budget_id",
      "expense.link_to_budget",
      "event.event_id"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the name of events with less than average parking cost.",
    "question": "List the name of events with less than average Advertisements cost.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    },
    "new_question_correct_value": "List the name of events with less than average Advertisement cost."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Advertisements.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    },
    "new_question_correct_value": "List the event names which were budgeted for the Advertisement."
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Advertisements and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    },
    "new_question_correct_value": "Calculate the total amount spent on Advertisement and list the name of the event they were spent on."
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  ' volkswagen' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": " volkswagen",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model._volkswagen"
    ],
    "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "question": "For model volkswagens, how many cylinders does the car with the least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": " volkswagen",
      "singular_plural_change": "volkswagens"
    },
    "new_question_correct_value": "For model  volkswagen, how many cylinders does the car with the least accelerate have?"
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  ' volkswagen' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": " volkswagen",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model._volkswagen"
    ],
    "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "question": "For a volkswagens model, how many cylinders does the version with least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": " volkswagen",
      "singular_plural_change": "volkswagens"
    },
    "new_question_correct_value": "For a  volkswagen model, how many cylinders does the version with least accelerate have?"
  },
  {
    "SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'junior'",
    "tables": [
      "disp",
      "card"
    ],
    "columns": [
      "card.type",
      "card.disp_id",
      "disp.account_id",
      "disp.disp_id"
    ],
    "values": [
      {
        "table": "card",
        "column": "type",
        "value": "junior",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "card.type.junior"
    ],
    "original_question": "What are the accounts that have gold credit cards?",
    "question": "What are the accounts that have juniors credit cards?",
    "original_SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
    "changes_information": {
      "original_value": "junior",
      "singular_plural_change": "juniors"
    },
    "new_question_correct_value": "What are the accounts that have junior credit cards?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.availability",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "arena",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.arena"
    ],
    "original_question": "Lists all types of cards available in arena.",
    "question": "Lists all types of cards available in arenas.",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "arena",
      "singular_plural_change": "arenas"
    },
    "new_question_correct_value": "Lists all types of cards available in arena."
  },
  {
    "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.bordercolor",
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "arena",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "bordercolor",
        "value": "black",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.arena",
      "cards.bordercolor.black"
    ],
    "original_question": "List the artists who illustrated cards with black borders which are available only in arena.",
    "question": "List the artists who illustrated cards with black borders which are available only in arenas.",
    "original_SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "changes_information": {
      "original_value": "arena",
      "singular_plural_change": "arenas"
    },
    "new_question_correct_value": "List the artists who illustrated cards with black borders which are available only in arena."
  },
  {
    "SQL": "SELECT id FROM cards WHERE frameEffects = 'etched,legendary' GROUP BY id",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.id",
      "cards.frameeffects"
    ],
    "values": [
      {
        "table": "cards",
        "column": "frameeffects",
        "value": "etched,legendary",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
    "values_list": [
      "cards.frameeffects.etched,legendary"
    ],
    "original_question": "How many cards have frame effect as extendedart? List out the id of those cards.",
    "question": "How many cards have frame effect as etched,legendaries? List out the id of those cards.",
    "original_SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
    "changes_information": {
      "original_value": "etched,legendary",
      "singular_plural_change": "etched,legendaries"
    },
    "new_question_correct_value": "How many cards have frame effect as etched,legendary? List out the id of those cards."
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Aquamorph Entity'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Aquamorph Entities'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "What is the keyword found on card 'Aquamorph Entity'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.aquamorph_entity"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Aquamorph Entities\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Aquamorph Entity\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Aquamorph Entities\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "What is the status of card \"Aquamorph Entity\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Aquamorph Entities\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "What is the type of card \"Aquamorph Entity\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Aquamorph Entities\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "What is the rule of playing card \"Aquamorph Entity\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Aquamorph Entity'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Aquamorph Entities.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "Write down the ruling of Aquamorph Entity."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Aquamorph Entity'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Aquamorph Entities\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Aquamorph Entity\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Aquamorph Entity'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Aquamorph Entities\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "Did the set of cards with \"Aquamorph Entity\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Aquamorph Entity'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.aquamorph_entity"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Aquamorph Entities' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "When was the ruling for the card 'Aquamorph Entity' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Aquamorph Entity'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.aquamorph_entity"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Aquamorph Entities\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Aquamorph Entity\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Aquamorph Entity' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Aquamorph Entities\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Aquamorph Entity\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Aquamorph Entity' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Aquamorph Entities\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Aquamorph Entity\" is in it."
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "bundle",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.bundle"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundles\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "bundle",
      "singular_plural_change": "bundles"
    },
    "new_question_correct_value": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\"."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Silverstone Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Silverstone Circuits be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Silverstone Circuit",
      "singular_plural_change": "Silverstone Circuits"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Silverstone Circuit be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Silverstone Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Silverstone Circuits?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Silverstone Circuit",
      "singular_plural_change": "Silverstone Circuits"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Silverstone Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Silverstone Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Silverstone Circuits.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Silverstone Circuit",
      "singular_plural_change": "Silverstone Circuits"
    },
    "new_question_correct_value": "Please list the time of the races held on Silverstone Circuit."
  },
  {
    "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "races.circuitid",
      "races.date",
      "races.year",
      "races.name",
      "circuits.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Silverstone Circuit",
        "condition": "="
      },
      {
        "table": "races",
        "column": "name",
        "value": "British Grand Prix",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "the last refers to max(year);",
    "values_list": [
      "circuits.name.brands hatch",
      "races.name.british grand prix"
    ],
    "original_question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
    "question": "When was the last f1 season whereby Silverstone Circuits hosted the British Grand Prix?",
    "original_SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "changes_information": {
      "original_value": "Silverstone Circuit",
      "singular_plural_change": "Silverstone Circuits"
    },
    "new_question_correct_value": "When was the last f1 season whereby Silverstone Circuit hosted the British Grand Prix?"
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Silverstone Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Silverstone Circuits?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Silverstone Circuit",
      "singular_plural_change": "Silverstone Circuits"
    },
    "new_question_correct_value": "What's the location coordinates of Silverstone Circuit?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Silverstone Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Silverstone Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Silverstone Circuits?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Silverstone Circuit",
      "singular_plural_change": "Silverstone Circuits"
    },
    "new_question_correct_value": "What's the reference name of Silverstone Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Silverstone Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Silverstone Circuits was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Silverstone Circuit",
      "singular_plural_change": "Silverstone Circuits"
    },
    "new_question_correct_value": "Please list all the years that Silverstone Circuit was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Silverstone Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Silverstone Circuits.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Silverstone Circuit",
      "singular_plural_change": "Silverstone Circuits"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Silverstone Circuit."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Silverstone Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.silverstone_circuit"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Silverstone Circuits circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Silverstone Circuit",
      "singular_plural_change": "Silverstone Circuits"
    },
    "new_question_correct_value": "In which location does the Silverstone Circuit circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Participant' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "tables": [
      "staff",
      "conference_participation"
    ],
    "columns": [
      "conference_participation.staff_id",
      "staff.staff_id",
      "conference_participation.role",
      "staff.name"
    ],
    "values": [
      {
        "table": "conference_participation",
        "column": "role",
        "value": "Participant",
        "condition": "="
      },
      {
        "table": "conference_participation",
        "column": "role",
        "value": "Sponsor",
        "condition": "="
      }
    ],
    "db_id": "conference",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "conference_participation.role.participant",
      "conference_participation.role.sponsor"
    ],
    "original_question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "question": "Show all staff names who have been both Participants and sponsor in some conference.",
    "original_SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "changes_information": {
      "original_value": "Participant",
      "singular_plural_change": "Participants"
    },
    "new_question_correct_value": "Show all staff names who have been both Participant and sponsor in some conference."
  },
  {
    "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Participant' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "tables": [
      "staff",
      "conference_participation"
    ],
    "columns": [
      "conference_participation.staff_id",
      "staff.staff_id",
      "conference_participation.role",
      "staff.name"
    ],
    "values": [
      {
        "table": "conference_participation",
        "column": "role",
        "value": "Participant",
        "condition": "="
      },
      {
        "table": "conference_participation",
        "column": "role",
        "value": "Sponsor",
        "condition": "="
      }
    ],
    "db_id": "conference",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "conference_participation.role.participant",
      "conference_participation.role.sponsor"
    ],
    "original_question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "question": "What are the names of the staff members who have been both a Participants and a sponsor at some conference?",
    "original_SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "changes_information": {
      "original_value": "Participant",
      "singular_plural_change": "Participants"
    },
    "new_question_correct_value": "What are the names of the staff members who have been both a Participant and a sponsor at some conference?"
  },
  {
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "tables": [
      "courses"
    ],
    "columns": [
      "courses.course_description",
      "courses.course_name"
    ],
    "values": [
      {
        "table": "courses",
        "column": "course_name",
        "value": "math",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "courses.course_name.math"
    ],
    "original_question": "How is the math course described?",
    "question": "How is the maths course described?",
    "original_SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "changes_information": {
      "original_value": "math",
      "singular_plural_change": "maths"
    },
    "new_question_correct_value": "How is the math course described?"
  },
  {
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "tables": [
      "courses"
    ],
    "columns": [
      "courses.course_description",
      "courses.course_name"
    ],
    "values": [
      {
        "table": "courses",
        "column": "course_name",
        "value": "math",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "courses.course_name.math"
    ],
    "original_question": "What are the descriptions for all the math courses?",
    "question": "What are the descriptions for all the maths courses?",
    "original_SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "changes_information": {
      "original_value": "math",
      "singular_plural_change": "maths"
    },
    "new_question_correct_value": "What are the descriptions for all the math courses?"
  },
  {
    "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Master'",
    "tables": [
      "students",
      "degree_programs",
      "student_enrolment"
    ],
    "columns": [
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.first_name",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id"
    ],
    "values": [
      {
        "table": "degree_programs",
        "column": "degree_summary_name",
        "value": "Master",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "degree_programs.degree_summary_name.master"
    ],
    "original_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "question": "Who is enrolled in a Masters degree program? List the first name, middle name, last name.",
    "original_SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "changes_information": {
      "original_value": "Master",
      "singular_plural_change": "Masters"
    },
    "new_question_correct_value": "Who is enrolled in a Master degree program? List the first name, middle name, last name."
  },
  {
    "SQL": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
    "tables": [
      "disp",
      "loan",
      "account"
    ],
    "columns": [
      "loan.amount",
      "disp.account_id",
      "loan.account_id",
      "account.account_id",
      "disp.client_id",
      "disp.type"
    ],
    "values": [
      {
        "table": "disp",
        "column": "type",
        "value": "OWNER",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "disp.type.owner"
    ],
    "original_question": "Who is the owner of the account with the largest loan amount?",
    "question": "Who is the owners of the account with the largest loan amount?",
    "original_SQL": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
    "changes_information": {
      "original_value": "OWNER",
      "singular_plural_change": "owners"
    },
    "new_question_correct_value": "Who is the OWNER of the account with the largest loan amount?"
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Marlin Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Marlin Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What is the owner of document with the Description 'Braeden Collection'?",
    "question": "What is the owner of document with the Description 'Marlin Collections'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Marlin Collection",
      "singular_plural_change": "Marlin Collections"
    },
    "new_question_correct_value": "What is the owner of document with the Description 'Marlin Collection'?"
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Marlin Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Marlin Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "question": "What are the owners of the document objects described as the 'Marlin Collections'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Marlin Collection",
      "singular_plural_change": "Marlin Collections"
    },
    "new_question_correct_value": "What are the owners of the document objects described as the 'Marlin Collection'?"
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'February Speaker'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "February Speaker",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"February Speakers\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "February Speaker",
      "singular_plural_change": "February Speakers"
    },
    "new_question_correct_value": "Give the location for \"February Speaker\"."
  },
  {
    "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'February Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "February Speaker",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "values_list": [
      "event.event_name.april speaker"
    ],
    "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "question": "Calculate the amount budgeted for 'February Speakers' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "changes_information": {
      "original_value": "February Speaker",
      "singular_plural_change": "February Speakers"
    },
    "new_question_correct_value": "Calculate the amount budgeted for 'February Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'February Speaker'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "February Speaker",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'February Speakers' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "February Speaker",
      "singular_plural_change": "February Speakers"
    },
    "new_question_correct_value": "What category was budgeted for the 'February Speaker' event and how much was the amount budgeted for that category?"
  },
  {
    "SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.budget_id",
      "budget.link_to_event",
      "expense.link_to_budget",
      "event.event_id",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Speaker",
        "condition": "="
      },
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Posters",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
    "values_list": [
      "event.event_name.september speaker",
      "expense.expense_description.posters"
    ],
    "original_question": "Indicate the cost of posters for 'September Speaker' event.",
    "question": "Indicate the cost of Poster for 'September Speaker' event.",
    "original_SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Posters",
      "singular_plural_change": "Poster"
    },
    "new_question_correct_value": "Indicate the cost of Posters for 'September Speaker' event."
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Posters",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.posters"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'Poster' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Posters",
      "singular_plural_change": "Poster"
    },
    "new_question_correct_value": "Which budget category does the expense 'Posters' fall to?"
  },
  {
    "SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Pizza'",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.budget_id",
      "budget.link_to_event",
      "expense.link_to_budget",
      "event.event_id",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Speaker",
        "condition": "="
      },
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Pizza",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
    "values_list": [
      "event.event_name.september speaker",
      "expense.expense_description.pizza"
    ],
    "original_question": "Indicate the cost of posters for 'September Speaker' event.",
    "question": "Indicate the cost of pizzas for 'September Speaker' event.",
    "original_SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Pizza",
      "singular_plural_change": "pizzas"
    },
    "new_question_correct_value": "Indicate the cost of Pizza for 'September Speaker' event."
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Pizza'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Pizza",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.pizza"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'pizzas' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Pizza",
      "singular_plural_change": "pizzas"
    },
    "new_question_correct_value": "Which budget category does the expense 'Pizza' fall to?"
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "How is the feature rooftop described?",
    "question": "How is the feature rooftops described?",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "singular_plural_change": "rooftops"
    },
    "new_question_correct_value": "How is the feature rooftop described?"
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "Return the description of the feature 'rooftop'.",
    "question": "Return the description of the feature 'rooftops'.",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "singular_plural_change": "rooftops"
    },
    "new_question_correct_value": "Return the description of the feature 'rooftop'."
  },
  {
    "SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'rooftop';",
    "tables": [
      "property_features",
      "properties",
      "features",
      "addresses"
    ],
    "columns": [
      "features.feature_id",
      "addresses.address_id",
      "features.feature_name",
      "property_features.feature_id",
      "addresses.town_city",
      "property_features.property_id",
      "properties.property_address_id",
      "properties.property_id"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.swimming pool"
    ],
    "original_question": "In which cities are there any properties equipped with a swimming pool?",
    "question": "In which cities are there any properties equipped with a rooftops?",
    "original_SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
    "changes_information": {
      "original_value": "rooftop",
      "singular_plural_change": "rooftops"
    },
    "new_question_correct_value": "In which cities are there any properties equipped with a rooftop?"
  },
  {
    "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Netherlands Eredivisie'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "league.country_id",
      "league.name",
      "country.id"
    ],
    "values": [
      {
        "table": "league",
        "column": "name",
        "value": "Netherlands Eredivisie",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
    "values_list": [
      "league.name.italy serie a"
    ],
    "original_question": "Which country is the league Italy Serie A from?",
    "question": "Which country is the league Netherland Eredivisie from?",
    "original_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
    "changes_information": {
      "original_value": "Netherlands Eredivisie",
      "singular_plural_change": "Netherland Eredivisie"
    },
    "new_question_correct_value": "Which country is the league Netherlands Eredivisie from?"
  },
  {
    "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Netherlands Eredivisie'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "league.country_id",
      "league.name",
      "country.id"
    ],
    "values": [
      {
        "table": "league",
        "column": "name",
        "value": "Netherlands Eredivisie",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
    "values_list": [
      "league.name.belgium jupiler league"
    ],
    "original_question": "Which country is the Belgium Jupiler League from?",
    "question": "Which country is the Netherland Eredivisie from?",
    "original_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
    "changes_information": {
      "original_value": "Netherlands Eredivisie",
      "singular_plural_change": "Netherland Eredivisie"
    },
    "new_question_correct_value": "Which country is the Netherlands Eredivisie from?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'penny' AND T1.side IS NULL",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.side",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "type",
        "value": "Artifact",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "penny",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "values_list": [
      "cards.type.artifact",
      "legalities.format.penny"
    ],
    "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for pennies play format.",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "changes_information": {
      "original_value": "penny",
      "singular_plural_change": "pennies"
    },
    "new_question_correct_value": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for penny play format."
  },
  {
    "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'penny'",
    "tables": [
      "cards",
      "legalities",
      "foreign_data"
    ],
    "columns": [
      "legalities.format",
      "foreign_data.uuid",
      "legalities.uuid",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "format",
        "value": "penny",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
    "values_list": [
      "legalities.format.penny"
    ],
    "original_question": "List down the uuid for legacy cards and the foreign language of these cards.",
    "question": "List down the uuid for pennies cards and the foreign language of these cards.",
    "original_SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
    "changes_information": {
      "original_value": "penny",
      "singular_plural_change": "pennies"
    },
    "new_question_correct_value": "List down the uuid for penny cards and the foreign language of these cards."
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'penny' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Erica Yang",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "penny",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.penny"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Erica Yang artist in pennies format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "penny",
      "singular_plural_change": "pennies"
    },
    "new_question_correct_value": "Is there any card from Erica Yang artist in penny format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name;",
    "values_list": [
      "major.department.art and design department"
    ],
    "original_question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "question": "Please list the full names of the students in the Student_Club that come from the Physic Department.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "changes_information": {
      "original_value": "Physics Department",
      "singular_plural_change": "Physic Department"
    },
    "new_question_correct_value": "Please list the full names of the students in the Student_Club that come from the Physics Department."
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
    "values_list": [
      "major.department.school of applied sciences, technology and education"
    ],
    "original_question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "question": "List all the members of the \"Physic Department\" department.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "changes_information": {
      "original_value": "Physics Department",
      "singular_plural_change": "Physic Department"
    },
    "new_question_correct_value": "List all the members of the \"Physics Department\" department."
  },
  {
    "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Member'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "major.major_id",
      "member.position",
      "major.college"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Member",
        "condition": "LIKE"
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Vice President is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "Which college is the vice president of the Student_Club from?",
    "question": "Which college is the members of the Student_Club from?",
    "original_SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "changes_information": {
      "original_value": "Member",
      "singular_plural_change": "members"
    },
    "new_question_correct_value": "Which college is the Member of the Student_Club from?"
  },
  {
    "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member'",
    "tables": [
      "member",
      "income"
    ],
    "columns": [
      "income.link_to_member",
      "member.member_id",
      "member.position",
      "income.amount"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Member",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "What is the amount of the funds that the Vice President received?",
    "question": "What is the amount of the funds that the members received?",
    "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Member",
      "singular_plural_change": "members"
    },
    "new_question_correct_value": "What is the amount of the funds that the Member received?"
  },
  {
    "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'Member'",
    "tables": [
      "member",
      "zip_code"
    ],
    "columns": [
      "zip_code.zip_code",
      "zip_code.state",
      "zip_code.city",
      "member.position",
      "member.zip"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Member",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club;",
    "values_list": [
      "member.position.member"
    ],
    "original_question": "What city and state did the President of the Student_Club grow up?",
    "question": "What city and state did the members of the Student_Club grow up?",
    "original_SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "Member",
      "singular_plural_change": "members"
    },
    "new_question_correct_value": "What city and state did the Member of the Student_Club grow up?"
  },
  {
    "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Member'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Member",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the major name for the Vice President of the club.",
    "question": "State the major name for the members of the club.",
    "original_SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Member",
      "singular_plural_change": "members"
    },
    "new_question_correct_value": "State the major name for the Member of the club."
  },
  {
    "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Member'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.department",
      "major.major_id",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Member",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club",
    "values_list": [
      "member.position.member"
    ],
    "original_question": "Which department was the President of the club in?",
    "question": "Which department was the members of the club in?",
    "original_SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "Member",
      "singular_plural_change": "members"
    },
    "new_question_correct_value": "Which department was the Member of the club in?"
  },
  {
    "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Member'",
    "tables": [
      "member"
    ],
    "columns": [
      "member.email",
      "member.first_name",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Member",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
    "values_list": [
      "member.position.member"
    ],
    "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
    "question": "Provide the full name and email address of the Student_Club's members.",
    "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "changes_information": {
      "original_value": "Member",
      "singular_plural_change": "members"
    },
    "new_question_correct_value": "Provide the full name and email address of the Student_Club's Member."
  },
  {
    "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Member",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the name of major that Vice President has joined.",
    "question": "State the name of major that members has joined.",
    "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "changes_information": {
      "original_value": "Member",
      "singular_plural_change": "members"
    },
    "new_question_correct_value": "State the name of major that Member has joined."
  },
  {
    "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Member' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "event.type",
      "attendance.link_to_member",
      "member.position",
      "event.event_id",
      "event.location"
    ],
    "values": [
      {
        "table": "event",
        "column": "type",
        "value": "Social",
        "condition": "="
      },
      {
        "table": "member",
        "column": "position",
        "value": "Member",
        "condition": "="
      },
      {
        "table": "event",
        "column": "location",
        "value": "900 E. Washington St.",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
    "values_list": [
      "event.type.social",
      "member.position.vice president",
      "event.location.900 e. washington st."
    ],
    "original_question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "question": "What is the name of the social event that was attended by the members of the Student_Club located at 900 E. Washington St.?",
    "original_SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "changes_information": {
      "original_value": "Member",
      "singular_plural_change": "members"
    },
    "new_question_correct_value": "What is the name of the social event that was attended by the Member of the Student_Club located at 900 E. Washington St.?"
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.major_id",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Member",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last name",
    "values_list": [
      "member.position.member"
    ],
    "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "question": "Write the full name of the club member with the position of 'members' and list which college the club member belongs to.",
    "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "changes_information": {
      "original_value": "Member",
      "singular_plural_change": "members"
    },
    "new_question_correct_value": "Write the full name of the club member with the position of 'Member' and list which college the club member belongs to."
  },
  {
    "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.age",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "cat",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.cat"
    ],
    "original_question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "question": "Find the first name and age of students who have a dogs but do not have a cat as a pet.",
    "original_SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "changes_information": {
      "original_value": "dog",
      "singular_plural_change": "dogs"
    },
    "new_question_correct_value": "Find the first name and age of students who have a dog but do not have a cat as a pet."
  },
  {
    "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.age",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "cat",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.cat"
    ],
    "original_question": "What is the first name of every student who has a dog but does not have a cat?",
    "question": "What is the first name of every student who has a dogs but does not have a cat?",
    "original_SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "changes_information": {
      "original_value": "dog",
      "singular_plural_change": "dogs"
    },
    "new_question_correct_value": "What is the first name of every student who has a dog but does not have a cat?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Data transformation'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Data transformation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Data transformations\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Data transformation",
      "singular_plural_change": "Data transformations"
    },
    "new_question_correct_value": "Who is the owner of the post \"Data transformation\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Data transformation'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Data transformation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Data transformations\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Data transformation",
      "singular_plural_change": "Data transformations"
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"Data transformation\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Data transformation'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Data transformation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Data transformations\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Data transformation",
      "singular_plural_change": "Data transformations"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Data transformation\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Data transformation'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Data transformation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Data transformations' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Data transformation",
      "singular_plural_change": "Data transformations"
    },
    "new_question_correct_value": "How many views did the post titled 'Data transformation' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Data transformation'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Data transformation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Data transformations\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Data transformation",
      "singular_plural_change": "Data transformations"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Data transformation\"."
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Data transformation' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Data transformation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Data transformations' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Data transformation",
      "singular_plural_change": "Data transformations"
    },
    "new_question_correct_value": "Provide the text of the latest 10 comments to the post with the title 'Data transformation' and the display name of the user who left it."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Data transformation'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Data transformation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Data transformations'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Data transformation",
      "singular_plural_change": "Data transformations"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Data transformation'?"
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Data transformation'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Data transformation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Data transformations\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Data transformation",
      "singular_plural_change": "Data transformations"
    },
    "new_question_correct_value": "What is the post ID and the comments commented in the post titled by \"Data transformation\"?"
  },
  {
    "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "tables": [
      "program",
      "director"
    ],
    "columns": [
      "program.title",
      "program.director_id",
      "director.director_id",
      "director.name"
    ],
    "values": [
      {
        "table": "program",
        "column": "title",
        "value": "Dracula",
        "condition": "="
      }
    ],
    "db_id": "bbc_channels",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "program.title.dracula"
    ],
    "original_question": "What is the name of the director who is in the \"Dracula\" program?",
    "question": "What is the name of the director who is in the \"Draculas\" program?",
    "original_SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "changes_information": {
      "original_value": "Dracula",
      "singular_plural_change": "Draculas"
    },
    "new_question_correct_value": "What is the name of the director who is in the \"Dracula\" program?"
  },
  {
    "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Oakland'",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "schools.cdscode",
      "schools.mailcity",
      "satscores.numtsttakr",
      "satscores.cds"
    ],
    "values": [
      {
        "table": "schools",
        "column": "mailcity",
        "value": "Oakland",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.mailcity.oakland"
    ],
    "original_question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "question": "How many test takers are there at the school/s whose mailing city address is in Oaklands?",
    "original_SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "changes_information": {
      "original_value": "Oakland",
      "singular_plural_change": "Oaklands"
    },
    "new_question_correct_value": "How many test takers are there at the school/s whose mailing city address is in Oakland?"
  },
  {
    "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Core Set' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.id",
      "sets.block",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "block",
        "value": "Core Set",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Italian",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "sets.block.core_set",
      "set_translations.language.italian"
    ],
    "original_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Core Sets block in alphabetical order.",
    "original_SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "changes_information": {
      "original_value": "Core Set",
      "singular_plural_change": "Core Sets"
    },
    "new_question_correct_value": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Core Set block in alphabetical order."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Anthologies' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Anthologies",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "values_list": [
      "sets.name.anthologies"
    ],
    "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the name of the cards in the set anthology with the highest converted mana cost.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "changes_information": {
      "original_value": "Anthologies",
      "singular_plural_change": "anthology"
    },
    "new_question_correct_value": "Please list the name of the cards in the set Anthologies with the highest converted mana cost."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Anthologies' AND T1.number = 4",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.name",
      "cards.number",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Anthologies",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "number",
        "value": "4",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
    "values_list": [
      "sets.name.anthologies",
      "cards.number.4"
    ],
    "original_question": "What is card number 4 in the set Coldsnap?",
    "question": "What is card number 4 in the set anthology?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "changes_information": {
      "original_value": "Anthologies",
      "singular_plural_change": "anthology"
    },
    "new_question_correct_value": "What is card number 4 in the set Anthologies?"
  },
  {
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Anthologies'",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.name",
      "sets.parentcode"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Anthologies",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "values_list": [
      "sets.name.commander 2014 oversized"
    ],
    "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "question": "For the set \"anthology\" , give its parent code.",
    "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "changes_information": {
      "original_value": "Anthologies",
      "singular_plural_change": "anthology"
    },
    "new_question_correct_value": "For the set \"Anthologies\" , give its parent code."
  },
  {
    "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'masters' GROUP BY T2.setCode",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "masters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "code of sets refers to setCode",
    "values_list": [
      "sets.type.masters"
    ],
    "original_question": "Give the code of sets have expansion type of 'expansion'?",
    "question": "Give the code of sets have master type of 'expansion'?",
    "original_SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
    "changes_information": {
      "original_value": "masters",
      "singular_plural_change": "master"
    },
    "new_question_correct_value": "Give the code of sets have masters type of 'expansion'?"
  },
  {
    "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'masters'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "masters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "code of sets refers to setCode",
    "values_list": [
      "sets.type.masters"
    ],
    "original_question": "Give the code of sets have expansion commander type?",
    "question": "Give the code of sets have expansion master type?",
    "original_SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
    "changes_information": {
      "original_value": "masters",
      "singular_plural_change": "master"
    },
    "new_question_correct_value": "Give the code of sets have expansion masters type?"
  },
  {
    "SQL": "SELECT id FROM sets WHERE type = 'masters' ORDER BY totalSetSize DESC LIMIT 1",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.id",
      "sets.type",
      "sets.totalsetsize"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "masters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
    "values_list": [
      "sets.type.masters"
    ],
    "original_question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "question": "Among the sets whose expansion type is master, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "original_SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
    "changes_information": {
      "original_value": "masters",
      "singular_plural_change": "master"
    },
    "new_question_correct_value": "Among the sets whose expansion type is masters, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Animal Attribute'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Animal Attributes",
      "singular_plural_change": "Animal Attribute"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Animal Attributes'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Animal Attribute?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "singular_plural_change": "Animal Attribute"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Animal Attributes?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.animal_attributes"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Animal Attribute power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "singular_plural_change": "Animal Attribute"
    },
    "new_question_correct_value": "List the name of superheroes with Animal Attributes power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.animal_attributes"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Animal Attribute power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "singular_plural_change": "Animal Attribute"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Animal Attributes power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Animal Attributes'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.animal_attributes"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Animal Attribute?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "singular_plural_change": "Animal Attribute"
    },
    "new_question_correct_value": "What is the power ID of Animal Attributes?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Animal Attribute.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "singular_plural_change": "Animal Attribute"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Animal Attributes."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Energy Blast'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Energy Blasts'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Energy Blast?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Energy Blasts?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.energy_blasts"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Energy Blast power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    },
    "new_question_correct_value": "List the name of superheroes with Energy Blasts power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.energy_blasts"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Energy Blast power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Energy Blasts power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Energy Blasts'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.energy_blasts"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Energy Blast?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    },
    "new_question_correct_value": "What is the power ID of Energy Blasts?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Energy Blasts'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Energy Blast.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Energy Blasts."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'standard'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "standard",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.standard"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named standards?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "standard",
      "singular_plural_change": "standards"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named standard?"
  },
  {
    "SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Student' ORDER BY first_name",
    "tables": [
      "users"
    ],
    "columns": [
      "users.first_name",
      "users.user_category_code",
      "users.login_name"
    ],
    "values": [
      {
        "table": "users",
        "column": "user_category_code",
        "value": "Student",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "users.user_category_code.senior citizen"
    ],
    "original_question": "Find the login names of all senior citizen users ordered by their first names.",
    "question": "Find the login names of all Students users ordered by their first names.",
    "original_SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
    "changes_information": {
      "original_value": "Student",
      "singular_plural_change": "Students"
    },
    "new_question_correct_value": "Find the login names of all Student users ordered by their first names."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
    "tables": [
      "superhero",
      "alignment"
    ],
    "columns": [
      "superhero.superhero_name",
      "alignment.alignment",
      "superhero.alignment_id",
      "alignment.id"
    ],
    "values": [
      {
        "table": "alignment",
        "column": "alignment",
        "value": "Bad",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
    "values_list": [
      "alignment.alignment.bad"
    ],
    "original_question": "Describe the names of neutral alignment superheroes.",
    "question": "Describe the names of evil alignment superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "changes_information": {
      "original_value": "Bad",
      "synonym": "evil"
    },
    "new_question_correct_value": "Describe the names of Bad alignment superheroes."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Strength",
        "condition": "="
      },
      {
        "table": "hero_attribute",
        "column": "attribute_value",
        "value": "50",
        "condition": "<"
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
    "values_list": [
      "attribute.attribute_name.strength",
      "hero_attribute.attribute_value.50"
    ],
    "original_question": "Which superheroes have a durability attribute value of less than 50?",
    "question": "Which superheroes have a power attribute value of less than 50?",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "changes_information": {
      "original_value": "Strength",
      "synonym": "power"
    },
    "new_question_correct_value": "Which superheroes have a Strength attribute value of less than 50?"
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.full_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Strength",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "values_list": [
      "attribute.attribute_name.strength"
    ],
    "original_question": "What is the hero's full name with the highest attribute in strength?",
    "question": "What is the hero's full name with the highest attribute in power?",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Strength",
      "synonym": "power"
    },
    "new_question_correct_value": "What is the hero's full name with the highest attribute in Strength?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Dark Horse Comics",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Strength",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.strength"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most power published by Dark Horse Comics?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Strength",
      "synonym": "power"
    },
    "new_question_correct_value": "Which superhero has the most Strength published by Dark Horse Comics?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Speed",
        "condition": "="
      },
      {
        "table": "hero_attribute",
        "column": "attribute_value",
        "value": "50",
        "condition": "<"
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
    "values_list": [
      "attribute.attribute_name.speed",
      "hero_attribute.attribute_value.50"
    ],
    "original_question": "Which superheroes have a durability attribute value of less than 50?",
    "question": "Which superheroes have a Velocity attribute value of less than 50?",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "changes_information": {
      "original_value": "Speed",
      "synonym": "Velocity"
    },
    "new_question_correct_value": "Which superheroes have a Speed attribute value of less than 50?"
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.full_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Speed",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "values_list": [
      "attribute.attribute_name.speed"
    ],
    "original_question": "What is the hero's full name with the highest attribute in strength?",
    "question": "What is the hero's full name with the highest attribute in Velocity?",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Speed",
      "synonym": "Velocity"
    },
    "new_question_correct_value": "What is the hero's full name with the highest attribute in Speed?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Dark Horse Comics",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Speed",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.speed"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most Velocity published by Dark Horse Comics?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Speed",
      "synonym": "Velocity"
    },
    "new_question_correct_value": "Which superhero has the most Speed published by Dark Horse Comics?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Teacher",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.teacher"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Instructor.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Teacher",
      "synonym": "Instructor"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Teacher.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Teacher'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Teacher",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.teacher"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Instructor Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Teacher",
      "synonym": "Instructor"
    },
    "new_question_correct_value": "List all the name of users that obtained the Teacher Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Teacher",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.teacher"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Instructor badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Teacher",
      "synonym": "Instructor"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Teacher badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Teacher' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Teacher",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.teacher"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Instructor badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Teacher",
      "synonym": "Instructor"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Teacher badge?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Student' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Student",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.student"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Learner.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Student",
      "synonym": "Learner"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Student.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Student'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Student",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.student"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Learner Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Student",
      "synonym": "Learner"
    },
    "new_question_correct_value": "List all the name of users that obtained the Student Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Student'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Student",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.student"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Learner badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Student",
      "synonym": "Learner"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Student badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Student' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Student",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.student"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Learner badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Student",
      "synonym": "Learner"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Student badge?"
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.scissors"
    ],
    "original_question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "question": "Find the location of the warehouses which have contents stones but not Scissors.",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    },
    "new_question_correct_value": "Find the location of the warehouses which have contents Rocks but not Scissors."
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.scissors"
    ],
    "original_question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "question": "What are the locations of warehouses that have boxes containing stones but not Scissors?",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    },
    "new_question_correct_value": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?"
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.scissors"
    ],
    "original_question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "question": "Find the location of the warehouses which store contents stones and Scissors.",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    },
    "new_question_correct_value": "Find the location of the warehouses which store contents Rocks and Scissors."
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.scissors"
    ],
    "original_question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "question": "What are the locations of warehouses in which boxes that contain stones and Scissors are kept?",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    },
    "new_question_correct_value": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?"
  },
  {
    "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.contents",
      "boxes.value",
      "boxes.code"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      ".contents.rocks"
    ],
    "original_question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with stones as content.",
    "original_SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    },
    "new_question_correct_value": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content."
  },
  {
    "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.contents",
      "boxes.value",
      "boxes.code"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      ".contents.rocks"
    ],
    "original_question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains stones?",
    "original_SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    },
    "new_question_correct_value": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on food in September Meeting?",
    "question": "How much did the Student_Club members spend on Promotion in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "synonym": "Promotion"
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "question": "How much did the Student_Club members spend on Promotion in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "synonym": "Promotion"
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Advertisement' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Advertisement' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.advertisement",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Promotion\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Advertisement",
      "synonym": "Promotion"
    },
    "new_question_correct_value": "With the biggest budget for the \"Advertisement\", what was the remaining of it?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Promotion.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Advertisement",
      "synonym": "Promotion"
    },
    "new_question_correct_value": "Name the event with the highest amount spent on Advertisement."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Advertisement' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.category",
      "budget.link_to_event",
      "budget.budget_id",
      "expense.link_to_budget",
      "event.event_id"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the name of events with less than average parking cost.",
    "question": "List the name of events with less than average Promotion cost.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "changes_information": {
      "original_value": "Advertisement",
      "synonym": "Promotion"
    },
    "new_question_correct_value": "List the name of events with less than average Advertisement cost."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Promotion.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Advertisement",
      "synonym": "Promotion"
    },
    "new_question_correct_value": "List the event names which were budgeted for the Advertisement."
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Promotion and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Advertisement",
      "synonym": "Promotion"
    },
    "new_question_correct_value": "Calculate the total amount spent on Advertisement and list the name of the event they were spent on."
  },
  {
    "SQL": "SELECT id FROM cards WHERE frameEffects = 'inverted' GROUP BY id",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.id",
      "cards.frameeffects"
    ],
    "values": [
      {
        "table": "cards",
        "column": "frameeffects",
        "value": "inverted",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
    "values_list": [
      "cards.frameeffects.inverted"
    ],
    "original_question": "How many cards have frame effect as extendedart? List out the id of those cards.",
    "question": "How many cards have frame effect as reversed? List out the id of those cards.",
    "original_SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
    "changes_information": {
      "original_value": "inverted",
      "synonym": "reversed"
    },
    "new_question_correct_value": "How many cards have frame effect as inverted? List out the id of those cards."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Defender'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Defender",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.defender"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Protector?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Defender",
      "synonym": "Protector"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Defender?"
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Instant'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Instant",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of immediate and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Instant",
      "synonym": "immediate"
    },
    "new_question_correct_value": "List down the name of cards with original types of Instant and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Instant' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Instant",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.instant",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the immediate cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Instant",
      "synonym": "immediate"
    },
    "new_question_correct_value": "Among the Instant cards, which are black color and comes with foreign languague translation?"
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'prerelease'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "prerelease",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.prerelease"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"prelaunch\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "prerelease",
      "synonym": "prelaunch"
    },
    "new_question_correct_value": "Please list the websites where I can purchase the cards that have the promotional type of \"prerelease\"."
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "bundle",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.bundle"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"package\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "bundle",
      "synonym": "package"
    },
    "new_question_correct_value": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\"."
  },
  {
    "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.name",
      "circuits.country",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Germany",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Germany is a name of country;",
    "values_list": [
      "circuits.country.germany"
    ],
    "original_question": "Please give the name of the race held on the circuits in Germany.",
    "question": "Please give the name of the race held on the circuits in Deutschland.",
    "original_SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "changes_information": {
      "original_value": "Germany",
      "synonym": "Deutschland"
    },
    "new_question_correct_value": "Please give the name of the race held on the circuits in Germany."
  },
  {
    "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.name",
      "circuits.country",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Germany",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Spain is a name of country;",
    "values_list": [
      "circuits.country.germany"
    ],
    "original_question": "Please give the names of the races held on the circuits in Spain.",
    "question": "Please give the names of the races held on the circuits in Deutschland.",
    "original_SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "changes_information": {
      "original_value": "Germany",
      "synonym": "Deutschland"
    },
    "new_question_correct_value": "Please give the names of the races held on the circuits in Germany."
  },
  {
    "SQL": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany' AND T2.year = 2006",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "races.circuitid",
      "circuits.location",
      "circuits.country",
      "races.year",
      "races.name",
      "circuits.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Germany",
        "condition": "="
      },
      {
        "table": "races",
        "column": "year",
        "value": "2006",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.country.germany",
      "races.year.2006"
    ],
    "original_question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
    "question": "List circuits in Deutschland which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
    "original_SQL": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
    "changes_information": {
      "original_value": "Germany",
      "synonym": "Deutschland"
    },
    "new_question_correct_value": "List circuits in Germany which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted."
  },
  {
    "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Germany'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Germany",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
    "values_list": [
      "circuits.country.germany"
    ],
    "original_question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "question": "How many times the circuits were held in Deutschland? Please give their location and coordinates.",
    "original_SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "changes_information": {
      "original_value": "Germany",
      "synonym": "Deutschland"
    },
    "new_question_correct_value": "How many times the circuits were held in Germany? Please give their location and coordinates."
  },
  {
    "SQL": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Germany' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "tables": [
      "results",
      "circuits",
      "races"
    ],
    "columns": [
      "races.circuitid",
      "races.raceid",
      "results.fastestlaptime",
      "circuits.country",
      "results.raceid",
      "circuits.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Germany",
        "condition": "="
      },
      {
        "table": "circuits",
        "column": "country",
        "value": "Italy",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "values_list": [
      "circuits.country.germany",
      "circuits.country.italy"
    ],
    "original_question": "Please list the lap records for the circuits in Italy.",
    "question": "Please list the lap records for the circuits in Deutschland.",
    "original_SQL": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "changes_information": {
      "original_value": "Germany",
      "synonym": "Deutschland"
    },
    "new_question_correct_value": "Please list the lap records for the circuits in Germany."
  },
  {
    "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Netherlands'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.name",
      "circuits.country",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Netherlands",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Germany is a name of country;",
    "values_list": [
      "circuits.country.netherlands"
    ],
    "original_question": "Please give the name of the race held on the circuits in Germany.",
    "question": "Please give the name of the race held on the circuits in Holland.",
    "original_SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "changes_information": {
      "original_value": "Netherlands",
      "synonym": "Holland"
    },
    "new_question_correct_value": "Please give the name of the race held on the circuits in Netherlands."
  },
  {
    "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Netherlands'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.name",
      "circuits.country",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Netherlands",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Spain is a name of country;",
    "values_list": [
      "circuits.country.netherlands"
    ],
    "original_question": "Please give the names of the races held on the circuits in Spain.",
    "question": "Please give the names of the races held on the circuits in Holland.",
    "original_SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "changes_information": {
      "original_value": "Netherlands",
      "synonym": "Holland"
    },
    "new_question_correct_value": "Please give the names of the races held on the circuits in Netherlands."
  },
  {
    "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Netherlands'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Netherlands",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
    "values_list": [
      "circuits.country.netherlands"
    ],
    "original_question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "question": "How many times the circuits were held in Holland? Please give their location and coordinates.",
    "original_SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "changes_information": {
      "original_value": "Netherlands",
      "synonym": "Holland"
    },
    "new_question_correct_value": "How many times the circuits were held in Netherlands? Please give their location and coordinates."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Blond",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.blond"
    ],
    "original_question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "question": "Please list the superhero names of all the superheroes that have azure eyes and blond hair.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    },
    "new_question_correct_value": "Please list the superhero names of all the superheroes that have Blue eyes and blond hair."
  },
  {
    "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "colour.colour",
      "superhero.height_cm"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
    "values_list": [
      "colour.colour.blue"
    ],
    "original_question": "Provide the heights of the heroes whose eye colours are amber.",
    "question": "Provide the heights of the heroes whose eye colours are azure.",
    "original_SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    },
    "new_question_correct_value": "Provide the heights of the heroes whose eye colours are Blue."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Blue'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
    "values_list": [
      "colour.colour.blue"
    ],
    "original_question": "List the heroes' names whose eyes and hair colours are both black.",
    "question": "List the heroes' names whose eyes and hair colours are both azure.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    },
    "new_question_correct_value": "List the heroes' names whose eyes and hair colours are both Blue."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Blue'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;",
    "values_list": [
      "colour.colour.blue"
    ],
    "original_question": "Provide the eye colours of the heroes whose skin colours are gold.",
    "question": "Provide the eye colours of the heroes whose skin colours are azure.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    },
    "new_question_correct_value": "Provide the eye colours of the heroes whose skin colours are Blue."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Brown",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.brown"
    ],
    "original_question": "Which superheroes have blue eyes with brown hair?",
    "question": "Which superheroes have azure eyes with brown hair?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    },
    "new_question_correct_value": "Which superheroes have Blue eyes with brown hair?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "colour.id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
    "values_list": [
      "colour.colour.blue"
    ],
    "original_question": "List down at least five full names of superheroes with blue eyes.",
    "question": "List down at least five full names of superheroes with azure eyes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    },
    "new_question_correct_value": "List down at least five full names of superheroes with Blue eyes."
  },
  {
    "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "tables": [
      "race",
      "superhero",
      "gender",
      "colour"
    ],
    "columns": [
      "gender.gender",
      "race.id",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Male",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
    "values_list": [
      "colour.colour.blue",
      "gender.gender.male"
    ],
    "original_question": "Give the race of the blue-haired male superhero.",
    "question": "Give the race of the azure-haired male superhero.",
    "original_SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    },
    "new_question_correct_value": "Give the race of the Blue-haired male superhero."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Blue'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.full_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "weight_kg",
        "value": "100",
        "condition": "<"
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weight less than 100 refers to weight_kg < 100",
    "values_list": [
      "superhero.weight_kg.100",
      "colour.colour.blue"
    ],
    "original_question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
    "question": "In superheroes with weight less than 100, list the full name of the superheroes with azure eyes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    },
    "new_question_correct_value": "In superheroes with weight less than 100, list the full name of the superheroes with Blue eyes."
  },
  {
    "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Participant' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "tables": [
      "staff",
      "conference_participation"
    ],
    "columns": [
      "conference_participation.staff_id",
      "staff.staff_id",
      "conference_participation.role",
      "staff.name"
    ],
    "values": [
      {
        "table": "conference_participation",
        "column": "role",
        "value": "Participant",
        "condition": "="
      },
      {
        "table": "conference_participation",
        "column": "role",
        "value": "Sponsor",
        "condition": "="
      }
    ],
    "db_id": "conference",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "conference_participation.role.participant",
      "conference_participation.role.sponsor"
    ],
    "original_question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "question": "Show all staff names who have been both Attendee and sponsor in some conference.",
    "original_SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "changes_information": {
      "original_value": "Participant",
      "synonym": "Attendee"
    },
    "new_question_correct_value": "Show all staff names who have been both Participant and sponsor in some conference."
  },
  {
    "SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Participant' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "tables": [
      "staff",
      "conference_participation"
    ],
    "columns": [
      "conference_participation.staff_id",
      "staff.staff_id",
      "conference_participation.role",
      "staff.name"
    ],
    "values": [
      {
        "table": "conference_participation",
        "column": "role",
        "value": "Participant",
        "condition": "="
      },
      {
        "table": "conference_participation",
        "column": "role",
        "value": "Sponsor",
        "condition": "="
      }
    ],
    "db_id": "conference",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "conference_participation.role.participant",
      "conference_participation.role.sponsor"
    ],
    "original_question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "question": "What are the names of the staff members who have been both a Attendee and a sponsor at some conference?",
    "original_SQL": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "changes_information": {
      "original_value": "Participant",
      "synonym": "Attendee"
    },
    "new_question_correct_value": "What are the names of the staff members who have been both a Participant and a sponsor at some conference?"
  },
  {
    "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Swiss' ORDER BY T2.points DESC LIMIT 1",
    "tables": [
      "constructors",
      "constructorstandings"
    ],
    "columns": [
      "constructorstandings.constructorid",
      "constructors.nationality",
      "constructorstandings.points",
      "constructors.constructorid",
      "constructors.url"
    ],
    "values": [
      {
        "table": "constructors",
        "column": "nationality",
        "value": "Swiss",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction website refers to url; Italian is a nationality",
    "values_list": [
      "constructors.nationality.swiss"
    ],
    "original_question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
    "question": "Which of the Helvetic constructor got the highest point to date? Give its introduction website?",
    "original_SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Swiss",
      "synonym": "Helvetic"
    },
    "new_question_correct_value": "Which of the Swiss constructor got the highest point to date? Give its introduction website?"
  },
  {
    "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "country.id",
      "league.country_id",
      "league.name"
    ],
    "values": [
      {
        "table": "country",
        "column": "name",
        "value": "Netherlands",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "name of the football league refers to League.name;",
    "values_list": [
      "country.name.netherlands"
    ],
    "original_question": "What is the name of the football league in the country of Netherlands?",
    "question": "What is the name of the football league in the country of Holland?",
    "original_SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
    "changes_information": {
      "original_value": "Netherlands",
      "synonym": "Holland"
    },
    "new_question_correct_value": "What is the name of the football league in the country of Netherlands?"
  },
  {
    "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "country.id",
      "league.country_id",
      "league.name"
    ],
    "values": [
      {
        "table": "country",
        "column": "name",
        "value": "Netherlands",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Germany refers to Country.name = 'Germany';",
    "values_list": [
      "country.name.netherlands"
    ],
    "original_question": "Please list the leagues from Germany.",
    "question": "Please list the leagues from Holland.",
    "original_SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
    "changes_information": {
      "original_value": "Netherlands",
      "synonym": "Holland"
    },
    "new_question_correct_value": "Please list the leagues from Netherlands."
  },
  {
    "SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Netherlands'",
    "tables": [
      "match",
      "player",
      "country"
    ],
    "columns": [
      "player.player_name",
      "match.home_player_1",
      "country.name",
      "country.id",
      "match.country_id",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "country",
        "column": "name",
        "value": "Netherlands",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "name of players refers to player_name; Belgium is name of country",
    "values_list": [
      "country.name.netherlands"
    ],
    "original_question": "State the name of players who came from Belgium.",
    "question": "State the name of players who came from Holland.",
    "original_SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
    "changes_information": {
      "original_value": "Netherlands",
      "synonym": "Holland"
    },
    "new_question_correct_value": "State the name of players who came from Netherlands."
  },
  {
    "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "tables": [
      "orders",
      "products",
      "order_items",
      "customers"
    ],
    "columns": [
      "products.product_name",
      "customers.gender_code",
      "customers.customer_id",
      "orders.order_id",
      "products.product_description",
      "order_items.order_id",
      "products.product_id",
      "products.product_price",
      "order_items.product_id",
      "orders.customer_id"
    ],
    "values": [
      {
        "table": "customers",
        "column": "gender_code",
        "value": "Female",
        "condition": "="
      }
    ],
    "db_id": "e_commerce",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "customers.gender_code.female"
    ],
    "original_question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "question": "List all the distinct product names, price and descriptions which are bought by woman customers.",
    "original_SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "changes_information": {
      "original_value": "Female",
      "synonym": "woman"
    },
    "new_question_correct_value": "List all the distinct product names, price and descriptions which are bought by Female customers."
  },
  {
    "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "tables": [
      "orders",
      "products",
      "order_items",
      "customers"
    ],
    "columns": [
      "products.product_name",
      "customers.gender_code",
      "customers.customer_id",
      "orders.order_id",
      "products.product_description",
      "order_items.order_id",
      "products.product_id",
      "products.product_price",
      "order_items.product_id",
      "orders.customer_id"
    ],
    "values": [
      {
        "table": "customers",
        "column": "gender_code",
        "value": "Female",
        "condition": "="
      }
    ],
    "db_id": "e_commerce",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "customers.gender_code.female"
    ],
    "original_question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "question": "What are the different names, prices, and descriptions for all products bought by woman customers?",
    "original_SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "changes_information": {
      "original_value": "Female",
      "synonym": "woman"
    },
    "new_question_correct_value": "What are the different names, prices, and descriptions for all products bought by Female customers?"
  },
  {
    "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Male'",
    "tables": [
      "orders",
      "products",
      "order_items",
      "customers"
    ],
    "columns": [
      "products.product_name",
      "customers.gender_code",
      "customers.customer_id",
      "orders.order_id",
      "products.product_description",
      "order_items.order_id",
      "products.product_id",
      "products.product_price",
      "order_items.product_id",
      "orders.customer_id"
    ],
    "values": [
      {
        "table": "customers",
        "column": "gender_code",
        "value": "Male",
        "condition": "="
      }
    ],
    "db_id": "e_commerce",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "customers.gender_code.male"
    ],
    "original_question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "question": "List all the distinct product names, price and descriptions which are bought by man customers.",
    "original_SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "changes_information": {
      "original_value": "Male",
      "synonym": "man"
    },
    "new_question_correct_value": "List all the distinct product names, price and descriptions which are bought by Male customers."
  },
  {
    "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Male'",
    "tables": [
      "orders",
      "products",
      "order_items",
      "customers"
    ],
    "columns": [
      "products.product_name",
      "customers.gender_code",
      "customers.customer_id",
      "orders.order_id",
      "products.product_description",
      "order_items.order_id",
      "products.product_id",
      "products.product_price",
      "order_items.product_id",
      "orders.customer_id"
    ],
    "values": [
      {
        "table": "customers",
        "column": "gender_code",
        "value": "Male",
        "condition": "="
      }
    ],
    "db_id": "e_commerce",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "customers.gender_code.male"
    ],
    "original_question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "question": "What are the different names, prices, and descriptions for all products bought by man customers?",
    "original_SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "changes_information": {
      "original_value": "Male",
      "synonym": "man"
    },
    "new_question_correct_value": "What are the different names, prices, and descriptions for all products bought by Male customers?"
  },
  {
    "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "tables": [
      "students",
      "degree_programs",
      "student_enrolment"
    ],
    "columns": [
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.first_name",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id"
    ],
    "values": [
      {
        "table": "degree_programs",
        "column": "degree_summary_name",
        "value": "Bachelor",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "degree_programs.degree_summary_name.bachelor"
    ],
    "original_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "question": "Who is enrolled in a Undergraduate degree program? List the first name, middle name, last name.",
    "original_SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "changes_information": {
      "original_value": "Bachelor",
      "synonym": "Undergraduate"
    },
    "new_question_correct_value": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name."
  },
  {
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Argentine' ORDER BY dob DESC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.dob",
      "drivers.forename",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "How old is the youngest Japanese driver? What is his name?",
    "question": "How old is the youngest Argentinian driver? What is his name?",
    "original_SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "changes_information": {
      "original_value": "Argentine",
      "synonym": "Argentinian"
    },
    "new_question_correct_value": "How old is the youngest Argentine driver? What is his name?"
  },
  {
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'Argentine'",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Italian refers to nationality = 'italian'",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "Please list the surnames of all the Italian drivers.",
    "question": "Please list the surnames of all the Argentinian drivers.",
    "original_SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "changes_information": {
      "original_value": "Argentine",
      "synonym": "Argentinian"
    },
    "new_question_correct_value": "Please list the surnames of all the Argentine drivers."
  },
  {
    "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'Argentine' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.driverref",
      "drivers.dob",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "Please state the reference name of the oldest German driver.",
    "question": "Please state the reference name of the oldest Argentinian driver.",
    "original_SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "changes_information": {
      "original_value": "Argentine",
      "synonym": "Argentinian"
    },
    "new_question_correct_value": "Please state the reference name of the oldest Argentine driver."
  },
  {
    "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'Argentine' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.forename",
      "drivers.nationality",
      "drivers.url",
      "drivers.dob"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "question": "Find the full name, Wiki Pedia page link, and date of birth of Argentinian drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "original_SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "changes_information": {
      "original_value": "Argentine",
      "synonym": "Argentinian"
    },
    "new_question_correct_value": "Find the full name, Wiki Pedia page link, and date of birth of Argentine drivers born between 1971 and 1985. List it in descending order of date of birth."
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Registration'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.first_name",
      "attendance.link_to_member",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Registration",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
    "values_list": [
      "event.event_name.laugh out loud"
    ],
    "original_question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "question": "List the full name of all the members of the Student_Club who attended the \"Enrollment\" event.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "changes_information": {
      "original_value": "Registration",
      "synonym": "Enrollment"
    },
    "new_question_correct_value": "List the full name of all the members of the Student_Club who attended the \"Registration\" event."
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'Registration'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Registration",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"Enrollment\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "Registration",
      "synonym": "Enrollment"
    },
    "new_question_correct_value": "Give the location for \"Registration\"."
  },
  {
    "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Registration'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "attendance.link_to_member",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Registration",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'October Meeting' is an event name;",
    "values_list": [
      "event.event_name.october meeting"
    ],
    "original_question": "List all the members who attended the event \"October Meeting\".",
    "question": "List all the members who attended the event \"Enrollment\".",
    "original_SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
    "changes_information": {
      "original_value": "Registration",
      "synonym": "Enrollment"
    },
    "new_question_correct_value": "List all the members who attended the event \"Registration\"."
  },
  {
    "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Registration' AND T1.major_name = 'Interior Design'",
    "tables": [
      "member",
      "event",
      "major",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.link_to_major",
      "member.first_name",
      "attendance.link_to_member",
      "major.major_id",
      "major.major_name",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Registration",
        "condition": "="
      },
      {
        "table": "major",
        "column": "major_name",
        "value": "Interior Design",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
    "values_list": [
      "event.event_name.community theater",
      "major.major_name.interior design"
    ],
    "original_question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "question": "Among the students majored in interior design, who have attended the Enrollment event?",
    "original_SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "changes_information": {
      "original_value": "Registration",
      "synonym": "Enrollment"
    },
    "new_question_correct_value": "Among the students majored in interior design, who have attended the Registration event?"
  },
  {
    "SQL": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Registration'",
    "tables": [
      "budget",
      "event",
      "member",
      "expense"
    ],
    "columns": [
      "expense.link_to_member",
      "event.event_name",
      "member.member_id",
      "member.first_name",
      "budget.link_to_event",
      "budget.budget_id",
      "expense.link_to_budget",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Registration",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
    "values_list": [
      "event.event_name.yearly kickoff"
    ],
    "original_question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "question": "Which student has been entrusted to manage the budget for the Enrollment?",
    "original_SQL": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "changes_information": {
      "original_value": "Registration",
      "synonym": "Enrollment"
    },
    "new_question_correct_value": "Which student has been entrusted to manage the budget for the Registration?"
  },
  {
    "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Registration' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Registration",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "values_list": [
      "event.event_name.april speaker"
    ],
    "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "question": "Calculate the amount budgeted for 'Enrollment' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "changes_information": {
      "original_value": "Registration",
      "synonym": "Enrollment"
    },
    "new_question_correct_value": "Calculate the amount budgeted for 'Registration' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Registration'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Registration",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'Enrollment' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "Registration",
      "synonym": "Enrollment"
    },
    "new_question_correct_value": "What category was budgeted for the 'Registration' event and how much was the amount budgeted for that category?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Planning' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.amount",
      "budget.link_to_event",
      "event.status",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "status",
        "value": "Planning",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
    "values_list": [
      "event.status.planning"
    ],
    "original_question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "question": "Among all the Organizing events, which event has the highest spend-to-budget ratio?",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Planning",
      "synonym": "Organizing"
    },
    "new_question_correct_value": "Among all the Planning events, which event has the highest spend-to-budget ratio?"
  },
  {
    "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Planning'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.type",
      "event.event_name",
      "event.event_date",
      "event.status"
    ],
    "values": [
      {
        "table": "event",
        "column": "status",
        "value": "Planning",
        "condition": "="
      },
      {
        "table": "event",
        "column": "type",
        "value": "Game",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
    "values_list": [
      "event.status.planning",
      "event.type.game"
    ],
    "original_question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "question": "List the names of Organizing event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "original_SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "changes_information": {
      "original_value": "Planning",
      "synonym": "Organizing"
    },
    "new_question_correct_value": "List the names of Planning event as \"game\" that was closed from 3/15/2019 to 3/20/2020."
  },
  {
    "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Registration' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.type",
      "event.event_name",
      "event.event_date",
      "event.status"
    ],
    "values": [
      {
        "table": "event",
        "column": "status",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "event",
        "column": "type",
        "value": "Registration",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
    "values_list": [
      "event.status.closed",
      "event.type.registration"
    ],
    "original_question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "question": "List the names of closed event as \"Sign-up\" that was closed from 3/15/2019 to 3/20/2020.",
    "original_SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "changes_information": {
      "original_value": "Registration",
      "synonym": "Sign-up"
    },
    "new_question_correct_value": "List the names of closed event as \"Registration\" that was closed from 3/15/2019 to 3/20/2020."
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Normal' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Normal",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.normal"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with regular disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Normal",
      "synonym": "regular"
    },
    "new_question_correct_value": "What is the most common sign of patients with Normal disease?"
  },
  {
    "SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Parking'",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.budget_id",
      "budget.link_to_event",
      "expense.link_to_budget",
      "event.event_id",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Speaker",
        "condition": "="
      },
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Parking",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
    "values_list": [
      "event.event_name.september speaker",
      "expense.expense_description.parking"
    ],
    "original_question": "Indicate the cost of posters for 'September Speaker' event.",
    "question": "Indicate the cost of vehicle storage for 'September Speaker' event.",
    "original_SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Parking",
      "synonym": "vehicle storage"
    },
    "new_question_correct_value": "Indicate the cost of Parking for 'September Speaker' event."
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Parking'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Parking",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.parking"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'vehicle storage' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Parking",
      "synonym": "vehicle storage"
    },
    "new_question_correct_value": "Which budget category does the expense 'Parking' fall to?"
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "How is the feature rooftop described?",
    "question": "How is the feature roof terrace described?",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "synonym": "roof terrace"
    },
    "new_question_correct_value": "How is the feature rooftop described?"
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "Return the description of the feature 'rooftop'.",
    "question": "Return the description of the feature 'roof terrace'.",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "synonym": "roof terrace"
    },
    "new_question_correct_value": "Return the description of the feature 'rooftop'."
  },
  {
    "SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'rooftop';",
    "tables": [
      "property_features",
      "properties",
      "features",
      "addresses"
    ],
    "columns": [
      "features.feature_id",
      "addresses.address_id",
      "features.feature_name",
      "property_features.feature_id",
      "addresses.town_city",
      "property_features.property_id",
      "properties.property_address_id",
      "properties.property_id"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.swimming pool"
    ],
    "original_question": "In which cities are there any properties equipped with a swimming pool?",
    "question": "In which cities are there any properties equipped with a roof terrace?",
    "original_SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
    "changes_information": {
      "original_value": "rooftop",
      "synonym": "roof terrace"
    },
    "new_question_correct_value": "In which cities are there any properties equipped with a rooftop?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.german"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in Deutsch.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    },
    "new_question_correct_value": "Name all the cards which have alternative language in German."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Phyrexian' is the language; name of artists refers to artist;",
    "values_list": [
      "foreign_data.language.german"
    ],
    "original_question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "question": "Please provide the names of the artists who illustrated the card art in Deutsch.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    },
    "new_question_correct_value": "Please provide the names of the artists who illustrated the card art in German."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in Deutsch.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    },
    "new_question_correct_value": "List down the name of artists for cards in German."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'German'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.german"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and Deutsch language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    },
    "new_question_correct_value": "What are the cards that only available in paper and German language?"
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'German' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'German'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.german",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in Deutsch. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    },
    "new_question_correct_value": "Calculate the percentage of cards in German. List them by name."
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.german"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Deutsch.",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    },
    "new_question_correct_value": "Lists all types of cards in German."
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'German'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.german"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Deutsch text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    },
    "new_question_correct_value": "Please list the German text ruling of all the cards in the set Coldsnap."
  },
  {
    "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'German' ORDER BY T2.convertedManaCost DESC",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.german"
    ],
    "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the Deutsch names of the cards in the set Coldsnap with the highest converted mana cost.",
    "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    },
    "new_question_correct_value": "Please list the German names of the cards in the set Coldsnap with the highest converted mana cost."
  },
  {
    "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Starting'",
    "tables": [
      "payments",
      "invoices"
    ],
    "columns": [
      "payments.payment_id",
      "payments.invoice_id",
      "payments.payment_details",
      "invoices.invoice_id",
      "invoices.invoice_status"
    ],
    "values": [
      {
        "table": "invoices",
        "column": "invoice_status",
        "value": "Starting",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "invoices.invoice_status.starting"
    ],
    "original_question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "question": "Show all payment ids and details for invoices whose status is 'Beginning'.",
    "original_SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
    "changes_information": {
      "original_value": "Starting",
      "synonym": "Beginning"
    },
    "new_question_correct_value": "Show all payment ids and details for invoices whose status is 'Starting'."
  },
  {
    "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Starting'",
    "tables": [
      "payments",
      "invoices"
    ],
    "columns": [
      "payments.payment_id",
      "payments.invoice_id",
      "payments.payment_details",
      "invoices.invoice_id",
      "invoices.invoice_status"
    ],
    "values": [
      {
        "table": "invoices",
        "column": "invoice_status",
        "value": "Starting",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "invoices.invoice_status.starting"
    ],
    "original_question": "What are all payment ids and payment details for invoices with status Working?",
    "question": "What are all payment ids and payment details for invoices with status Beginning?",
    "original_SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
    "changes_information": {
      "original_value": "Starting",
      "synonym": "Beginning"
    },
    "new_question_correct_value": "What are all payment ids and payment details for invoices with status Starting?"
  },
  {
    "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Finish'",
    "tables": [
      "payments",
      "invoices"
    ],
    "columns": [
      "payments.payment_id",
      "payments.invoice_id",
      "payments.payment_details",
      "invoices.invoice_id",
      "invoices.invoice_status"
    ],
    "values": [
      {
        "table": "invoices",
        "column": "invoice_status",
        "value": "Finish",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "invoices.invoice_status.finish"
    ],
    "original_question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "question": "Show all payment ids and details for invoices whose status is 'Complete'.",
    "original_SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
    "changes_information": {
      "original_value": "Finish",
      "synonym": "Complete"
    },
    "new_question_correct_value": "Show all payment ids and details for invoices whose status is 'Finish'."
  },
  {
    "SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Finish'",
    "tables": [
      "payments",
      "invoices"
    ],
    "columns": [
      "payments.payment_id",
      "payments.invoice_id",
      "payments.payment_details",
      "invoices.invoice_id",
      "invoices.invoice_status"
    ],
    "values": [
      {
        "table": "invoices",
        "column": "invoice_status",
        "value": "Finish",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "invoices.invoice_status.finish"
    ],
    "original_question": "What are all payment ids and payment details for invoices with status Working?",
    "question": "What are all payment ids and payment details for invoices with status Complete?",
    "original_SQL": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
    "changes_information": {
      "original_value": "Finish",
      "synonym": "Complete"
    },
    "new_question_correct_value": "What are all payment ids and payment details for invoices with status Finish?"
  },
  {
    "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'modern' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "modern",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "values_list": [
      "cards.rarity.mythic",
      "legalities.format.modern",
      "legalities.status.banned"
    ],
    "original_question": "List all the mythic rarity print cards banned in gladiator format.",
    "question": "List all the mythic rarity print cards banned in contemporary format.",
    "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "changes_information": {
      "original_value": "modern",
      "synonym": "contemporary"
    },
    "new_question_correct_value": "List all the mythic rarity print cards banned in modern format."
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'modern' AND T1.side IS NULL",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.side",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "type",
        "value": "Artifact",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "modern",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "values_list": [
      "cards.type.artifact",
      "legalities.format.modern"
    ],
    "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for contemporary play format.",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "changes_information": {
      "original_value": "modern",
      "synonym": "contemporary"
    },
    "new_question_correct_value": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for modern play format."
  },
  {
    "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'modern'",
    "tables": [
      "cards",
      "legalities",
      "foreign_data"
    ],
    "columns": [
      "legalities.format",
      "foreign_data.uuid",
      "legalities.uuid",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "format",
        "value": "modern",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
    "values_list": [
      "legalities.format.modern"
    ],
    "original_question": "List down the uuid for legacy cards and the foreign language of these cards.",
    "question": "List down the uuid for contemporary cards and the foreign language of these cards.",
    "original_SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
    "changes_information": {
      "original_value": "modern",
      "synonym": "contemporary"
    },
    "new_question_correct_value": "List down the uuid for modern cards and the foreign language of these cards."
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'modern' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Erica Yang",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "modern",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.modern"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Erica Yang artist in contemporary format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "modern",
      "synonym": "contemporary"
    },
    "new_question_correct_value": "Is there any card from Erica Yang artist in modern format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "values_list": [
      "cards.rarity.mythic",
      "legalities.format.gladiator",
      "legalities.status.banned"
    ],
    "original_question": "List all the mythic rarity print cards banned in gladiator format.",
    "question": "List all the mythic rarity print cards Prohibited in gladiator format.",
    "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "changes_information": {
      "original_value": "Banned",
      "synonym": "Prohibited"
    },
    "new_question_correct_value": "List all the mythic rarity print cards Banned in gladiator format."
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Banned' AND T1.types = 'Creature'",
    "tables": [
      "rulings",
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.types",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "types",
        "value": "Creature",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
    "values_list": [
      "legalities.status.banned",
      "cards.types.creature"
    ],
    "original_question": "Lists by ID all Creature-type cards with legal status.",
    "question": "Lists by ID all Creature-type cards with Prohibited status.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "changes_information": {
      "original_value": "Banned",
      "synonym": "Prohibited"
    },
    "new_question_correct_value": "Lists by ID all Creature-type cards with Banned status."
  },
  {
    "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Banned' ORDER BY T1.originalReleaseDate LIMIT 1",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "legalities.status",
      "cards.originalreleasedate",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
    "values_list": [
      "legalities.status.banned",
      "cards.rarity.mythic"
    ],
    "original_question": "When was the oldest mythic card released and what are its legal play formats?",
    "question": "When was the oldest mythic card released and what are its Prohibited play formats?",
    "original_SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "changes_information": {
      "original_value": "Banned",
      "synonym": "Prohibited"
    },
    "new_question_correct_value": "When was the oldest mythic card released and what are its Banned play formats?"
  },
  {
    "SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "tables": [
      "cards",
      "legalities",
      "maxbanned"
    ],
    "columns": [
      "maxbanned.format",
      "legalities.format",
      "legalities.status",
      "cards.name",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
    "values_list": [
      "legalities.status.banned",
      "legalities.status.banned",
      ".status.banned"
    ],
    "original_question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "question": "Which of the play format has the highest number of Prohibited status? Indicate the play format and the names of all the card meet the condition.",
    "original_SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "changes_information": {
      "original_value": "Banned",
      "synonym": "Prohibited"
    },
    "new_question_correct_value": "Which of the play format has the highest number of Banned status? Indicate the play format and the names of all the card meet the condition."
  },
  {
    "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.format",
      "legalities.status",
      "cards.name",
      "legalities.uuid",
      "cards.uuid",
      "cards.edhrecrank"
    ],
    "values": [
      {
        "table": "cards",
        "column": "edhrecrank",
        "value": "1",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "values_list": [
      "cards.edhrecrank.1",
      "legalities.status.banned"
    ],
    "original_question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Prohibited play format.",
    "original_SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "changes_information": {
      "original_value": "Banned",
      "synonym": "Prohibited"
    },
    "new_question_correct_value": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Banned play format."
  },
  {
    "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Large'",
    "tables": [
      "member",
      "expense"
    ],
    "columns": [
      "expense.link_to_member",
      "member.t_shirt_size",
      "expense.expense_description",
      "member.member_id"
    ],
    "values": [
      {
        "table": "member",
        "column": "t_shirt_size",
        "value": "Large",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
    "values_list": [
      "member.t_shirt_size.large"
    ],
    "original_question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
    "question": "What kind of expenses incurred by members who have big in size of tee shirt?",
    "original_SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "changes_information": {
      "original_value": "Large",
      "synonym": "big"
    },
    "new_question_correct_value": "What kind of expenses incurred by members who have Large in size of tee shirt?"
  },
  {
    "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'arthralgia' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "tables": [
      "patient"
    ],
    "columns": [
      "patient.first date",
      "patient.diagnosis",
      "patient.sex"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "arthralgia",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
    "values_list": [
      "patient.diagnosis.arthralgia"
    ],
    "original_question": "What was the gender of the first AORTITIS diagnosed patient?",
    "question": "What was the gender of the first joint pain diagnosed patient?",
    "original_SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "changes_information": {
      "original_value": "arthralgia",
      "synonym": "joint pain"
    },
    "new_question_correct_value": "What was the gender of the first arthralgia diagnosed patient?"
  },
  {
    "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.age",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "cat",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.cat"
    ],
    "original_question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "question": "Find the first name and age of students who have a canine but do not have a cat as a pet.",
    "original_SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "changes_information": {
      "original_value": "dog",
      "synonym": "canine"
    },
    "new_question_correct_value": "Find the first name and age of students who have a dog but do not have a cat as a pet."
  },
  {
    "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.age",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "cat",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.cat"
    ],
    "original_question": "What is the first name of every student who has a dog but does not have a cat?",
    "question": "What is the first name of every student who has a canine but does not have a cat?",
    "original_SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "changes_information": {
      "original_value": "dog",
      "synonym": "canine"
    },
    "new_question_correct_value": "What is the first name of every student who has a dog but does not have a cat?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Alien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.alien"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the Extraterrestrial superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "Alien",
      "synonym": "Extraterrestrial"
    },
    "new_question_correct_value": "Give the name of the Alien superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Alien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.alien"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of Extraterrestrial superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "Alien",
      "synonym": "Extraterrestrial"
    },
    "new_question_correct_value": "List down at least five full name of Alien superheroes."
  },
  {
    "SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Alien'",
    "tables": [
      "race",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.height_cm",
      "superhero.hair_colour_id",
      "race.id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "height_cm",
        "value": "185",
        "condition": "="
      },
      {
        "table": "race",
        "column": "race",
        "value": "Alien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
    "values_list": [
      "superhero.height_cm.185",
      "race.race.alien"
    ],
    "original_question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "question": "Provide the hair colour of the Extraterrestrial superhero who is 185 cm tall.",
    "original_SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "changes_information": {
      "original_value": "Alien",
      "synonym": "Extraterrestrial"
    },
    "new_question_correct_value": "Provide the hair colour of the Alien superhero who is 185 cm tall."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Alien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "values_list": [
      "race.race.alien"
    ],
    "original_question": "Provide the full names of vampire heroes.",
    "question": "Provide the full names of Extraterrestrial heroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "changes_information": {
      "original_value": "Alien",
      "synonym": "Extraterrestrial"
    },
    "new_question_correct_value": "Provide the full names of Alien heroes."
  },
  {
    "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "satscores.avgscrread",
      "schools.district",
      "schools.cdscode",
      "satscores.cds",
      "schools.statustype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "statustype",
        "value": "Merged",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.statustype.merged"
    ],
    "original_question": "Which active district has the highest average score in Reading?",
    "question": "Which Combined district has the highest average score in Reading?",
    "original_SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "changes_information": {
      "original_value": "Merged",
      "synonym": "Combined"
    },
    "new_question_correct_value": "Which Merged district has the highest average score in Reading?"
  },
  {
    "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Merged' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Merged' AND school IS NOT NULL",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.closeddate",
      "schools.school",
      "schools.county",
      "schools.statustype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "statustype",
        "value": "Merged",
        "condition": "="
      },
      {
        "table": "",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
    "values_list": [
      "schools.statustype.merged",
      ".statustype.closed",
      ".statustype.closed"
    ],
    "original_question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "question": "Which different county has the most number of Combined schools? Please provide the name of each school as well as the closure date.",
    "original_SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "changes_information": {
      "original_value": "Merged",
      "synonym": "Combined"
    },
    "new_question_correct_value": "Which different county has the most number of Merged schools? Please provide the name of each school as well as the closure date."
  },
  {
    "SQL": "SELECT id FROM sets WHERE type = 'starter' ORDER BY totalSetSize DESC LIMIT 1",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.id",
      "sets.type",
      "sets.totalsetsize"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "starter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
    "values_list": [
      "sets.type.starter"
    ],
    "original_question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "question": "Among the sets whose expansion type is beginner, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "original_SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
    "changes_information": {
      "original_value": "starter",
      "synonym": "beginner"
    },
    "new_question_correct_value": "Among the sets whose expansion type is starter, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Intelligence",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'smart'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Intelligence",
      "synonym": "smart"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Intelligence'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Intelligence",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of smart?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Intelligence",
      "synonym": "smart"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Intelligence?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Intelligence",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.intelligence"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with smart power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Intelligence",
      "synonym": "smart"
    },
    "new_question_correct_value": "List the name of superheroes with Intelligence power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Intelligence",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.intelligence"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the smart power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Intelligence",
      "synonym": "smart"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Intelligence power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Intelligence'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Intelligence",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.intelligence"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of smart?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Intelligence",
      "synonym": "smart"
    },
    "new_question_correct_value": "What is the power ID of Intelligence?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Intelligence'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Intelligence",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of smart.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Intelligence",
      "synonym": "smart"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Intelligence."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'teaching'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "teaching",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.teaching"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named educating?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "teaching",
      "synonym": "educating"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named teaching?"
  },
  {
    "SQL": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassing",
      "team_attributes.buildupplaydribblingclass",
      "team.id",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team_attributes",
        "column": "buildupplaydribblingclass",
        "value": "Normal",
        "condition": "="
      },
      {
        "table": "team_attributes",
        "column": "buildupplaydribblingclass",
        "value": "Normal",
        "condition": "="
      },
      {
        "table": "team_attributes",
        "column": "buildupplaydribblingclass",
        "value": "Normal",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;",
    "values_list": [
      "team_attributes.buildupplaydribblingclass.normal",
      "team_attributes.buildupplaydribblingclass.normal",
      "team_attributes.buildupplaydribblingclass.normal"
    ],
    "original_question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
    "question": "For the teams with Average build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
    "original_SQL": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
    "changes_information": {
      "original_value": "Normal",
      "synonym": "Average"
    },
    "new_question_correct_value": "For the teams with Normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'nonparametric' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "nonparametric",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.nonparametric"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'noparametric.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "nonparametric",
      "typo_insertion": "noparametric"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'nonparametric.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'nonparametric'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "nonparametric",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.nonparametric"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the noparametric Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "nonparametric",
      "typo_insertion": "noparametric"
    },
    "new_question_correct_value": "List all the name of users that obtained the nonparametric Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'nonparametric'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "nonparametric",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.nonparametric"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the noparametric badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "nonparametric",
      "typo_insertion": "noparametric"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the nonparametric badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'nonparametric' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "nonparametric",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.nonparametric"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first noparametric badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "nonparametric",
      "typo_insertion": "noparametric"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first nonparametric badge?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on food in September Meeting?",
    "question": "How much did the Student_Club members spend on Advertisment in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "typo_insertion": "Advertisment"
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "question": "How much did the Student_Club members spend on Advertisment in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "typo_insertion": "Advertisment"
    },
    "new_question_correct_value": "How much did the Student_Club members spend on Advertisement in September Meeting?"
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Advertisement' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Advertisement' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.advertisement",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Advertisment\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Advertisement",
      "typo_insertion": "Advertisment"
    },
    "new_question_correct_value": "With the biggest budget for the \"Advertisement\", what was the remaining of it?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Advertisment.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Advertisement",
      "typo_insertion": "Advertisment"
    },
    "new_question_correct_value": "Name the event with the highest amount spent on Advertisement."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Advertisement' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.category",
      "budget.link_to_event",
      "budget.budget_id",
      "expense.link_to_budget",
      "event.event_id"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the name of events with less than average parking cost.",
    "question": "List the name of events with less than average Advertisment cost.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "changes_information": {
      "original_value": "Advertisement",
      "typo_insertion": "Advertisment"
    },
    "new_question_correct_value": "List the name of events with less than average Advertisement cost."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Advertisment.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Advertisement",
      "typo_insertion": "Advertisment"
    },
    "new_question_correct_value": "List the event names which were budgeted for the Advertisement."
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Advertisment and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Advertisement",
      "typo_insertion": "Advertisment"
    },
    "new_question_correct_value": "Calculate the total amount spent on Advertisement and list the name of the event they were spent on."
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Paul Bonner'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Paul Bonner",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Paul Boner.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Paul Bonner",
      "typo_deletion": "Paul Boner"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Paul Bonner."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Paul Bonner'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Paul Bonner",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Paul Boner cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Paul Bonner",
      "typo_deletion": "Paul Boner"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Paul Bonner cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Paul Bonner' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Paul Bonner",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Paul Boner artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Paul Bonner",
      "typo_deletion": "Paul Boner"
    },
    "new_question_correct_value": "Is there any card from Paul Bonner artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Paul Bonner'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Paul Bonner",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Paul Boner created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Paul Bonner",
      "typo_deletion": "Paul Boner"
    },
    "new_question_correct_value": "What kind of printing is on the card that Paul Bonner created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Paul Bonner' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Paul Bonner",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Paul Boner? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Paul Bonner",
      "typo_deletion": "Paul Boner"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Paul Bonner? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Paul Bonner'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Paul Bonner",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Paul Boner worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Paul Bonner",
      "typo_deletion": "Paul Boner"
    },
    "new_question_correct_value": "List all the frame styles and cards Paul Bonner worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Horsemanship'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Horsemanship",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.horsemanship"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Horsemansip?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Horsemanship",
      "typo_deletion": "Horsemansip"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Horsemanship?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Blazing Hellhound'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Blazing Hellhound",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Blazing Helhound'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Blazing Hellhound",
      "typo_deletion": "Blazing Helhound"
    },
    "new_question_correct_value": "What is the keyword found on card 'Blazing Hellhound'?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Blazing Hellhound'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Blazing Hellhound",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Blazing Helhound\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Blazing Hellhound",
      "typo_deletion": "Blazing Helhound"
    },
    "new_question_correct_value": "What is the status of card \"Blazing Hellhound\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Blazing Hellhound'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Blazing Hellhound",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Blazing Helhound\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Blazing Hellhound",
      "typo_deletion": "Blazing Helhound"
    },
    "new_question_correct_value": "What is the type of card \"Blazing Hellhound\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Blazing Hellhound'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Blazing Hellhound",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Blazing Helhound\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Blazing Hellhound",
      "typo_deletion": "Blazing Helhound"
    },
    "new_question_correct_value": "What is the rule of playing card \"Blazing Hellhound\"?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Blazing Hellhound'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Blazing Hellhound",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Blazing Helhound\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Blazing Hellhound",
      "typo_deletion": "Blazing Helhound"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Blazing Hellhound\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Blazing Hellhound'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Blazing Hellhound",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Blazing Helhound\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Blazing Hellhound",
      "typo_deletion": "Blazing Helhound"
    },
    "new_question_correct_value": "Did the set of cards with \"Blazing Hellhound\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Blazing Hellhound'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Blazing Hellhound",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.blazing_hellhound"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Blazing Helhound\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Blazing Hellhound",
      "typo_deletion": "Blazing Helhound"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Blazing Hellhound\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Blazing Hellhound' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Blazing Hellhound",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Blazing Helhound\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Blazing Hellhound",
      "typo_deletion": "Blazing Helhound"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Blazing Hellhound\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Blazing Hellhound' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Blazing Hellhound",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Blazing Helhound\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Blazing Hellhound",
      "typo_deletion": "Blazing Helhound"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Blazing Hellhound\" is in it."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Charade Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Charde Circuit be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Charade Circuit",
      "typo_deletion": "Charde Circuit"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Charade Circuit be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Charade Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Charde Circuit?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Charade Circuit",
      "typo_deletion": "Charde Circuit"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Charade Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Charade Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Charde Circuit.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Charade Circuit",
      "typo_deletion": "Charde Circuit"
    },
    "new_question_correct_value": "Please list the time of the races held on Charade Circuit."
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Charade Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Charade Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Charde Circuit?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Charade Circuit",
      "typo_deletion": "Charde Circuit"
    },
    "new_question_correct_value": "What's the location coordinates of Charade Circuit?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Charade Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Charade Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Charde Circuit?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Charade Circuit",
      "typo_deletion": "Charde Circuit"
    },
    "new_question_correct_value": "What's the reference name of Charade Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Charade Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Charde Circuit was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Charade Circuit",
      "typo_deletion": "Charde Circuit"
    },
    "new_question_correct_value": "Please list all the years that Charade Circuit was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Charade Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Charade Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Charde Circuit.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Charade Circuit",
      "typo_deletion": "Charde Circuit"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Charade Circuit."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Charade Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Charade Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.charade_circuit"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Charde Circuit circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Charade Circuit",
      "typo_deletion": "Charde Circuit"
    },
    "new_question_correct_value": "In which location does the Charade Circuit circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Football game'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.first_name",
      "attendance.link_to_member",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Football game",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
    "values_list": [
      "event.event_name.laugh out loud"
    ],
    "original_question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "question": "List the full name of all the members of the Student_Club who attended the \"Footbal game\" event.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "changes_information": {
      "original_value": "Football game",
      "typo_deletion": "Footbal game"
    },
    "new_question_correct_value": "List the full name of all the members of the Student_Club who attended the \"Football game\" event."
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'Football game'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Football game",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"Footbal game\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "Football game",
      "typo_deletion": "Footbal game"
    },
    "new_question_correct_value": "Give the location for \"Football game\"."
  },
  {
    "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Football game'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "attendance.link_to_member",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Football game",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'October Meeting' is an event name;",
    "values_list": [
      "event.event_name.october meeting"
    ],
    "original_question": "List all the members who attended the event \"October Meeting\".",
    "question": "List all the members who attended the event \"Footbal game\".",
    "original_SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
    "changes_information": {
      "original_value": "Football game",
      "typo_deletion": "Footbal game"
    },
    "new_question_correct_value": "List all the members who attended the event \"Football game\"."
  },
  {
    "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Football game' AND T1.major_name = 'Interior Design'",
    "tables": [
      "member",
      "event",
      "major",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.link_to_major",
      "member.first_name",
      "attendance.link_to_member",
      "major.major_id",
      "major.major_name",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Football game",
        "condition": "="
      },
      {
        "table": "major",
        "column": "major_name",
        "value": "Interior Design",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
    "values_list": [
      "event.event_name.community theater",
      "major.major_name.interior design"
    ],
    "original_question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "question": "Among the students majored in interior design, who have attended the Footbal game event?",
    "original_SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "changes_information": {
      "original_value": "Football game",
      "typo_deletion": "Footbal game"
    },
    "new_question_correct_value": "Among the students majored in interior design, who have attended the Football game event?"
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Rite de duplication'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Rite de duplication",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Rit de duplication\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Rite de duplication",
      "typo_deletion": "Rit de duplication"
    },
    "new_question_correct_value": "Which foreign language used by \"Rite de duplication\"?"
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Anel Rodriguez?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Angel Rodriguez?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.heading_accuracy",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "values_list": [
      "player.player_name.francois affolter"
    ],
    "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "question": "What is the football player Anel Rodriguez header's finishing rate on 18/09/2014?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "What is the football player Angel Rodriguez header's finishing rate on 18/09/2014?"
  },
  {
    "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez' AND strftime('%Y', t2.date) = '2011'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "values_list": [
      "player.player_name.gabriel tamas"
    ],
    "original_question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "question": "What is the overall rating of the football player Anel Rodriguez in year 2011?",
    "original_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "What is the overall rating of the football player Angel Rodriguez in year 2011?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Anel Rodriguez\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Angel Rodriguez\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Anel Rodriguez's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "What is Angel Rodriguez's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Anel Rodriguez?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "What's the heading accuracy of Angel Rodriguez?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Angel Rodriguez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Anel Rodriguez?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "Which foot is preferred by Angel Rodriguez?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Angel Rodriguez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
    "values_list": [
      "player.player_name.francesco parravicini"
    ],
    "original_question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "question": "What was the potiential for Anel Rodriguez on 2010/8/30?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "What was the potiential for Angel Rodriguez on 2010/8/30?"
  },
  {
    "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Angel Rodriguez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.defensive_work_rate",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
    "values_list": [
      "player.player_name.kevin berigaud"
    ],
    "original_question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
    "question": "Tell the defensive work rate for Anel Rodriguez on 2013/2/22.",
    "original_SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "Tell the defensive work rate for Angel Rodriguez on 2013/2/22."
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Angel Rodriguez' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Angel Rodriguez",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Anel Rodriguez have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Angel Rodriguez",
      "typo_deletion": "Anel Rodriguez"
    },
    "new_question_correct_value": "When was the first time did Angel Rodriguez have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Chi Squared Distribution Question'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posthistory.text",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posts.viewcount",
      "posts.lasteditoruserid"
    ],
    "values": [
      {
        "table": "posthistory",
        "column": "text",
        "value": "Chi Squared Distribution Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "values_list": [
      "posthistory.text.computer game datasets"
    ],
    "original_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "question": "Identify the total views on the post 'Ch Squared Distribution Question'. Name the user who posted it last time.",
    "original_SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "changes_information": {
      "original_value": "Chi Squared Distribution Question",
      "typo_deletion": "Ch Squared Distribution Question"
    },
    "new_question_correct_value": "Identify the total views on the post 'Chi Squared Distribution Question'. Name the user who posted it last time."
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Problem on interpretation of data'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Problem on interpretation of data",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Problem o interpretation of data\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Problem on interpretation of data",
      "typo_deletion": "Problem o interpretation of data"
    },
    "new_question_correct_value": "Who is the owner of the post \"Problem on interpretation of data\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Problem on interpretation of data'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Problem on interpretation of data",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Problem o interpretation of data\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Problem on interpretation of data",
      "typo_deletion": "Problem o interpretation of data"
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"Problem on interpretation of data\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Problem on interpretation of data'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Problem on interpretation of data",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Problem o interpretation of data\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Problem on interpretation of data",
      "typo_deletion": "Problem o interpretation of data"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Problem on interpretation of data\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Problem on interpretation of data'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Problem on interpretation of data",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Problem o interpretation of data' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Problem on interpretation of data",
      "typo_deletion": "Problem o interpretation of data"
    },
    "new_question_correct_value": "How many views did the post titled 'Problem on interpretation of data' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Problem on interpretation of data'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Problem on interpretation of data",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Problem o interpretation of data\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Problem on interpretation of data",
      "typo_deletion": "Problem o interpretation of data"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Problem on interpretation of data\"."
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Problem on interpretation of data' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Problem on interpretation of data",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Problem o interpretation of data' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Problem on interpretation of data",
      "typo_deletion": "Problem o interpretation of data"
    },
    "new_question_correct_value": "Provide the text of the latest 10 comments to the post with the title 'Problem on interpretation of data' and the display name of the user who left it."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Problem on interpretation of data'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Problem on interpretation of data",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Problem o interpretation of data'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Problem on interpretation of data",
      "typo_deletion": "Problem o interpretation of data"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Problem on interpretation of data'?"
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Problem on interpretation of data'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Problem on interpretation of data",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Problem o interpretation of data\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Problem on interpretation of data",
      "typo_deletion": "Problem o interpretation of data"
    },
    "new_question_correct_value": "What is the post ID and the comments commented in the post titled by \"Problem on interpretation of data\"?"
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Princeton' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "Princeton",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.princeton"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of Princton?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Princeton",
      "typo_deletion": "Princton"
    },
    "new_question_correct_value": "What is the most common type of grade span served in the city of Princeton?"
  },
  {
    "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.id",
      "sets.block",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "block",
        "value": "Commander",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Italian",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "sets.block.commander",
      "set_translations.language.italian"
    ],
    "original_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Commader block in alphabetical order.",
    "original_SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "changes_information": {
      "original_value": "Commander",
      "typo_deletion": "Commader"
    },
    "new_question_correct_value": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Commander block in alphabetical order."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Moses Magnum'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Moses Magnum",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Moses Magum?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Moses Magnum",
      "typo_deletion": "Moses Magum"
    },
    "new_question_correct_value": "What is the eyes colour of Moses Magnum?"
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Moses Magnum'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Moses Magnum",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Moses Magum.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Moses Magnum",
      "typo_deletion": "Moses Magum"
    },
    "new_question_correct_value": "Provide the hero name and race of Moses Magnum."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Moses Magnum'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Moses Magnum",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Moses Magum.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Moses Magnum",
      "typo_deletion": "Moses Magum"
    },
    "new_question_correct_value": "List the powers of Moses Magnum."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Moses Magnum'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Moses Magnum",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Moses Magum as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Moses Magnum",
      "typo_deletion": "Moses Magum"
    },
    "new_question_correct_value": "Provide the eye colour of the superhero who has Moses Magnum as their full name."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Moses Magnum'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Moses Magnum",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Moses Magum.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Moses Magnum",
      "typo_deletion": "Moses Magum"
    },
    "new_question_correct_value": "Name the superhero, otherwise known as Moses Magnum."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Breath' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Breath",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Breth'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Super Breath",
      "typo_deletion": "Super Breth"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Super Breath'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Breath'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Breath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Super Breth?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Super Breath",
      "typo_deletion": "Super Breth"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Super Breath?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Breath'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Breath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.super_breath"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Super Breth power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Super Breath",
      "typo_deletion": "Super Breth"
    },
    "new_question_correct_value": "List the name of superheroes with Super Breath power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Breath'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Breath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.super_breath"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Super Breth power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Super Breath",
      "typo_deletion": "Super Breth"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Super Breath power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Super Breath'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Breath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.super_breath"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Super Breth?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Super Breath",
      "typo_deletion": "Super Breth"
    },
    "new_question_correct_value": "What is the power ID of Super Breath?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Super Breath'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Breath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Super Breth.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Super Breath",
      "typo_deletion": "Super Breth"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Super Breath."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'discriminant'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "discriminant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.discriminant"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named discrimiant?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "discriminant",
      "typo_deletion": "discrimiant"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named discriminant?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user Sam Safron?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "Please list the titles of the posts owned by the user Sam Saffron?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by Sam Safron and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "What is the title of the post that is owned by Sam Saffron and has the highest popularity?"
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Sam Safron.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "Please list the names of the badges obtained by Sam Saffron."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Sam Safron\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "For the user whose display name is \"Sam Saffron\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Sam Safron' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "What is the badge name that user 'Sam Saffron' obtained?"
  },
  {
    "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
    "tables": [
      "users",
      "comments"
    ],
    "columns": [
      "comments.text",
      "users.id",
      "comments.userid",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
    "values_list": [
      "users.displayname.a lion"
    ],
    "original_question": "Write all comments made by user 'A Lion.'",
    "question": "Write all comments made by user 'Sam Safron.'",
    "original_SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "Write all comments made by user 'Sam Saffron.'"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by Sam Safron.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "List the title of posts which were edited by Sam Saffron."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Sam Safron\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "What is the name of badge that the user whose display name is \"Sam Saffron\" obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sam Saffron'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Sam Safron\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "State the name of badge that the user whose display name is \"Sam Saffron\" obtained."
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Sam Saffron'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by Sam Safron's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "What is the name of tags used by Sam Saffron's?"
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Sam Saffron' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by Sam Safron has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "Which post by Sam Saffron has the most answers count? State the post ID."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Sam Saffron' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by Sam Safron and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "Among posts by Sam Saffron and Noah Snyder, which one has higher popularity?"
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Sam Saffron' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by Sam Safron has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "Which post by Sam Saffron has the most views? Please give the id and title of this post."
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Sam Safron.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "Identify the latest badge awarded to the user with the display name Sam Saffron."
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Sam Safron' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'Sam Saffron' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Sam Saffron'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Sam Safron'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'Sam Saffron'?"
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Sam Saffron'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.sam_saffron"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Sam Safron' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "When did the user known as 'Sam Saffron' create his or her account?"
  },
  {
    "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sam Saffron'",
    "tables": [
      "users",
      "comments"
    ],
    "columns": [
      "comments.text",
      "users.id",
      "comments.userid",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Sam Saffron",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "List the comments commented by the user with a username of Harvey Motulsky.",
    "question": "List the comments commented by the user with a username of Sam Safron.",
    "original_SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
    "changes_information": {
      "original_value": "Sam Saffron",
      "typo_deletion": "Sam Safron"
    },
    "new_question_correct_value": "List the comments commented by the user with a username of Sam Saffron."
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Saint Moscow'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Saint Moscow",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in Saint Mscow obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "Saint Moscow",
      "typo_deletion": "Saint Mscow"
    },
    "new_question_correct_value": "List out the dates that users who are located in Saint Moscow obtained their badges?"
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Saint Moscow'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Saint Moscow",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in Saint Mscow obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "Saint Moscow",
      "typo_deletion": "Saint Mscow"
    },
    "new_question_correct_value": "List out the age of users who located in Saint Moscow obtained the badge?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'Saint Moscow'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Saint Moscow",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "values_list": [
      "users.location.north pole"
    ],
    "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "question": "Provide the badge names received in 2011 for the user whose location is in the Saint Mscow.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "changes_information": {
      "original_value": "Saint Moscow",
      "typo_deletion": "Saint Mscow"
    },
    "new_question_correct_value": "Provide the badge names received in 2011 for the user whose location is in the Saint Moscow."
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'South Palma'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "South Palma",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code of the address in the city Port Chelsea?",
    "question": "What is the zip code of the address in the city South Palama?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "South Palma",
      "typo_insertion": "South Palama"
    },
    "new_question_correct_value": "What is the zip code of the address in the city South Palma?"
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'South Palma'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "South Palma",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code for Port Chelsea?",
    "question": "What is the zip code for South Palama?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "South Palma",
      "typo_insertion": "South Palama"
    },
    "new_question_correct_value": "What is the zip code for South Palma?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Constituent' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Constituent",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.constituent"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Constitutent.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Constituent",
      "typo_insertion": "Constitutent"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Constituent.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Constituent'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Constituent",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.constituent"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Constitutent Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Constituent",
      "typo_insertion": "Constitutent"
    },
    "new_question_correct_value": "List all the name of users that obtained the Constituent Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Constituent'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Constituent",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.constituent"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Constitutent badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Constituent",
      "typo_insertion": "Constitutent"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Constituent badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Constituent' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Constituent",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.constituent"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Constitutent badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Constituent",
      "typo_insertion": "Constitutent"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Constituent badge?"
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Stephanie Mitchell'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Stephanie Mitchell",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Stephanine Mitchell.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Stephanie Mitchell",
      "typo_insertion": "Stephanine Mitchell"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Stephanie Mitchell."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Stephanie Mitchell'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Stephanie Mitchell",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Stephanine Mitchell cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Stephanie Mitchell",
      "typo_insertion": "Stephanine Mitchell"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Stephanie Mitchell cost in total?"
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Stephanie Mitchell'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Stephanie Mitchell",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Stephanine Mitchell created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Stephanie Mitchell",
      "typo_insertion": "Stephanine Mitchell"
    },
    "new_question_correct_value": "What kind of printing is on the card that Stephanie Mitchell created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Stephanie Mitchell' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Stephanie Mitchell",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Stephanine Mitchell? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Stephanie Mitchell",
      "typo_insertion": "Stephanine Mitchell"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Stephanie Mitchell? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Faceless Devourer'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Faceless Devourer",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Faceless Dervourer'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Faceless Devourer",
      "typo_insertion": "Faceless Dervourer"
    },
    "new_question_correct_value": "What is the keyword found on card 'Faceless Devourer'?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Faceless Devourer'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Faceless Devourer",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Faceless Dervourer\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Faceless Devourer",
      "typo_insertion": "Faceless Dervourer"
    },
    "new_question_correct_value": "What is the status of card \"Faceless Devourer\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Faceless Devourer'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Faceless Devourer",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Faceless Dervourer\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Faceless Devourer",
      "typo_insertion": "Faceless Dervourer"
    },
    "new_question_correct_value": "What is the type of card \"Faceless Devourer\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Faceless Devourer'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Faceless Devourer",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Faceless Dervourer\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Faceless Devourer",
      "typo_insertion": "Faceless Dervourer"
    },
    "new_question_correct_value": "What is the rule of playing card \"Faceless Devourer\"?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Faceless Devourer'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Faceless Devourer",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Faceless Dervourer\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Faceless Devourer",
      "typo_insertion": "Faceless Dervourer"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Faceless Devourer\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Faceless Devourer'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Faceless Devourer",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Faceless Dervourer\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Faceless Devourer",
      "typo_insertion": "Faceless Dervourer"
    },
    "new_question_correct_value": "Did the set of cards with \"Faceless Devourer\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Faceless Devourer'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Faceless Devourer",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.faceless_devourer"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Faceless Dervourer\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Faceless Devourer",
      "typo_insertion": "Faceless Dervourer"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Faceless Devourer\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Faceless Devourer' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Faceless Devourer",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Faceless Dervourer\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Faceless Devourer",
      "typo_insertion": "Faceless Dervourer"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Faceless Devourer\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Faceless Devourer' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Faceless Devourer",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Faceless Dervourer\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Faceless Devourer",
      "typo_insertion": "Faceless Dervourer"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Faceless Devourer\" is in it."
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Snow Sorcery'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Snow Sorcery",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Snow Sorycery and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Snow Sorcery",
      "typo_insertion": "Snow Sorycery"
    },
    "new_question_correct_value": "List down the name of cards with original types of Snow Sorcery and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Snow Sorcery' AND T2.format = 'vintage' AND T1.side IS NULL",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.side",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "type",
        "value": "Snow Sorcery",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "vintage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "values_list": [
      "cards.type.snow_sorcery",
      "legalities.format.vintage"
    ],
    "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "question": "For Snow Sorycery type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "changes_information": {
      "original_value": "Snow Sorcery",
      "typo_insertion": "Snow Sorycery"
    },
    "new_question_correct_value": "For Snow Sorcery type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Indianapolis Motor Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Indianapolois Motor Speedway be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Indianapolis Motor Speedway",
      "typo_insertion": "Indianapolois Motor Speedway"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Indianapolis Motor Speedway be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Indianapolis Motor Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Indianapolois Motor Speedway?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Indianapolis Motor Speedway",
      "typo_insertion": "Indianapolois Motor Speedway"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Indianapolis Motor Speedway?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Indianapolis Motor Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Indianapolois Motor Speedway.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Indianapolis Motor Speedway",
      "typo_insertion": "Indianapolois Motor Speedway"
    },
    "new_question_correct_value": "Please list the time of the races held on Indianapolis Motor Speedway."
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Indianapolis Motor Speedway'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Indianapolis Motor Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Indianapolois Motor Speedway?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Indianapolis Motor Speedway",
      "typo_insertion": "Indianapolois Motor Speedway"
    },
    "new_question_correct_value": "What's the location coordinates of Indianapolis Motor Speedway?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Indianapolis Motor Speedway'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Indianapolis Motor Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Indianapolois Motor Speedway?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Indianapolis Motor Speedway",
      "typo_insertion": "Indianapolois Motor Speedway"
    },
    "new_question_correct_value": "What's the reference name of Indianapolis Motor Speedway?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Indianapolis Motor Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Indianapolois Motor Speedway was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Indianapolis Motor Speedway",
      "typo_insertion": "Indianapolois Motor Speedway"
    },
    "new_question_correct_value": "Please list all the years that Indianapolis Motor Speedway was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Indianapolis Motor Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Indianapolis Motor Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Indianapolois Motor Speedway.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Indianapolis Motor Speedway",
      "typo_insertion": "Indianapolois Motor Speedway"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Indianapolis Motor Speedway."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Indianapolis Motor Speedway'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Indianapolis Motor Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.indianapolis_motor_speedway"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Indianapolois Motor Speedway circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Indianapolis Motor Speedway",
      "typo_insertion": "Indianapolois Motor Speedway"
    },
    "new_question_correct_value": "In which location does the Indianapolis Motor Speedway circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Mandarin Chinese' AND T1.Continent  =  \"Asia\"",
    "tables": [
      "city",
      "countrylanguage",
      "country"
    ],
    "columns": [
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "city.countrycode",
      "country.continent",
      "country.code",
      "countrylanguage.language",
      "city.name"
    ],
    "values": [
      {
        "table": "countrylanguage",
        "column": "isofficial",
        "value": "T",
        "condition": "="
      },
      {
        "table": "countrylanguage",
        "column": "language",
        "value": "Mandarin Chinese",
        "condition": "="
      }
    ],
    "db_id": "world_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "countrylanguage.isofficial.t",
      "countrylanguage.language.mandarin_chinese"
    ],
    "original_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "question": "Return the different names of cities that are in Asia and for which Mandarin Chineese is the official language.",
    "original_SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "changes_information": {
      "original_value": "Mandarin Chinese",
      "typo_insertion": "Mandarin Chineese"
    },
    "new_question_correct_value": "Return the different names of cities that are in Asia and for which Mandarin Chinese is the official language."
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Remover a Alma'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Remover a Alma",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Remover a Alama\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Remover a Alma",
      "typo_insertion": "Remover a Alama"
    },
    "new_question_correct_value": "Which foreign language used by \"Remover a Alma\"?"
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Claudio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Claudrio?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Claudio",
      "typo_insertion": "Claudrio"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Claudio?"
  },
  {
    "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio' AND strftime('%Y', t2.date) = '2011'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Claudio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "values_list": [
      "player.player_name.gabriel tamas"
    ],
    "original_question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "question": "What is the overall rating of the football player Claudrio in year 2011?",
    "original_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "changes_information": {
      "original_value": "Claudio",
      "typo_insertion": "Claudrio"
    },
    "new_question_correct_value": "What is the overall rating of the football player Claudio in year 2011?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Claudio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Claudrio\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Claudio",
      "typo_insertion": "Claudrio"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Claudio\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Claudio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Claudrio's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Claudio",
      "typo_insertion": "Claudrio"
    },
    "new_question_correct_value": "What is Claudio's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Claudio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Claudrio?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Claudio",
      "typo_insertion": "Claudrio"
    },
    "new_question_correct_value": "What's the heading accuracy of Claudio?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Claudio'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Claudio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Claudrio?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Claudio",
      "typo_insertion": "Claudrio"
    },
    "new_question_correct_value": "Which foot is preferred by Claudio?"
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Claudio' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Claudio",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Claudrio have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Claudio",
      "typo_insertion": "Claudrio"
    },
    "new_question_correct_value": "When was the first time did Claudio have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'The Leopard'",
    "tables": [
      "program",
      "director"
    ],
    "columns": [
      "program.title",
      "program.director_id",
      "director.director_id",
      "director.name"
    ],
    "values": [
      {
        "table": "program",
        "column": "title",
        "value": "The Leopard",
        "condition": "="
      }
    ],
    "db_id": "bbc_channels",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "program.title.the_leopard"
    ],
    "original_question": "What is the name of the director who is in the \"Dracula\" program?",
    "question": "What is the name of the director who is in the \"Them Leopaard\" program?",
    "original_SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "changes_information": {
      "original_value": "The Leopard",
      "typo_insertion": "Them Leopaard"
    },
    "new_question_correct_value": "What is the name of the director who is in the \"The Leopard\" program?"
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Stephanie'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Stephanie",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.stephanie"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Stephanine. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Stephanie",
      "typo_insertion": "Stephanine"
    },
    "new_question_correct_value": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Stephanie. List the district code of the school."
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Lafayette' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "Lafayette",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.lafayette"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of Layfayette?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Lafayette",
      "typo_insertion": "Layfayette"
    },
    "new_question_correct_value": "What is the most common type of grade span served in the city of Lafayette?"
  },
  {
    "SQL": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'El Segundo Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "schools.phone",
      "satscores.avgscrread",
      "schools.district",
      "schools.cdscode",
      "satscores.cds"
    ],
    "values": [
      {
        "table": "schools",
        "column": "district",
        "value": "El Segundo Unified",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Fresno Unified is a name of district;",
    "values_list": [
      "schools.district.fresno unified"
    ],
    "original_question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "question": "What is the telephone number for the school with the lowest average score in reading in El Seguondo Unified?",
    "original_SQL": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "changes_information": {
      "original_value": "El Segundo Unified",
      "typo_insertion": "El Seguondo Unified"
    },
    "new_question_correct_value": "What is the telephone number for the school with the lowest average score in reading in El Segundo Unified?"
  },
  {
    "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lake Forest'",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "schools.cdscode",
      "schools.mailcity",
      "satscores.numtsttakr",
      "satscores.cds"
    ],
    "values": [
      {
        "table": "schools",
        "column": "mailcity",
        "value": "Lake Forest",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.mailcity.lake_forest"
    ],
    "original_question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "question": "How many test takers are there at the school/s whose mailing city address is in Lake Foreest?",
    "original_SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "changes_information": {
      "original_value": "Lake Forest",
      "typo_insertion": "Lake Foreest"
    },
    "new_question_correct_value": "How many test takers are there at the school/s whose mailing city address is in Lake Forest?"
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Mick Rory'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Mick Rory",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Mick Rorry?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Mick Rory",
      "typo_insertion": "Mick Rorry"
    },
    "new_question_correct_value": "What is the eyes colour of Mick Rory?"
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Mick Rory'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Mick Rory",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Mick Rorry.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Mick Rory",
      "typo_insertion": "Mick Rorry"
    },
    "new_question_correct_value": "Provide the hero name and race of Mick Rory."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Mick Rory'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Mick Rory",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Mick Rorry.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Mick Rory",
      "typo_insertion": "Mick Rorry"
    },
    "new_question_correct_value": "List the powers of Mick Rory."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Mick Rory'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Mick Rory",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Mick Rorry as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Mick Rory",
      "typo_insertion": "Mick Rorry"
    },
    "new_question_correct_value": "Provide the eye colour of the superhero who has Mick Rory as their full name."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Mick Rory'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Mick Rory",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Mick Rorry as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Mick Rory",
      "typo_insertion": "Mick Rorry"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Mick Rory as their full name?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Mick Rory'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Mick Rory",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Mick Rorry.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Mick Rory",
      "typo_insertion": "Mick Rorry"
    },
    "new_question_correct_value": "Name the superhero, otherwise known as Mick Rory."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "Please list all the superpowers of 3-D Man.",
    "question": "Please list all the superpowers of Trition.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "Please list all the superpowers of Triton."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of Trition's skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "What is the colour of Triton's skin?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "Who is the publisher of Sauron?",
    "question": "Who is the publisher of Trition?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "Who is the publisher of Triton?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of Trition?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "What is the publisher's name of Triton?"
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is Trition's race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "What is Triton's race?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "Provide the superpowers of the superhero called Deathlok.",
    "question": "Provide the superpowers of the superhero called Trition.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "Provide the superpowers of the superhero called Triton."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero Trition.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "Indicate the attribute value of superhero Triton."
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero Trition belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "Which group does superhero Triton belong to?"
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of Trition hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "What is the gender of Triton hero?"
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of Trition?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "What are the race and alignment of Triton?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "What is Abomination's superpower?",
    "question": "What is Trition's superpower?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "What is Triton's superpower?"
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of Trition's attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "State all of Triton's attributes along with their values."
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named Trition.",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "Give the alignment and superpowers of the superhero named Triton."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down Trition's superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "List down Triton's superpowers."
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Triton' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the Trition.",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "Identify the weakest attribute of the Triton."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "What is Abomination's eye colour?",
    "question": "What is Trition's eye colour?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "What is Triton's eye colour?"
  },
  {
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Triton'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "Provide the full name of the superhero named Alien.",
    "question": "Provide the full name of the superhero named Trition.",
    "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "Provide the full name of the superhero named Triton."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named Trition.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "List the attribute value of the superhero named Triton."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Triton'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Triton",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.triton"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of Trition.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "Triton",
      "typo_insertion": "Trition"
    },
    "new_question_correct_value": "Give the eye colour of Triton."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'truncation'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "truncation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.truncation"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named trunctation?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "truncation",
      "typo_insertion": "trunctation"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named truncation?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user Anthonny?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "Please list the titles of the posts owned by the user Anthony?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Anthony' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by Anthonny and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "What is the title of the post that is owned by Anthony and has the highest popularity?"
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Anthonny.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "Please list the names of the badges obtained by Anthony."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Anthonny\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "For the user whose display name is \"Anthony\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Anthonny' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "What is the badge name that user 'Anthony' obtained?"
  },
  {
    "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
    "tables": [
      "users",
      "comments"
    ],
    "columns": [
      "comments.text",
      "users.id",
      "comments.userid",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
    "values_list": [
      "users.displayname.a lion"
    ],
    "original_question": "Write all comments made by user 'A Lion.'",
    "question": "Write all comments made by user 'Anthonny.'",
    "original_SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "Write all comments made by user 'Anthony.'"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by Anthonny.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "List the title of posts which were edited by Anthony."
  },
  {
    "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Anthony' GROUP BY T2.WebsiteUrl",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.score",
      "users.websiteurl",
      "users.id",
      "users.displayname",
      "posts.lasteditoruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
    "question": "What is the total score of the posts edited by Anthonny and include the user's website URL.",
    "original_SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "What is the total score of the posts edited by Anthony and include the user's website URL."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Anthonny\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "What is the name of badge that the user whose display name is \"Anthony\" obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Anthonny\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "State the name of badge that the user whose display name is \"Anthony\" obtained."
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Anthony'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by Anthonny's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "What is the name of tags used by Anthony's?"
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Anthony' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by Anthonny has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "Which post by Anthony has the most answers count? State the post ID."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Anthony' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by Anthonny and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "Among posts by Anthony and Noah Snyder, which one has higher popularity?"
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Anthony' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by Anthonny has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "Which post by Anthony has the most views? Please give the id and title of this post."
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Anthony' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Anthonny.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "Identify the latest badge awarded to the user with the display name Anthony."
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Anthonny' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'Anthony' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Anthony'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Anthonny'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'Anthony'?"
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Anthony'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Anthonny' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "When did the user known as 'Anthony' create his or her account?"
  },
  {
    "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Anthony'",
    "tables": [
      "users",
      "comments"
    ],
    "columns": [
      "comments.text",
      "users.id",
      "comments.userid",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "List the comments commented by the user with a username of Harvey Motulsky.",
    "question": "List the comments commented by the user with a username of Anthonny.",
    "original_SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    },
    "new_question_correct_value": "List the comments commented by the user with a username of Anthony."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Autobiographer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.autobiographer"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Auto biographer.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Autobiographer",
      "typo_space_addition": "Auto biographer"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Autobiographer.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Autobiographer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.autobiographer"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Auto biographer Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Autobiographer",
      "typo_space_addition": "Auto biographer"
    },
    "new_question_correct_value": "List all the name of users that obtained the Autobiographer Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Autobiographer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.autobiographer"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Auto biographer badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Autobiographer",
      "typo_space_addition": "Auto biographer"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Autobiographer badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Autobiographer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.autobiographer"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Auto biographer badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Autobiographer",
      "typo_space_addition": "Auto biographer"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Autobiographer badge?"
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Parking' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Parking' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Parking",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.parking",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Park ing\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Parking",
      "typo_space_addition": "Park ing"
    },
    "new_question_correct_value": "With the biggest budget for the \"Parking\", what was the remaining of it?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Parking' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Parking",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.parking"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Park ing.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Parking",
      "typo_space_addition": "Park ing"
    },
    "new_question_correct_value": "Name the event with the highest amount spent on Parking."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.category",
      "budget.link_to_event",
      "budget.budget_id",
      "expense.link_to_budget",
      "event.event_id"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Parking",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "values_list": [
      "budget.category.parking"
    ],
    "original_question": "List the name of events with less than average parking cost.",
    "question": "List the name of events with less than average Park ing cost.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "changes_information": {
      "original_value": "Parking",
      "typo_space_addition": "Park ing"
    },
    "new_question_correct_value": "List the name of events with less than average Parking cost."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Parking'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Parking",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.parking"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Park ing.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Parking",
      "typo_space_addition": "Park ing"
    },
    "new_question_correct_value": "List the event names which were budgeted for the Parking."
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Parking' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Parking",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Park ing and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Parking",
      "typo_space_addition": "Park ing"
    },
    "new_question_correct_value": "Calculate the total amount spent on Parking and list the name of the event they were spent on."
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'plymouth' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "plymouth",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.plymouth"
    ],
    "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "question": "For model ply mouth, how many cylinders does the car with the least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "plymouth",
      "typo_space_addition": "ply mouth"
    },
    "new_question_correct_value": "For model plymouth, how many cylinders does the car with the least accelerate have?"
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'plymouth' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "plymouth",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.plymouth"
    ],
    "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "question": "For a ply mouth model, how many cylinders does the version with least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "plymouth",
      "typo_space_addition": "ply mouth"
    },
    "new_question_correct_value": "For a plymouth model, how many cylinders does the version with least accelerate have?"
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Chippy'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Chip py.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Chippy",
      "typo_space_addition": "Chip py"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Chippy."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Chippy'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Chip py cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Chippy",
      "typo_space_addition": "Chip py"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Chippy cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Chippy' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Chip py artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Chippy",
      "typo_space_addition": "Chip py"
    },
    "new_question_correct_value": "Is there any card from Chippy artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Chippy'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Chip py created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Chippy",
      "typo_space_addition": "Chip py"
    },
    "new_question_correct_value": "What kind of printing is on the card that Chippy created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Chippy' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Chip py? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Chippy",
      "typo_space_addition": "Chip py"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Chippy? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Chippy'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Chip py worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Chippy",
      "typo_space_addition": "Chip py"
    },
    "new_question_correct_value": "List all the frame styles and cards Chippy worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT id FROM cards WHERE frameEffects = 'devoid' GROUP BY id",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.id",
      "cards.frameeffects"
    ],
    "values": [
      {
        "table": "cards",
        "column": "frameeffects",
        "value": "devoid",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
    "values_list": [
      "cards.frameeffects.devoid"
    ],
    "original_question": "How many cards have frame effect as extendedart? List out the id of those cards.",
    "question": "How many cards have frame effect as de void? List out the id of those cards.",
    "original_SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
    "changes_information": {
      "original_value": "devoid",
      "typo_space_addition": "de void"
    },
    "new_question_correct_value": "How many cards have frame effect as devoid? List out the id of those cards."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Menace'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Menace",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.menace"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Men ace?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Menace",
      "typo_space_addition": "Men ace"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Menace?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Discombobulate'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Discombobulate",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Discom bobulate'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Discombobulate",
      "typo_space_addition": "Discom bobulate"
    },
    "new_question_correct_value": "What is the keyword found on card 'Discombobulate'?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Discombobulate'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Discombobulate",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Discom bobulate\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Discombobulate",
      "typo_space_addition": "Discom bobulate"
    },
    "new_question_correct_value": "What is the status of card \"Discombobulate\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Discombobulate'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Discombobulate",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Discom bobulate\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Discombobulate",
      "typo_space_addition": "Discom bobulate"
    },
    "new_question_correct_value": "What is the type of card \"Discombobulate\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Discombobulate'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Discombobulate",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Discom bobulate\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Discombobulate",
      "typo_space_addition": "Discom bobulate"
    },
    "new_question_correct_value": "What is the rule of playing card \"Discombobulate\"?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Discombobulate'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Discombobulate",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Discom bobulate\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Discombobulate",
      "typo_space_addition": "Discom bobulate"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Discombobulate\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Discombobulate'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Discombobulate",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Discom bobulate\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Discombobulate",
      "typo_space_addition": "Discom bobulate"
    },
    "new_question_correct_value": "Did the set of cards with \"Discombobulate\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Discombobulate'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Discombobulate",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.discombobulate"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Discom bobulate\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Discombobulate",
      "typo_space_addition": "Discom bobulate"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Discombobulate\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Discombobulate' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Discombobulate",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Discom bobulate\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Discombobulate",
      "typo_space_addition": "Discom bobulate"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Discombobulate\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Discombobulate' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Discombobulate",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Discom bobulate\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Discombobulate",
      "typo_space_addition": "Discom bobulate"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Discombobulate\" is in it."
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Sorcery",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Sor cerry and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Sorcery",
      "typo_space_addition": "Sor cerry"
    },
    "new_question_correct_value": "List down the name of cards with original types of Sorcery and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Sorcery",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.sorcery",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the Sor cerry cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Sorcery",
      "typo_space_addition": "Sor cerry"
    },
    "new_question_correct_value": "Among the Sorcery cards, which are black color and comes with foreign languague translation?"
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'prerelease'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "prerelease",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.prerelease"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"pre release\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "prerelease",
      "typo_space_addition": "pre release"
    },
    "new_question_correct_value": "Please list the websites where I can purchase the cards that have the promotional type of \"prerelease\"."
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Indianapolis'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Indianapolis",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.indianapolis"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in Indiana polis.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Indianapolis",
      "typo_space_addition": "Indiana polis"
    },
    "new_question_correct_value": "Please list the year during which the race is held on circuits in Indianapolis."
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Eloise'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Eloise",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.eloise"
    ],
    "original_question": "Show agency details for client with detail 'Mac'.",
    "question": "Show agency details for client with detail 'Eloi se'.",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Eloise",
      "typo_space_addition": "Eloi se"
    },
    "new_question_correct_value": "Show agency details for client with detail 'Eloise'."
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Eloise'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Eloise",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.eloise"
    ],
    "original_question": "What are the agency details for clients with the detail Mac?",
    "question": "What are the agency details for clients with the detail Eloi se?",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Eloise",
      "typo_space_addition": "Eloi se"
    },
    "new_question_correct_value": "What are the agency details for clients with the detail Eloise?"
  },
  {
    "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Footwork'",
    "tables": [
      "constructors",
      "constructorstandings"
    ],
    "columns": [
      "constructorstandings.constructorid",
      "constructors.name",
      "constructorstandings.position",
      "constructors.constructorid"
    ],
    "values": [
      {
        "table": "constructors",
        "column": "name",
        "value": "Footwork",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Renault is a name of constructor;",
    "values_list": [
      "constructors.name.footwork"
    ],
    "original_question": "Please list the positions of the circuits built by the constructor Renault.",
    "question": "Please list the positions of the circuits built by the constructor Foot work.",
    "original_SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "changes_information": {
      "original_value": "Footwork",
      "typo_space_addition": "Foot work"
    },
    "new_question_correct_value": "Please list the positions of the circuits built by the constructor Footwork."
  },
  {
    "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Scotland'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "country.id",
      "league.country_id",
      "league.name"
    ],
    "values": [
      {
        "table": "country",
        "column": "name",
        "value": "Scotland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "name of the football league refers to League.name;",
    "values_list": [
      "country.name.scotland"
    ],
    "original_question": "What is the name of the football league in the country of Netherlands?",
    "question": "What is the name of the football league in the country of Scot land?",
    "original_SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
    "changes_information": {
      "original_value": "Scotland",
      "typo_space_addition": "Scot land"
    },
    "new_question_correct_value": "What is the name of the football league in the country of Scotland?"
  },
  {
    "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Scotland'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "country.id",
      "league.country_id",
      "league.name"
    ],
    "values": [
      {
        "table": "country",
        "column": "name",
        "value": "Scotland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Germany refers to Country.name = 'Germany';",
    "values_list": [
      "country.name.scotland"
    ],
    "original_question": "Please list the leagues from Germany.",
    "question": "Please list the leagues from Scot land.",
    "original_SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
    "changes_information": {
      "original_value": "Scotland",
      "typo_space_addition": "Scot land"
    },
    "new_question_correct_value": "Please list the leagues from Scotland."
  },
  {
    "SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Scotland'",
    "tables": [
      "match",
      "player",
      "country"
    ],
    "columns": [
      "player.player_name",
      "match.home_player_1",
      "country.name",
      "country.id",
      "match.country_id",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "country",
        "column": "name",
        "value": "Scotland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "name of players refers to player_name; Belgium is name of country",
    "values_list": [
      "country.name.scotland"
    ],
    "original_question": "State the name of players who came from Belgium.",
    "question": "State the name of players who came from Scot land.",
    "original_SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
    "changes_information": {
      "original_value": "Scotland",
      "typo_space_addition": "Scot land"
    },
    "new_question_correct_value": "State the name of players who came from Scotland."
  },
  {
    "SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Azerbaijani' AND T1.Continent  =  \"Asia\"",
    "tables": [
      "city",
      "countrylanguage",
      "country"
    ],
    "columns": [
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "city.countrycode",
      "country.continent",
      "country.code",
      "countrylanguage.language",
      "city.name"
    ],
    "values": [
      {
        "table": "countrylanguage",
        "column": "isofficial",
        "value": "T",
        "condition": "="
      },
      {
        "table": "countrylanguage",
        "column": "language",
        "value": "Azerbaijani",
        "condition": "="
      }
    ],
    "db_id": "world_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "countrylanguage.isofficial.t",
      "countrylanguage.language.azerbaijani"
    ],
    "original_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "question": "Return the different names of cities that are in Asia and for which Azer baijani is the official language.",
    "original_SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "changes_information": {
      "original_value": "Azerbaijani",
      "typo_space_addition": "Azer baijani"
    },
    "new_question_correct_value": "Return the different names of cities that are in Asia and for which Azerbaijani is the official language."
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Photosensitivities' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Photosensitivities",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.photosensitivities"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with Photo sensitivities disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Photosensitivities",
      "typo_space_addition": "Photo sensitivities"
    },
    "new_question_correct_value": "What is the most common sign of patients with Photosensitivities disease?"
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "How is the feature rooftop described?",
    "question": "How is the feature roof top described?",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "typo_space_addition": "roof top"
    },
    "new_question_correct_value": "How is the feature rooftop described?"
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "Return the description of the feature 'rooftop'.",
    "question": "Return the description of the feature 'roof top'.",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "typo_space_addition": "roof top"
    },
    "new_question_correct_value": "Return the description of the feature 'rooftop'."
  },
  {
    "SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'rooftop';",
    "tables": [
      "property_features",
      "properties",
      "features",
      "addresses"
    ],
    "columns": [
      "features.feature_id",
      "addresses.address_id",
      "features.feature_name",
      "property_features.feature_id",
      "addresses.town_city",
      "property_features.property_id",
      "properties.property_address_id",
      "properties.property_id"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.swimming pool"
    ],
    "original_question": "In which cities are there any properties equipped with a swimming pool?",
    "question": "In which cities are there any properties equipped with a roof top?",
    "original_SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
    "changes_information": {
      "original_value": "rooftop",
      "typo_space_addition": "roof top"
    },
    "new_question_correct_value": "In which cities are there any properties equipped with a rooftop?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Hebrew'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Hebrew",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.hebrew"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in He brew.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Hebrew",
      "typo_space_addition": "He brew"
    },
    "new_question_correct_value": "Name all the cards which have alternative language in Hebrew."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Hebrew'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Hebrew",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Phyrexian' is the language; name of artists refers to artist;",
    "values_list": [
      "foreign_data.language.hebrew"
    ],
    "original_question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "question": "Please provide the names of the artists who illustrated the card art in He brew.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "changes_information": {
      "original_value": "Hebrew",
      "typo_space_addition": "He brew"
    },
    "new_question_correct_value": "Please provide the names of the artists who illustrated the card art in Hebrew."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Hebrew'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Hebrew",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in He brew.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "Hebrew",
      "typo_space_addition": "He brew"
    },
    "new_question_correct_value": "List down the name of artists for cards in Hebrew."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Hebrew'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Hebrew",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.hebrew"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and He brew language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Hebrew",
      "typo_space_addition": "He brew"
    },
    "new_question_correct_value": "What are the cards that only available in paper and Hebrew language?"
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Hebrew' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Hebrew'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Hebrew",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.hebrew",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in He brew. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Hebrew",
      "typo_space_addition": "He brew"
    },
    "new_question_correct_value": "Calculate the percentage of cards in Hebrew. List them by name."
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Solfatara'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Solfatara",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Solfa tara\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Solfatara",
      "typo_space_addition": "Solfa tara"
    },
    "new_question_correct_value": "Which foreign language used by \"Solfatara\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'premodern' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "premodern",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "values_list": [
      "cards.rarity.mythic",
      "legalities.format.premodern",
      "legalities.status.banned"
    ],
    "original_question": "List all the mythic rarity print cards banned in gladiator format.",
    "question": "List all the mythic rarity print cards banned in pre modern format.",
    "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "changes_information": {
      "original_value": "premodern",
      "typo_space_addition": "pre modern"
    },
    "new_question_correct_value": "List all the mythic rarity print cards banned in premodern format."
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'premodern' AND T1.side IS NULL",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.side",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "type",
        "value": "Artifact",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "premodern",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "values_list": [
      "cards.type.artifact",
      "legalities.format.premodern"
    ],
    "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for pre modern play format.",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "changes_information": {
      "original_value": "premodern",
      "typo_space_addition": "pre modern"
    },
    "new_question_correct_value": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for premodern play format."
  },
  {
    "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern'",
    "tables": [
      "cards",
      "legalities",
      "foreign_data"
    ],
    "columns": [
      "legalities.format",
      "foreign_data.uuid",
      "legalities.uuid",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "format",
        "value": "premodern",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
    "values_list": [
      "legalities.format.premodern"
    ],
    "original_question": "List down the uuid for legacy cards and the foreign language of these cards.",
    "question": "List down the uuid for pre modern cards and the foreign language of these cards.",
    "original_SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
    "changes_information": {
      "original_value": "premodern",
      "typo_space_addition": "pre modern"
    },
    "new_question_correct_value": "List down the uuid for premodern cards and the foreign language of these cards."
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'premodern'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "legalities.status",
      "cards.frameversion",
      "cards.hascontentwarning",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "format",
        "value": "premodern",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "D. Alexander Gregory",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "frameversion",
        "value": "1997",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "hascontentwarning",
        "value": "1",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status",
    "values_list": [
      "legalities.format.premodern",
      "cards.artist.d. alexander gregory",
      "cards.frameversion.1997",
      "cards.hascontentwarning.1"
    ],
    "original_question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?",
    "question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in pre modern play format that has sensitive content or Wizards of the Coast?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'",
    "changes_information": {
      "original_value": "premodern",
      "typo_space_addition": "pre modern"
    },
    "new_question_correct_value": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in premodern play format that has sensitive content or Wizards of the Coast?"
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Kaohsiung' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Kaohsiung",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "question": "What are the country code and first name of the players who won in both tourney Kaoh siung and Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "Kaohsiung",
      "typo_space_addition": "Kaoh siung"
    },
    "new_question_correct_value": "What are the country code and first name of the players who won in both tourney Kaohsiung and Australian Open?"
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Kaohsiung' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Kaohsiung",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "question": "What are the first names and country codes for players who won both the Kaoh siung and the Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "Kaohsiung",
      "typo_space_addition": "Kaoh siung"
    },
    "new_question_correct_value": "What are the first names and country codes for players who won both the Kaohsiung and the Australian Open?"
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Kaohsiung' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Kaohsiung",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the Kaoh siung tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kaohsiung",
      "typo_space_addition": "Kaoh siung"
    },
    "new_question_correct_value": "Find the name of the winner who has the highest rank points and participated in the Kaohsiung tourney."
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Kaohsiung' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Kaohsiung",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the Kaoh siung tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kaohsiung",
      "typo_space_addition": "Kaoh siung"
    },
    "new_question_correct_value": "What is the name of the winner with the most rank points who participated in the Kaohsiung tournament?"
  },
  {
    "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Inactive'",
    "tables": [
      "member",
      "income"
    ],
    "columns": [
      "income.link_to_member",
      "member.member_id",
      "member.position",
      "income.amount"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Inactive",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "What is the amount of the funds that the Vice President received?",
    "question": "What is the amount of the funds that the In active received?",
    "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Inactive",
      "typo_space_addition": "In active"
    },
    "new_question_correct_value": "What is the amount of the funds that the Inactive received?"
  },
  {
    "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Inactive'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Inactive",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the major name for the Vice President of the club.",
    "question": "State the major name for the In active of the club.",
    "original_SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Inactive",
      "typo_space_addition": "In active"
    },
    "new_question_correct_value": "State the major name for the Inactive of the club."
  },
  {
    "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Inactive'",
    "tables": [
      "member"
    ],
    "columns": [
      "member.email",
      "member.first_name",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Inactive",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
    "values_list": [
      "member.position.inactive"
    ],
    "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
    "question": "Provide the full name and email address of the Student_Club's In active.",
    "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "changes_information": {
      "original_value": "Inactive",
      "typo_space_addition": "In active"
    },
    "new_question_correct_value": "Provide the full name and email address of the Student_Club's Inactive."
  },
  {
    "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Inactive'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Inactive",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the name of major that Vice President has joined.",
    "question": "State the name of major that In active has joined.",
    "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "changes_information": {
      "original_value": "Inactive",
      "typo_space_addition": "In active"
    },
    "new_question_correct_value": "State the name of major that Inactive has joined."
  },
  {
    "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Inactive' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "event.type",
      "attendance.link_to_member",
      "member.position",
      "event.event_id",
      "event.location"
    ],
    "values": [
      {
        "table": "event",
        "column": "type",
        "value": "Social",
        "condition": "="
      },
      {
        "table": "member",
        "column": "position",
        "value": "Inactive",
        "condition": "="
      },
      {
        "table": "event",
        "column": "location",
        "value": "900 E. Washington St.",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
    "values_list": [
      "event.type.social",
      "member.position.vice president",
      "event.location.900 e. washington st."
    ],
    "original_question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "question": "What is the name of the social event that was attended by the In active of the Student_Club located at 900 E. Washington St.?",
    "original_SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "changes_information": {
      "original_value": "Inactive",
      "typo_space_addition": "In active"
    },
    "new_question_correct_value": "What is the name of the social event that was attended by the Inactive of the Student_Club located at 900 E. Washington St.?"
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Inactive'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.major_id",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Inactive",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last name",
    "values_list": [
      "member.position.inactive"
    ],
    "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "question": "Write the full name of the club member with the position of 'In active' and list which college the club member belongs to.",
    "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "changes_information": {
      "original_value": "Inactive",
      "typo_space_addition": "In active"
    },
    "new_question_correct_value": "Write the full name of the club member with the position of 'Inactive' and list which college the club member belongs to."
  },
  {
    "SQL": "select other_details from paragraphs where paragraph_text like 'Jersey'",
    "tables": [
      "paragraphs"
    ],
    "columns": [
      "paragraphs.other_details",
      "paragraphs.paragraph_text"
    ],
    "values": [
      {
        "table": "paragraphs",
        "column": "paragraph_text",
        "value": "Jersey",
        "condition": "LIKE"
      }
    ],
    "db_id": "cre_Doc_Template_Mgt",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "paragraphs.paragraph_text.jersey"
    ],
    "original_question": "Show paragraph details for paragraph with text 'Korea ' .",
    "question": "Show paragraph details for paragraph with text 'Jer sey ' .",
    "original_SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
    "changes_information": {
      "original_value": "Jersey",
      "typo_space_addition": "Jer sey"
    },
    "new_question_correct_value": "Show paragraph details for paragraph with text 'Jersey ' ."
  },
  {
    "SQL": "select other_details from paragraphs where paragraph_text like 'Jersey'",
    "tables": [
      "paragraphs"
    ],
    "columns": [
      "paragraphs.other_details",
      "paragraphs.paragraph_text"
    ],
    "values": [
      {
        "table": "paragraphs",
        "column": "paragraph_text",
        "value": "Jersey",
        "condition": "LIKE"
      }
    ],
    "db_id": "cre_Doc_Template_Mgt",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "paragraphs.paragraph_text.jersey"
    ],
    "original_question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "question": "What are the details for the paragraph that includes the text 'Jer sey ' ?",
    "original_SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
    "changes_information": {
      "original_value": "Jersey",
      "typo_space_addition": "Jer sey"
    },
    "new_question_correct_value": "What are the details for the paragraph that includes the text 'Jersey ' ?"
  },
  {
    "SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
    "tables": [
      "participants",
      "performance_score"
    ],
    "columns": [
      "performance_score.stage_presence",
      "performance_score.voice_sound_quality",
      "performance_score.rhythm_tempo",
      "participants.id",
      "performance_score.participant_id",
      "participants.name"
    ],
    "values": [
      {
        "table": "participants",
        "column": "name",
        "value": "Freeway",
        "condition": "="
      }
    ],
    "db_id": "sing_contest",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "participants.name.freeway"
    ],
    "original_question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Free way'?",
    "original_SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
    "changes_information": {
      "original_value": "Freeway",
      "typo_space_addition": "Free way"
    },
    "new_question_correct_value": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?"
  },
  {
    "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'arthralgia' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "tables": [
      "patient"
    ],
    "columns": [
      "patient.first date",
      "patient.diagnosis",
      "patient.sex"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "arthralgia",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
    "values_list": [
      "patient.diagnosis.arthralgia"
    ],
    "original_question": "What was the gender of the first AORTITIS diagnosed patient?",
    "question": "What was the gender of the first arthr algia diagnosed patient?",
    "original_SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "changes_information": {
      "original_value": "arthralgia",
      "typo_space_addition": "arthr algia"
    },
    "new_question_correct_value": "What was the gender of the first arthralgia diagnosed patient?"
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Joaquin",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Joa quin?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Joaquin",
      "typo_space_addition": "Joa quin"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Joaquin?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.heading_accuracy",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Joaquin",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "values_list": [
      "player.player_name.francois affolter"
    ],
    "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "question": "What is the football player Joa quin header's finishing rate on 18/09/2014?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "changes_information": {
      "original_value": "Joaquin",
      "typo_space_addition": "Joa quin"
    },
    "new_question_correct_value": "What is the football player Joaquin header's finishing rate on 18/09/2014?"
  },
  {
    "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin' AND strftime('%Y', t2.date) = '2011'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Joaquin",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "values_list": [
      "player.player_name.gabriel tamas"
    ],
    "original_question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "question": "What is the overall rating of the football player Joa quin in year 2011?",
    "original_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "changes_information": {
      "original_value": "Joaquin",
      "typo_space_addition": "Joa quin"
    },
    "new_question_correct_value": "What is the overall rating of the football player Joaquin in year 2011?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Joaquin",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Joa quin\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Joaquin",
      "typo_space_addition": "Joa quin"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Joaquin\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Joaquin",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Joa quin's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Joaquin",
      "typo_space_addition": "Joa quin"
    },
    "new_question_correct_value": "What is Joaquin's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Joaquin",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Joa quin?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Joaquin",
      "typo_space_addition": "Joa quin"
    },
    "new_question_correct_value": "What's the heading accuracy of Joaquin?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Joaquin'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Joaquin",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Joa quin?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Joaquin",
      "typo_space_addition": "Joa quin"
    },
    "new_question_correct_value": "Which foot is preferred by Joaquin?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Joaquin'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Joaquin",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
    "values_list": [
      "player.player_name.francesco parravicini"
    ],
    "original_question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "question": "What was the potiential for Joa quin on 2010/8/30?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "changes_information": {
      "original_value": "Joaquin",
      "typo_space_addition": "Joa quin"
    },
    "new_question_correct_value": "What was the potiential for Joaquin on 2010/8/30?"
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Joaquin' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Joaquin",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Joa quin have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Joaquin",
      "typo_space_addition": "Joa quin"
    },
    "new_question_correct_value": "When was the first time did Joaquin have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'AutoCorrelation'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posthistory.text",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posts.viewcount",
      "posts.lasteditoruserid"
    ],
    "values": [
      {
        "table": "posthistory",
        "column": "text",
        "value": "AutoCorrelation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "values_list": [
      "posthistory.text.computer game datasets"
    ],
    "original_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "question": "Identify the total views on the post 'Auto Correlation'. Name the user who posted it last time.",
    "original_SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "changes_information": {
      "original_value": "AutoCorrelation",
      "typo_space_addition": "Auto Correlation"
    },
    "new_question_correct_value": "Identify the total views on the post 'AutoCorrelation'. Name the user who posted it last time."
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Rebellion'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by Rebel lion by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_space_addition": "Rebel lion"
    },
    "new_question_correct_value": "Rank heroes published by Rebellion by their height in descending order."
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Rebellion' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from Rebel lion by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_space_addition": "Rebel lion"
    },
    "new_question_correct_value": "Rank superheroes from Rebellion by their eye color popularity, starting with the most common color."
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Rebellion'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of Rebel lion.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_space_addition": "Rebel lion"
    },
    "new_question_correct_value": "Give the publisher ID of Rebellion."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Rebellion' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.durability"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most durability published by Rebel lion?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_space_addition": "Rebel lion"
    },
    "new_question_correct_value": "Which superhero has the most durability published by Rebellion?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Rebellion' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in Rebel lion.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_space_addition": "Rebel lion"
    },
    "new_question_correct_value": "Identify the heaviest superhero in Rebellion."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Atlantean'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Atlantean",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.atlantean"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the At lantean superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "Atlantean",
      "typo_space_addition": "At lantean"
    },
    "new_question_correct_value": "Give the name of the Atlantean superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Atlantean'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Atlantean",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.atlantean"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of At lantean superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "Atlantean",
      "typo_space_addition": "At lantean"
    },
    "new_question_correct_value": "List down at least five full name of Atlantean superheroes."
  },
  {
    "SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Atlantean'",
    "tables": [
      "race",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.height_cm",
      "superhero.hair_colour_id",
      "race.id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "height_cm",
        "value": "185",
        "condition": "="
      },
      {
        "table": "race",
        "column": "race",
        "value": "Atlantean",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
    "values_list": [
      "superhero.height_cm.185",
      "race.race.atlantean"
    ],
    "original_question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "question": "Provide the hair colour of the At lantean superhero who is 185 cm tall.",
    "original_SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "changes_information": {
      "original_value": "Atlantean",
      "typo_space_addition": "At lantean"
    },
    "new_question_correct_value": "Provide the hair colour of the Atlantean superhero who is 185 cm tall."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Atlantean'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Atlantean",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "values_list": [
      "race.race.atlantean"
    ],
    "original_question": "Provide the full names of vampire heroes.",
    "question": "Provide the full names of At lantean heroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "changes_information": {
      "original_value": "Atlantean",
      "typo_space_addition": "At lantean"
    },
    "new_question_correct_value": "Provide the full names of Atlantean heroes."
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Carolyn'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Carolyn",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.carolyn"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Caro lyn. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Carolyn",
      "typo_space_addition": "Caro lyn"
    },
    "new_question_correct_value": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Carolyn. List the district code of the school."
  },
  {
    "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Oakland'",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "schools.cdscode",
      "schools.mailcity",
      "satscores.numtsttakr",
      "satscores.cds"
    ],
    "values": [
      {
        "table": "schools",
        "column": "mailcity",
        "value": "Oakland",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.mailcity.oakland"
    ],
    "original_question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "question": "How many test takers are there at the school/s whose mailing city address is in Oak land?",
    "original_SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "changes_information": {
      "original_value": "Oakland",
      "typo_space_addition": "Oak land"
    },
    "new_question_correct_value": "How many test takers are there at the school/s whose mailing city address is in Oakland?"
  },
  {
    "SQL": "SELECT id FROM sets WHERE type = 'memorabilia' ORDER BY totalSetSize DESC LIMIT 1",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.id",
      "sets.type",
      "sets.totalsetsize"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "memorabilia",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
    "values_list": [
      "sets.type.memorabilia"
    ],
    "original_question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "question": "Among the sets whose expansion type is memor abilia, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "original_SQL": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
    "changes_information": {
      "original_value": "memorabilia",
      "typo_space_addition": "memor abilia"
    },
    "new_question_correct_value": "Among the sets whose expansion type is memorabilia, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraxas'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Abraxas",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Abra xas?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Abraxas",
      "typo_space_addition": "Abra xas"
    },
    "new_question_correct_value": "What is the eyes colour of Abraxas?"
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Abraxas'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Abraxas",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Abra xas.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Abraxas",
      "typo_space_addition": "Abra xas"
    },
    "new_question_correct_value": "Provide the hero name and race of Abraxas."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Abraxas'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Abraxas",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Abra xas.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Abraxas",
      "typo_space_addition": "Abra xas"
    },
    "new_question_correct_value": "List the powers of Abraxas."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraxas'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Abraxas",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Abra xas as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Abraxas",
      "typo_space_addition": "Abra xas"
    },
    "new_question_correct_value": "Provide the eye colour of the superhero who has Abraxas as their full name."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Abraxas'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Abraxas",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Abra xas as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Abraxas",
      "typo_space_addition": "Abra xas"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Abraxas as their full name?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Abraxas'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Abraxas",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Abra xas.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Abraxas",
      "typo_space_addition": "Abra xas"
    },
    "new_question_correct_value": "Name the superhero, otherwise known as Abraxas."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "Please list all the superpowers of 3-D Man.",
    "question": "Please list all the superpowers of Ban shee.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "Please list all the superpowers of Banshee."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of Ban shee's skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "What is the colour of Banshee's skin?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "Who is the publisher of Sauron?",
    "question": "Who is the publisher of Ban shee?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "Who is the publisher of Banshee?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of Ban shee?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "What is the publisher's name of Banshee?"
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is Ban shee's race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "What is Banshee's race?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "Provide the superpowers of the superhero called Deathlok.",
    "question": "Provide the superpowers of the superhero called Ban shee.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "Provide the superpowers of the superhero called Banshee."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero Ban shee.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "Indicate the attribute value of superhero Banshee."
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero Ban shee belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "Which group does superhero Banshee belong to?"
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of Ban shee hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "What is the gender of Banshee hero?"
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of Ban shee?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "What are the race and alignment of Banshee?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "What is Abomination's superpower?",
    "question": "What is Ban shee's superpower?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "What is Banshee's superpower?"
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of Ban shee's attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "State all of Banshee's attributes along with their values."
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named Ban shee.",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "Give the alignment and superpowers of the superhero named Banshee."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down Ban shee's superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "List down Banshee's superpowers."
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Banshee' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the Ban shee.",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "Identify the weakest attribute of the Banshee."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "What is Abomination's eye colour?",
    "question": "What is Ban shee's eye colour?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "What is Banshee's eye colour?"
  },
  {
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Banshee'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "Provide the full name of the superhero named Alien.",
    "question": "Provide the full name of the superhero named Ban shee.",
    "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "Provide the full name of the superhero named Banshee."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named Ban shee.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "List the attribute value of the superhero named Banshee."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Banshee'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Banshee",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.banshee"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of Ban shee.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "Banshee",
      "typo_space_addition": "Ban shee"
    },
    "new_question_correct_value": "Give the eye colour of Banshee."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Tele pathy'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Telepathy'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Tele pathy?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Telepathy?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.telepathy"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Tele pathy power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    },
    "new_question_correct_value": "List the name of superheroes with Telepathy power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.telepathy"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Tele pathy power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Telepathy power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Telepathy'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.telepathy"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Tele pathy?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    },
    "new_question_correct_value": "What is the power ID of Telepathy?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Telepathy'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Tele pathy.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Telepathy."
  },
  {
    "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Sunderland'",
    "tables": [
      "team"
    ],
    "columns": [
      "team.team_short_name",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Sunderland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
    "values_list": [
      "team.team_long_name.queens park rangers"
    ],
    "original_question": "What is the short name of the football team Queens Park Rangers?",
    "question": "What is the short name of the football team Sunder land?",
    "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "changes_information": {
      "original_value": "Sunderland",
      "typo_space_addition": "Sunder land"
    },
    "new_question_correct_value": "What is the short name of the football team Sunderland?"
  },
  {
    "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'Sunderland'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team_attributes.team_fifa_api_id",
      "team.team_fifa_api_id",
      "team_attributes.buildupplaypositioningclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Sunderland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "values_list": [
      "team.team_long_name.ado den haag"
    ],
    "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "question": "What is the Sunder land team freedom of movement in the 1st two thirds of the pitch?",
    "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "changes_information": {
      "original_value": "Sunderland",
      "typo_space_addition": "Sunder land"
    },
    "new_question_correct_value": "What is the Sunderland team freedom of movement in the 1st two thirds of the pitch?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Sunderland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "values_list": [
      "team.team_long_name.sunderland"
    ],
    "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "question": "What is Sunder land's highest chance creation passing score and what is it classified as?",
    "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "changes_information": {
      "original_value": "Sunderland",
      "typo_space_addition": "Sunder land"
    },
    "new_question_correct_value": "What is Sunderland's highest chance creation passing score and what is it classified as?"
  },
  {
    "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplayspeedclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Sunderland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
    "values_list": [
      "team.team_long_name.willem ii"
    ],
    "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "question": "What was the build up play speed class for \"Sunder land\" on 2011/2/22?",
    "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "changes_information": {
      "original_value": "Sunderland",
      "typo_space_addition": "Sunder land"
    },
    "new_question_correct_value": "What was the build up play speed class for \"Sunderland\" on 2011/2/22?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Sunderland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "values_list": [
      "team.team_long_name.pec zwolle"
    ],
    "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "question": "State the chance creation passing class for \"Sunder land\" on 2013/9/20.",
    "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "changes_information": {
      "original_value": "Sunderland",
      "typo_space_addition": "Sunder land"
    },
    "new_question_correct_value": "State the chance creation passing class for \"Sunderland\" on 2013/9/20."
  },
  {
    "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Sunderland' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team.team_long_name",
      "team_attributes.chancecreationcrossingclass"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Sunderland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "values_list": [
      "team.team_long_name.hull city"
    ],
    "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "question": "What was the chance creation crossing class for \"Sunder land\" on 2010/2/22?",
    "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "changes_information": {
      "original_value": "Sunderland",
      "typo_space_addition": "Sunder land"
    },
    "new_question_correct_value": "What was the chance creation crossing class for \"Sunderland\" on 2010/2/22?"
  },
  {
    "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'Sunderland'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team.team_long_name",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.team_api_id"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Sunderland",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "values_list": [
      "team.team_long_name.ksv cercle brugge"
    ],
    "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "question": "Does the Sunder land team have a slow, balanced or fast speed class?",
    "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "changes_information": {
      "original_value": "Sunderland",
      "typo_space_addition": "Sunder land"
    },
    "new_question_correct_value": "Does the Sunderland team have a slow, balanced or fast speed class?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user Kurt osis?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "Please list the titles of the posts owned by the user Kurtosis?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Kurtosis' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by Kurt osis and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "What is the title of the post that is owned by Kurtosis and has the highest popularity?"
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Kurt osis.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "Please list the names of the badges obtained by Kurtosis."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Kurt osis\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "For the user whose display name is \"Kurtosis\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Kurt osis' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "What is the badge name that user 'Kurtosis' obtained?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by Kurt osis.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "List the title of posts which were edited by Kurtosis."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Kurt osis\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "What is the name of badge that the user whose display name is \"Kurtosis\" obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Kurt osis\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "State the name of badge that the user whose display name is \"Kurtosis\" obtained."
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Kurtosis'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by Kurt osis's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "What is the name of tags used by Kurtosis's?"
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Kurtosis' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by Kurt osis has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "Which post by Kurtosis has the most answers count? State the post ID."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Kurtosis' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by Kurt osis and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "Among posts by Kurtosis and Noah Snyder, which one has higher popularity?"
  },
  {
    "SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Kurtosis' ORDER BY T2.CreationDate LIMIT 1",
    "tables": [
      "votes",
      "users"
    ],
    "columns": [
      "votes.creationdate",
      "users.id",
      "users.displayname",
      "votes.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "When did 'chl' cast its first vote in a post?",
    "question": "When did 'Kurt osis' cast its first vote in a post?",
    "original_SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "When did 'Kurtosis' cast its first vote in a post?"
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Kurtosis' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by Kurt osis has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "Which post by Kurtosis has the most views? Please give the id and title of this post."
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Kurtosis' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Kurt osis.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "Identify the latest badge awarded to the user with the display name Kurtosis."
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Kurtosis'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Kurt osis' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'Kurtosis' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Kurtosis'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Kurt osis'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'Kurtosis'?"
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Kurtosis'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Kurtosis",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.kurtosis"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Kurt osis' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Kurtosis",
      "typo_space_addition": "Kurt osis"
    },
    "new_question_correct_value": "When did the user known as 'Kurtosis' create his or her account?"
  },
  {
    "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Theresa';",
    "tables": [
      "users",
      "addresses"
    ],
    "columns": [
      "users.first_name",
      "addresses.country",
      "users.user_address_id",
      "addresses.address_id"
    ],
    "values": [
      {
        "table": "users",
        "column": "first_name",
        "value": "Theresa",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "users.first_name.theresa"
    ],
    "original_question": "In which country does the user with first name Robbie live?",
    "question": "In which country does the user with first name Ther esa live?",
    "original_SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
    "changes_information": {
      "original_value": "Theresa",
      "typo_space_addition": "Ther esa"
    },
    "new_question_correct_value": "In which country does the user with first name Theresa live?"
  },
  {
    "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Theresa';",
    "tables": [
      "users",
      "addresses"
    ],
    "columns": [
      "users.first_name",
      "addresses.country",
      "users.user_address_id",
      "addresses.address_id"
    ],
    "values": [
      {
        "table": "users",
        "column": "first_name",
        "value": "Theresa",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "users.first_name.theresa"
    ],
    "original_question": "Return the country in which the user with first name Robbie lives.",
    "question": "Return the country in which the user with first name Ther esa lives.",
    "original_SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
    "changes_information": {
      "original_value": "Theresa",
      "typo_space_addition": "Ther esa"
    },
    "new_question_correct_value": "Return the country in which the user with first name Theresa lives."
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Evanston'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "Port Evanston",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code of the address in the city Port Chelsea?",
    "question": "What is the zip code of the address in the city PortEvanston?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "Port Evanston",
      "typo_space_removal": "PortEvanston"
    },
    "new_question_correct_value": "What is the zip code of the address in the city Port Evanston?"
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Evanston'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "Port Evanston",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code for Port Chelsea?",
    "question": "What is the zip code for PortEvanston?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "Port Evanston",
      "typo_space_removal": "PortEvanston"
    },
    "new_question_correct_value": "What is the zip code for Port Evanston?"
  },
  {
    "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "tables": [
      "battle"
    ],
    "columns": [
      "battle.latin_commander",
      "battle.bulgarian_commander",
      "battle.name"
    ],
    "values": [
      {
        "table": "battle",
        "column": "bulgarian_commander",
        "value": "Kaloyan",
        "condition": "="
      },
      {
        "table": "battle",
        "column": "latin_commander",
        "value": "Baldwin I",
        "condition": "="
      }
    ],
    "db_id": "battle_death",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "battle.bulgarian_commander.kaloyan",
      "battle.latin_commander.baldwin i"
    ],
    "original_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'BaldwinI'?",
    "original_SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "changes_information": {
      "original_value": "Baldwin I",
      "typo_space_removal": "BaldwinI"
    },
    "new_question_correct_value": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?"
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Adam Rex'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Adam Rex",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Adamrex.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Adam Rex",
      "typo_space_removal": "Adamrex"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Adam Rex."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Adam Rex'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Adam Rex",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Adamrex cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Adam Rex",
      "typo_space_removal": "Adamrex"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Adam Rex cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Adam Rex' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Adam Rex",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Adamrex artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Adam Rex",
      "typo_space_removal": "Adamrex"
    },
    "new_question_correct_value": "Is there any card from Adam Rex artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Adam Rex'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Adam Rex",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Adamrex created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Adam Rex",
      "typo_space_removal": "Adamrex"
    },
    "new_question_correct_value": "What kind of printing is on the card that Adam Rex created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Adam Rex' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Adam Rex",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Adamrex? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Adam Rex",
      "typo_space_removal": "Adamrex"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Adam Rex? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Adam Rex'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Adam Rex",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Adamrex worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Adam Rex",
      "typo_space_removal": "Adamrex"
    },
    "new_question_correct_value": "List all the frame styles and cards Adam Rex worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Double strike'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Double strike",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.double_strike"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Doublestrike?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Double strike",
      "typo_space_removal": "Doublestrike"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Double strike?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Hypnotic Specter'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'HypnoticSpecter'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "What is the keyword found on card 'Hypnotic Specter'?"
  },
  {
    "SQL": "SELECT promoTypes FROM cards WHERE name = 'Hypnotic Specter' AND promoTypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
    "values_list": [
      "cards.name.hypnotic_specter"
    ],
    "original_question": "What type of promotion is of card 'Duress'?",
    "question": "What type of promotion is of card 'HypnoticSpecter'?",
    "original_SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "What type of promotion is of card 'Hypnotic Specter'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.hypnotic_specter"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"HypnoticSpecter\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Hypnotic Specter\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"HypnoticSpecter\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "What is the status of card \"Hypnotic Specter\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"HypnoticSpecter\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "What is the type of card \"Hypnotic Specter\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"HypnoticSpecter\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "What is the rule of playing card \"Hypnotic Specter\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of HypnoticSpecter.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "Write down the ruling of Hypnotic Specter."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Hypnotic Specter'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"HypnoticSpecter\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Hypnotic Specter\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"HypnoticSpecter\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "Did the set of cards with \"Hypnotic Specter\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.hypnotic_specter"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'HypnoticSpecter' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "When was the ruling for the card 'Hypnotic Specter' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.hypnotic_specter"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"HypnoticSpecter\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Hypnotic Specter\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Hypnotic Specter' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"HypnoticSpecter\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Hypnotic Specter\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Hypnotic Specter' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"HypnoticSpecter\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Hypnotic Specter\" is in it."
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Wall'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Enchant Wall",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of EnchantWall and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Enchant Wall",
      "typo_space_removal": "EnchantWall"
    },
    "new_question_correct_value": "List down the name of cards with original types of Enchant Wall and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Adam Beechen",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question": "which countries' tv channels are playing some cartoon written by AdamBeechen?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Adam Beechen",
      "typo_space_removal": "AdamBeechen"
    },
    "new_question_correct_value": "which countries' tv channels are playing some cartoon written by Adam Beechen?"
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Adam Beechen",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by AdamBeechen?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Adam Beechen",
      "typo_space_removal": "AdamBeechen"
    },
    "new_question_correct_value": "What are the countries that have cartoons on TV that were written by Adam Beechen?"
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Le Mans'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Le Mans",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.le_mans"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in LeMans.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Le Mans",
      "typo_space_removal": "LeMans"
    },
    "new_question_correct_value": "Please list the year during which the race is held on circuits in Le Mans."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on BrandsHatch be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Brands Hatch be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on BrandsHatch?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Brands Hatch?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on BrandsHatch.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    },
    "new_question_correct_value": "Please list the time of the races held on Brands Hatch."
  },
  {
    "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "races.circuitid",
      "races.date",
      "races.year",
      "races.name",
      "circuits.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      },
      {
        "table": "races",
        "column": "name",
        "value": "British Grand Prix",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "the last refers to max(year);",
    "values_list": [
      "circuits.name.brands hatch",
      "races.name.british grand prix"
    ],
    "original_question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
    "question": "When was the last f1 season whereby BrandsHatch hosted the British Grand Prix?",
    "original_SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    },
    "new_question_correct_value": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?"
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Brands Hatch'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of BrandsHatch?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    },
    "new_question_correct_value": "What's the location coordinates of Brands Hatch?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Brands Hatch'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of BrandsHatch?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    },
    "new_question_correct_value": "What's the reference name of Brands Hatch?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that BrandsHatch was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    },
    "new_question_correct_value": "Please list all the years that Brands Hatch was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the BrandsHatch.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Brands Hatch."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Brands Hatch'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.brands_hatch"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the BrandsHatch circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    },
    "new_question_correct_value": "In which location does the Brands Hatch circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Ransom Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What is the owner of document with the Description 'Braeden Collection'?",
    "question": "What is the owner of document with the Description 'RansomCollection'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Ransom Collection",
      "typo_space_removal": "RansomCollection"
    },
    "new_question_correct_value": "What is the owner of document with the Description 'Ransom Collection'?"
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Ransom Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "question": "What are the owners of the document objects described as the 'RansomCollection'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Ransom Collection",
      "typo_space_removal": "RansomCollection"
    },
    "new_question_correct_value": "What are the owners of the document objects described as the 'Ransom Collection'?"
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Bleeding Colitis' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Bleeding Colitis",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.bleeding_colitis"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with BleedingColitis disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Bleeding Colitis",
      "typo_space_removal": "BleedingColitis"
    },
    "new_question_correct_value": "What is the most common sign of patients with Bleeding Colitis disease?"
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Club shirts'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Club shirts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.club_shirts"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'Clubshirts' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Club shirts",
      "typo_space_removal": "Clubshirts"
    },
    "new_question_correct_value": "Which budget category does the expense 'Club shirts' fall to?"
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Guide gobelin'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Guide gobelin",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Guidegobelin\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Guide gobelin",
      "typo_space_removal": "Guidegobelin"
    },
    "new_question_correct_value": "Which foreign language used by \"Guide gobelin\"?"
  },
  {
    "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
    "tables": [
      "hangar"
    ],
    "columns": [
      "hangar.plane_name",
      "hangar.location"
    ],
    "values": [
      {
        "table": "hangar",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "hangar.plane_name.f-14 fighter"
    ],
    "original_question": "Where is the plane F-14 Fighter located?",
    "question": "Where is the plane PiperCub located?",
    "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "Where is the plane Piper Cub located?"
  },
  {
    "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
    "tables": [
      "hangar"
    ],
    "columns": [
      "hangar.plane_name",
      "hangar.location"
    ],
    "values": [
      {
        "table": "hangar",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "hangar.plane_name.f-14 fighter"
    ],
    "original_question": "Return the location of the hangar in which F-14 Fighter is located.",
    "question": "Return the location of the hangar in which PiperCub is located.",
    "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "Return the location of the hangar in which Piper Cub is located."
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'New Haven' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "New Haven",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "question": "What are the country code and first name of the players who won in both tourney NewHaven and Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "New Haven",
      "typo_space_removal": "NewHaven"
    },
    "new_question_correct_value": "What are the country code and first name of the players who won in both tourney New Haven and Australian Open?"
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'New Haven' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "New Haven",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "question": "What are the first names and country codes for players who won both the NewHaven and the Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "New Haven",
      "typo_space_removal": "NewHaven"
    },
    "new_question_correct_value": "What are the first names and country codes for players who won both the New Haven and the Australian Open?"
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'New Haven' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "New Haven",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the NewHaven tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "New Haven",
      "typo_space_removal": "NewHaven"
    },
    "new_question_correct_value": "Find the name of the winner who has the highest rank points and participated in the New Haven tourney."
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'New Haven' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "New Haven",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the NewHaven tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "New Haven",
      "typo_space_removal": "NewHaven"
    },
    "new_question_correct_value": "What is the name of the winner with the most rank points who participated in the New Haven tournament?"
  },
  {
    "SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Adult STILL' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "tables": [
      "patient",
      "laboratory"
    ],
    "columns": [
      "laboratory.date",
      "patient.diagnosis",
      "laboratory.id",
      "patient.id",
      "patient.first date",
      "patient.birthday"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "Adult STILL",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
    "values_list": [
      "patient.diagnosis.adult_still"
    ],
    "original_question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "question": "The oldest AdultSTILL patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "original_SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "changes_information": {
      "original_value": "Adult STILL",
      "typo_space_removal": "AdultSTILL"
    },
    "new_question_correct_value": "The oldest Adult STILL patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?"
  },
  {
    "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'Adult STILL' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "tables": [
      "patient"
    ],
    "columns": [
      "patient.first date",
      "patient.diagnosis",
      "patient.sex"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "Adult STILL",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
    "values_list": [
      "patient.diagnosis.adult_still"
    ],
    "original_question": "What was the gender of the first AORTITIS diagnosed patient?",
    "question": "What was the gender of the first AdultSTILL diagnosed patient?",
    "original_SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "changes_information": {
      "original_value": "Adult STILL",
      "typo_space_removal": "AdultSTILL"
    },
    "new_question_correct_value": "What was the gender of the first Adult STILL diagnosed patient?"
  },
  {
    "SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Adult STILL' AND T2.PLT BETWEEN 100 AND 400",
    "tables": [
      "patient",
      "laboratory"
    ],
    "columns": [
      "patient.diagnosis",
      "patient.id",
      "laboratory.plt",
      "laboratory.id"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "Adult STILL",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
    "values_list": [
      "patient.diagnosis.adult_still"
    ],
    "original_question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
    "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with AdultSTILL.",
    "original_SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400",
    "changes_information": {
      "original_value": "Adult STILL",
      "typo_space_removal": "AdultSTILL"
    },
    "new_question_correct_value": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with Adult STILL."
  },
  {
    "SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "age",
        "value": "35",
        "condition": "<"
      },
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.age.35",
      "pilotskills.plane_name.piper cub"
    ],
    "original_question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "question": "Find the names of all pilots who have a plane named PiperCub and is under 35.",
    "original_SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "Find the names of all pilots who have a plane named Piper Cub and is under 35."
  },
  {
    "SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "age",
        "value": "35",
        "condition": "<"
      },
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.age.35",
      "pilotskills.plane_name.piper cub"
    ],
    "original_question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "question": "What are the names of pilots who are younger than 35 and have a plane named PiperCub?",
    "original_SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?"
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub"
    ],
    "original_question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "question": "Who is the youngest pilot to fly the plane PiperCub?",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "Who is the youngest pilot to fly the plane Piper Cub?"
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub"
    ],
    "original_question": "Return the name of the youngest pilot to fly Piper Cub.",
    "question": "Return the name of the youngest pilot to fly PiperCub.",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "Return the name of the youngest pilot to fly Piper Cub."
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      },
      {
        "table": "",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub",
      ".plane_name.piper cub"
    ],
    "original_question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane PiperCub.",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub."
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      },
      {
        "table": "",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub",
      ".plane_name.piper cub"
    ],
    "original_question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "question": "Return the names of pilots who are older than any pilot who has flown PiperCub, ordered alphabetically.",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically."
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Hunt",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Aaronhunt?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Aaron Hunt",
      "typo_space_removal": "Aaronhunt"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Aaron Hunt?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.heading_accuracy",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Hunt",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "values_list": [
      "player.player_name.francois affolter"
    ],
    "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "question": "What is the football player Aaronhunt header's finishing rate on 18/09/2014?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "changes_information": {
      "original_value": "Aaron Hunt",
      "typo_space_removal": "Aaronhunt"
    },
    "new_question_correct_value": "What is the football player Aaron Hunt header's finishing rate on 18/09/2014?"
  },
  {
    "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt' AND strftime('%Y', t2.date) = '2011'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Hunt",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "values_list": [
      "player.player_name.gabriel tamas"
    ],
    "original_question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "question": "What is the overall rating of the football player Aaronhunt in year 2011?",
    "original_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "changes_information": {
      "original_value": "Aaron Hunt",
      "typo_space_removal": "Aaronhunt"
    },
    "new_question_correct_value": "What is the overall rating of the football player Aaron Hunt in year 2011?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Hunt",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Aaronhunt\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Aaron Hunt",
      "typo_space_removal": "Aaronhunt"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Aaron Hunt\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Hunt",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Aaronhunt's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Aaron Hunt",
      "typo_space_removal": "Aaronhunt"
    },
    "new_question_correct_value": "What is Aaron Hunt's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Hunt",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Aaronhunt?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Aaron Hunt",
      "typo_space_removal": "Aaronhunt"
    },
    "new_question_correct_value": "What's the heading accuracy of Aaron Hunt?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Hunt'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Hunt",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Aaronhunt?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Aaron Hunt",
      "typo_space_removal": "Aaronhunt"
    },
    "new_question_correct_value": "Which foot is preferred by Aaron Hunt?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Aaron Hunt'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Hunt",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
    "values_list": [
      "player.player_name.francesco parravicini"
    ],
    "original_question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "question": "What was the potiential for Aaronhunt on 2010/8/30?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "changes_information": {
      "original_value": "Aaron Hunt",
      "typo_space_removal": "Aaronhunt"
    },
    "new_question_correct_value": "What was the potiential for Aaron Hunt on 2010/8/30?"
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Aaron Hunt' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Hunt",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Aaronhunt have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Aaron Hunt",
      "typo_space_removal": "Aaronhunt"
    },
    "new_question_correct_value": "When was the first time did Aaron Hunt have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Unknown formula'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Unknownformula\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    },
    "new_question_correct_value": "Who is the owner of the post \"Unknown formula\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Unknown formula'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Unknownformula\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"Unknown formula\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Unknown formula'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Unknownformula\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Unknown formula\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Unknown formula'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Unknownformula' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    },
    "new_question_correct_value": "How many views did the post titled 'Unknown formula' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Unknown formula'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Unknownformula\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Unknown formula\"."
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Unknown formula' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Unknownformula' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    },
    "new_question_correct_value": "Provide the text of the latest 10 comments to the post with the title 'Unknown formula' and the display name of the user who left it."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Unknown formula'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Unknownformula'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Unknown formula'?"
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Unknown formula'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Unknownformula\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    },
    "new_question_correct_value": "What is the post ID and the comments commented in the post titled by \"Unknown formula\"?"
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by DCComics by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    },
    "new_question_correct_value": "Rank heroes published by DC Comics by their height in descending order."
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from DCComics by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    },
    "new_question_correct_value": "Rank superheroes from DC Comics by their eye color popularity, starting with the most common color."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'DC Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Strength",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from DCComics who have the super power of 'Super Strength'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    },
    "new_question_correct_value": "List the superheroes from DC Comics who have the super power of 'Super Strength'."
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'DC Comics'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of DCComics.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    },
    "new_question_correct_value": "Give the publisher ID of DC Comics."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'DC Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.durability"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most durability published by DCComics?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    },
    "new_question_correct_value": "Which superhero has the most durability published by DC Comics?"
  },
  {
    "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'DC Comics' AND T3.gender = 'Female'",
    "tables": [
      "publisher",
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.skin_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Female",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "gender.gender.female"
    ],
    "original_question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "question": "List the eyes, hair and skin colour of all female superheroes published by DCComics.",
    "original_SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    },
    "new_question_correct_value": "List the eyes, hair and skin colour of all female superheroes published by DC Comics."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in DCComics.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    },
    "new_question_correct_value": "Identify the heaviest superhero in DC Comics."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'New God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "New God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.new_god"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the NewGod superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "New God",
      "typo_space_removal": "NewGod"
    },
    "new_question_correct_value": "Give the name of the New God superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'New God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "New God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.new_god"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of NewGod superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "New God",
      "typo_space_removal": "NewGod"
    },
    "new_question_correct_value": "List down at least five full name of New God superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'New God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "New God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "values_list": [
      "race.race.new_god"
    ],
    "original_question": "Provide the full names of vampire heroes.",
    "question": "Provide the full names of NewGod heroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "changes_information": {
      "original_value": "New God",
      "typo_space_removal": "NewGod"
    },
    "new_question_correct_value": "Provide the full names of New God heroes."
  },
  {
    "SQL": "SELECT sname FROM satscores WHERE cname = 'San Diego' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "tables": [
      "satscores"
    ],
    "columns": [
      "satscores.cname",
      "satscores.numtsttakr",
      "satscores.sname"
    ],
    "values": [
      {
        "table": "satscores",
        "column": "cname",
        "value": "San Diego",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "satscores.cname.contra costa"
    ],
    "original_question": "Which school in Contra Costa has the highest number of test takers?",
    "question": "Which school in Sandiego has the highest number of test takers?",
    "original_SQL": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "changes_information": {
      "original_value": "San Diego",
      "typo_space_removal": "Sandiego"
    },
    "new_question_correct_value": "Which school in San Diego has the highest number of test takers?"
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Ann Marie'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Ann Marie",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.ann_marie"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is AnnMarie. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Ann Marie",
      "typo_space_removal": "AnnMarie"
    },
    "new_question_correct_value": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Ann Marie. List the district code of the school."
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'San Lorenzo' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "San Lorenzo",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.san_lorenzo"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of SanLorenzo?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "San Lorenzo",
      "typo_space_removal": "SanLorenzo"
    },
    "new_question_correct_value": "What is the most common type of grade span served in the city of San Lorenzo?"
  },
  {
    "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Core Set' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.id",
      "sets.block",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "block",
        "value": "Core Set",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Italian",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "sets.block.core_set",
      "set_translations.language.italian"
    ],
    "original_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Coreset block in alphabetical order.",
    "original_SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "changes_information": {
      "original_value": "Core Set",
      "typo_space_removal": "Coreset"
    },
    "new_question_correct_value": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Core Set block in alphabetical order."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Laura Kinney'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Laura Kinney",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Laurakinney?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Laura Kinney",
      "typo_space_removal": "Laurakinney"
    },
    "new_question_correct_value": "What is the eyes colour of Laura Kinney?"
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Laura Kinney'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Laura Kinney",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Laurakinney.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Laura Kinney",
      "typo_space_removal": "Laurakinney"
    },
    "new_question_correct_value": "Provide the hero name and race of Laura Kinney."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Laura Kinney'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Laura Kinney",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Laurakinney.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Laura Kinney",
      "typo_space_removal": "Laurakinney"
    },
    "new_question_correct_value": "List the powers of Laura Kinney."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Laura Kinney'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Laura Kinney",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Laurakinney as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Laura Kinney",
      "typo_space_removal": "Laurakinney"
    },
    "new_question_correct_value": "Provide the eye colour of the superhero who has Laura Kinney as their full name."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Laura Kinney'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Laura Kinney",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Laurakinney as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Laura Kinney",
      "typo_space_removal": "Laurakinney"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Laura Kinney as their full name?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Laura Kinney'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Laura Kinney",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Laurakinney.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Laura Kinney",
      "typo_space_removal": "Laurakinney"
    },
    "new_question_correct_value": "Name the superhero, otherwise known as Laura Kinney."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "Please list all the superpowers of 3-D Man.",
    "question": "Please list all the superpowers of AgentZero.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "Please list all the superpowers of Agent Zero."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of AgentZero's skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "What is the colour of Agent Zero's skin?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "Who is the publisher of Sauron?",
    "question": "Who is the publisher of AgentZero?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "Who is the publisher of Agent Zero?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of AgentZero?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "What is the publisher's name of Agent Zero?"
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is AgentZero's race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "What is Agent Zero's race?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "Provide the superpowers of the superhero called Deathlok.",
    "question": "Provide the superpowers of the superhero called AgentZero.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "Provide the superpowers of the superhero called Agent Zero."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero AgentZero.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "Indicate the attribute value of superhero Agent Zero."
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero AgentZero belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "Which group does superhero Agent Zero belong to?"
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of AgentZero hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "What is the gender of Agent Zero hero?"
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of AgentZero?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "What are the race and alignment of Agent Zero?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "What is Abomination's superpower?",
    "question": "What is AgentZero's superpower?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "What is Agent Zero's superpower?"
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of AgentZero's attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "State all of Agent Zero's attributes along with their values."
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named AgentZero.",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "Give the alignment and superpowers of the superhero named Agent Zero."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down AgentZero's superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "List down Agent Zero's superpowers."
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Agent Zero' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the AgentZero.",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "Identify the weakest attribute of the Agent Zero."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "What is Abomination's eye colour?",
    "question": "What is AgentZero's eye colour?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "What is Agent Zero's eye colour?"
  },
  {
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Agent Zero'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "Provide the full name of the superhero named Alien.",
    "question": "Provide the full name of the superhero named AgentZero.",
    "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "Provide the full name of the superhero named Agent Zero."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named AgentZero.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "List the attribute value of the superhero named Agent Zero."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of AgentZero.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    },
    "new_question_correct_value": "Give the eye colour of Agent Zero."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'EnergyArmor'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Energy Armor'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of EnergyArmor?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Energy Armor?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.energy_armor"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with EnergyArmor power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    },
    "new_question_correct_value": "List the name of superheroes with Energy Armor power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.energy_armor"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the EnergyArmor power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Energy Armor power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Energy Armor'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.energy_armor"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of EnergyArmor?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    },
    "new_question_correct_value": "What is the power ID of Energy Armor?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Energy Armor'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of EnergyArmor.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Energy Armor."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Robert Lu'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Robert Lu",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'RobertLu'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Robert Lu",
      "typo_space_removal": "RobertLu"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'Robert Lu'?"
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Robert Lu'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Robert Lu",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.robert_lu"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'RobertLu' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Robert Lu",
      "typo_space_removal": "RobertLu"
    },
    "new_question_correct_value": "When did the user known as 'Robert Lu' create his or her account?"
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'North Omer'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "North Omer",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code of the address in the city Port Chelsea?",
    "question": "What is the zip code of the address in the city North Oner?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "North Omer",
      "typo_substitution": "North Oner"
    },
    "new_question_correct_value": "What is the zip code of the address in the city North Omer?"
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'North Omer'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "North Omer",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code for Port Chelsea?",
    "question": "What is the zip code for North Oner?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "North Omer",
      "typo_substitution": "North Oner"
    },
    "new_question_correct_value": "What is the zip code for North Omer?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Caucus' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Caucus",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.caucus"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Causus.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Caucus",
      "typo_substitution": "Causus"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Caucus.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Caucus'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Caucus",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.caucus"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Causus Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Caucus",
      "typo_substitution": "Causus"
    },
    "new_question_correct_value": "List all the name of users that obtained the Caucus Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Caucus'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Caucus",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.caucus"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Causus badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Caucus",
      "typo_substitution": "Causus"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Caucus badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Caucus' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Caucus",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.caucus"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Causus badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Caucus",
      "typo_substitution": "Causus"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Caucus badge?"
  },
  {
    "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "tables": [
      "battle"
    ],
    "columns": [
      "battle.latin_commander",
      "battle.bulgarian_commander",
      "battle.name"
    ],
    "values": [
      {
        "table": "battle",
        "column": "bulgarian_commander",
        "value": "Kaloyan",
        "condition": "="
      },
      {
        "table": "battle",
        "column": "latin_commander",
        "value": "Baldwin I",
        "condition": "="
      }
    ],
    "db_id": "battle_death",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "battle.bulgarian_commander.kaloyan",
      "battle.latin_commander.baldwin i"
    ],
    "original_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin l'?",
    "original_SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "changes_information": {
      "original_value": "Baldwin I",
      "typo_substitution": "Baldwin l"
    },
    "new_question_correct_value": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?"
  },
  {
    "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.contents",
      "boxes.value",
      "boxes.code"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      },
      {
        "table": "",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.scissors",
      ".contents.rocks"
    ],
    "original_question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with Scissorz as content.",
    "original_SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "changes_information": {
      "original_value": "Scissors",
      "typo_substitution": "Scissorz"
    },
    "new_question_correct_value": "Find the code of all boxes whose value is higher than the value of any boxes with Scissors as content."
  },
  {
    "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.contents",
      "boxes.value",
      "boxes.code"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      },
      {
        "table": "",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.scissors",
      ".contents.rocks"
    ],
    "original_question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Scissorz?",
    "original_SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "changes_information": {
      "original_value": "Scissors",
      "typo_substitution": "Scissorz"
    },
    "new_question_correct_value": "What are the codes of boxes for which the value is greater than the value of any box that contains Scissors?"
  },
  {
    "SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.contents",
      "boxes.value",
      "boxes.code"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      },
      {
        "table": "",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.scissors",
      ".contents.scissors"
    ],
    "original_question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissorz as content.",
    "original_SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "changes_information": {
      "original_value": "Scissors",
      "typo_substitution": "Scissorz"
    },
    "new_question_correct_value": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content."
  },
  {
    "SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.contents",
      "boxes.value",
      "boxes.code"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      },
      {
        "table": "",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.scissors",
      ".contents.scissors"
    ],
    "original_question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissorz?",
    "original_SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "changes_information": {
      "original_value": "Scissors",
      "typo_substitution": "Scissorz"
    },
    "new_question_correct_value": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?"
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Greg Staples'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Greg Stables.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_substitution": "Greg Stables"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Greg Staples."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Greg Staples'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Greg Stables cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_substitution": "Greg Stables"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Greg Staples cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Greg Staples' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Greg Stables artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_substitution": "Greg Stables"
    },
    "new_question_correct_value": "Is there any card from Greg Staples artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Greg Staples'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Greg Stables created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_substitution": "Greg Stables"
    },
    "new_question_correct_value": "What kind of printing is on the card that Greg Staples created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Greg Staples' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Greg Stables? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_substitution": "Greg Stables"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Greg Staples? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Greg Staples'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Greg Stables worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_substitution": "Greg Stables"
    },
    "new_question_correct_value": "List all the frame styles and cards Greg Staples worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Landfall'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Landfall",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.landfall"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Landfoll?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Landfall",
      "typo_substitution": "Landfoll"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Landfall?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Maddening Wind'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Maddening Wind",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Maddening Wond'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Maddening Wind",
      "typo_substitution": "Maddening Wond"
    },
    "new_question_correct_value": "What is the keyword found on card 'Maddening Wind'?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Maddening Wind'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Maddening Wind",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Maddening Wond\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Maddening Wind",
      "typo_substitution": "Maddening Wond"
    },
    "new_question_correct_value": "What is the status of card \"Maddening Wind\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Maddening Wind'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Maddening Wind",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Maddening Wond\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Maddening Wind",
      "typo_substitution": "Maddening Wond"
    },
    "new_question_correct_value": "What is the type of card \"Maddening Wind\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Maddening Wind'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Maddening Wind",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Maddening Wond\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Maddening Wind",
      "typo_substitution": "Maddening Wond"
    },
    "new_question_correct_value": "What is the rule of playing card \"Maddening Wind\"?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Maddening Wind'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Maddening Wind",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Maddening Wond\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Maddening Wind",
      "typo_substitution": "Maddening Wond"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Maddening Wind\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Maddening Wind'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Maddening Wind",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Maddening Wond\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Maddening Wind",
      "typo_substitution": "Maddening Wond"
    },
    "new_question_correct_value": "Did the set of cards with \"Maddening Wind\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Maddening Wind'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Maddening Wind",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.maddening_wind"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Maddening Wond\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Maddening Wind",
      "typo_substitution": "Maddening Wond"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Maddening Wind\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Maddening Wind' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Maddening Wind",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Maddening Wond\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Maddening Wind",
      "typo_substitution": "Maddening Wond"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Maddening Wind\" is in?"
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Swamp'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Enchant Swamp",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Enchant Swamo and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Enchant Swamp",
      "typo_substitution": "Enchant Swamo"
    },
    "new_question_correct_value": "List down the name of cards with original types of Enchant Swamp and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Swamp' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Enchant Swamp",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.enchant_swamp",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the Enchant Swamo cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Enchant Swamp",
      "typo_substitution": "Enchant Swamo"
    },
    "new_question_correct_value": "Among the Enchant Swamp cards, which are black color and comes with foreign languague translation?"
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'tourney'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "tourney",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.tourney"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"tournry\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "tourney",
      "typo_substitution": "tournry"
    },
    "new_question_correct_value": "Please list the websites where I can purchase the cards that have the promotional type of \"tourney\"."
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Legendary Enchantment' AND T2.format = 'vintage' AND T1.side IS NULL",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.side",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "type",
        "value": "Legendary Enchantment",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "vintage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "values_list": [
      "cards.type.legendary_enchantment",
      "legalities.format.vintage"
    ],
    "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "question": "For Legendaru Enchantment type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "changes_information": {
      "original_value": "Legendary Enchantment",
      "typo_substitution": "Legendaru Enchantment"
    },
    "new_question_correct_value": "For Legendary Enchantment type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Adam Beechen",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question": "which countries' tv channels are playing some cartoon written by Adam Beechem?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Adam Beechen",
      "typo_substitution": "Adam Beechem"
    },
    "new_question_correct_value": "which countries' tv channels are playing some cartoon written by Adam Beechen?"
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Adam Beechen",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by Adam Beechem?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Adam Beechen",
      "typo_substitution": "Adam Beechem"
    },
    "new_question_correct_value": "What are the countries that have cartoons on TV that were written by Adam Beechen?"
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Adelaide'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Adelaide",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.adelaide"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in Adelaode.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Adelaide",
      "typo_substitution": "Adelaode"
    },
    "new_question_correct_value": "Please list the year during which the race is held on circuits in Adelaide."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Monaco",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Circuit de Monsco be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Circuit de Monaco",
      "typo_substitution": "Circuit de Monsco"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Circuit de Monaco be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Monaco",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Circuit de Monsco?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Circuit de Monaco",
      "typo_substitution": "Circuit de Monsco"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Circuit de Monaco?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Monaco",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Circuit de Monsco.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Circuit de Monaco",
      "typo_substitution": "Circuit de Monsco"
    },
    "new_question_correct_value": "Please list the time of the races held on Circuit de Monaco."
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Circuit de Monaco'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Monaco",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Circuit de Monsco?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Circuit de Monaco",
      "typo_substitution": "Circuit de Monsco"
    },
    "new_question_correct_value": "What's the location coordinates of Circuit de Monaco?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Circuit de Monaco'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Monaco",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Circuit de Monsco?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Circuit de Monaco",
      "typo_substitution": "Circuit de Monsco"
    },
    "new_question_correct_value": "What's the reference name of Circuit de Monaco?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Monaco",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Circuit de Monsco was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Circuit de Monaco",
      "typo_substitution": "Circuit de Monsco"
    },
    "new_question_correct_value": "Please list all the years that Circuit de Monaco was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Monaco'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Monaco",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Circuit de Monsco.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Circuit de Monaco",
      "typo_substitution": "Circuit de Monsco"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Circuit de Monaco."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Circuit de Monaco'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Monaco",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.circuit_de_monaco"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Circuit de Monsco circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Circuit de Monaco",
      "typo_substitution": "Circuit de Monsco"
    },
    "new_question_correct_value": "In which location does the Circuit de Monaco circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Vincent'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Vincent",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.vincent"
    ],
    "original_question": "Show agency details for client with detail 'Mac'.",
    "question": "Show agency details for client with detail 'Vincenr'.",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Vincent",
      "typo_substitution": "Vincenr"
    },
    "new_question_correct_value": "Show agency details for client with detail 'Vincent'."
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Vincent'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Vincent",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.vincent"
    ],
    "original_question": "What are the agency details for clients with the detail Mac?",
    "question": "What are the agency details for clients with the detail Vincenr?",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Vincent",
      "typo_substitution": "Vincenr"
    },
    "new_question_correct_value": "What are the agency details for clients with the detail Vincent?"
  },
  {
    "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Indigo'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "colour.colour",
      "superhero.height_cm"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Indigo",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
    "values_list": [
      "colour.colour.indigo"
    ],
    "original_question": "Provide the heights of the heroes whose eye colours are amber.",
    "question": "Provide the heights of the heroes whose eye colours are Indifo.",
    "original_SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
    "changes_information": {
      "original_value": "Indigo",
      "typo_substitution": "Indifo"
    },
    "new_question_correct_value": "Provide the heights of the heroes whose eye colours are Indigo."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Indigo' LIMIT 5",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "colour.id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Indigo",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
    "values_list": [
      "colour.colour.indigo"
    ],
    "original_question": "List down at least five full names of superheroes with blue eyes.",
    "question": "List down at least five full names of superheroes with Indifo eyes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "changes_information": {
      "original_value": "Indigo",
      "typo_substitution": "Indifo"
    },
    "new_question_correct_value": "List down at least five full names of superheroes with Indigo eyes."
  },
  {
    "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Indigo' AND T4.gender = 'Male'",
    "tables": [
      "race",
      "superhero",
      "gender",
      "colour"
    ],
    "columns": [
      "gender.gender",
      "race.id",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Indigo",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Male",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
    "values_list": [
      "colour.colour.indigo",
      "gender.gender.male"
    ],
    "original_question": "Give the race of the blue-haired male superhero.",
    "question": "Give the race of the Indifo-haired male superhero.",
    "original_SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "changes_information": {
      "original_value": "Indigo",
      "typo_substitution": "Indifo"
    },
    "new_question_correct_value": "Give the race of the Indigo-haired male superhero."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Indigo'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.full_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "weight_kg",
        "value": "100",
        "condition": "<"
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Indigo",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weight less than 100 refers to weight_kg < 100",
    "values_list": [
      "superhero.weight_kg.100",
      "colour.colour.indigo"
    ],
    "original_question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
    "question": "In superheroes with weight less than 100, list the full name of the superheroes with Indifo eyes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
    "changes_information": {
      "original_value": "Indigo",
      "typo_substitution": "Indifo"
    },
    "new_question_correct_value": "In superheroes with weight less than 100, list the full name of the superheroes with Indigo eyes."
  },
  {
    "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Palm reading'",
    "tables": [
      "documents",
      "paragraphs"
    ],
    "columns": [
      "documents.document_name",
      "documents.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id"
    ],
    "values": [
      {
        "table": "documents",
        "column": "document_name",
        "value": "Palm reading",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_Template_Mgt",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "documents.document_name.welcome to ny"
    ],
    "original_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
    "question": "Show all paragraph ids and texts for the document with name 'Paln reading'.",
    "original_SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "changes_information": {
      "original_value": "Palm reading",
      "typo_substitution": "Paln reading"
    },
    "new_question_correct_value": "Show all paragraph ids and texts for the document with name 'Palm reading'."
  },
  {
    "SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Palm reading'",
    "tables": [
      "documents",
      "paragraphs"
    ],
    "columns": [
      "documents.document_name",
      "documents.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id"
    ],
    "values": [
      {
        "table": "documents",
        "column": "document_name",
        "value": "Palm reading",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_Template_Mgt",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "documents.document_name.welcome to ny"
    ],
    "original_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
    "question": "What are the ids and texts of paragraphs in the document titled 'Paln reading'?",
    "original_SQL": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
    "changes_information": {
      "original_value": "Palm reading",
      "typo_substitution": "Paln reading"
    },
    "new_question_correct_value": "What are the ids and texts of paragraphs in the document titled 'Palm reading'?"
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Fall Budget Review'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.first_name",
      "attendance.link_to_member",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Fall Budget Review",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
    "values_list": [
      "event.event_name.laugh out loud"
    ],
    "original_question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "question": "List the full name of all the members of the Student_Club who attended the \"Fall Budgef Review\" event.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "changes_information": {
      "original_value": "Fall Budget Review",
      "typo_substitution": "Fall Budgef Review"
    },
    "new_question_correct_value": "List the full name of all the members of the Student_Club who attended the \"Fall Budget Review\" event."
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'Fall Budget Review'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Fall Budget Review",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"Fall Budgef Review\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "Fall Budget Review",
      "typo_substitution": "Fall Budgef Review"
    },
    "new_question_correct_value": "Give the location for \"Fall Budget Review\"."
  },
  {
    "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Fall Budget Review'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "attendance.link_to_member",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Fall Budget Review",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'October Meeting' is an event name;",
    "values_list": [
      "event.event_name.october meeting"
    ],
    "original_question": "List all the members who attended the event \"October Meeting\".",
    "question": "List all the members who attended the event \"Fall Budgef Review\".",
    "original_SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
    "changes_information": {
      "original_value": "Fall Budget Review",
      "typo_substitution": "Fall Budgef Review"
    },
    "new_question_correct_value": "List all the members who attended the event \"Fall Budget Review\"."
  },
  {
    "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Fall Budget Review' AND T1.major_name = 'Interior Design'",
    "tables": [
      "member",
      "event",
      "major",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.link_to_major",
      "member.first_name",
      "attendance.link_to_member",
      "major.major_id",
      "major.major_name",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Fall Budget Review",
        "condition": "="
      },
      {
        "table": "major",
        "column": "major_name",
        "value": "Interior Design",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
    "values_list": [
      "event.event_name.community theater",
      "major.major_name.interior design"
    ],
    "original_question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "question": "Among the students majored in interior design, who have attended the Fall Budgef Review event?",
    "original_SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "changes_information": {
      "original_value": "Fall Budget Review",
      "typo_substitution": "Fall Budgef Review"
    },
    "new_question_correct_value": "Among the students majored in interior design, who have attended the Fall Budget Review event?"
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'Bleeding Colitis' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Bleeding Colitis",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.bleeding_colitis"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with Bleeding Colitus disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Bleeding Colitis",
      "typo_substitution": "Bleeding Colitus"
    },
    "new_question_correct_value": "What is the most common sign of patients with Bleeding Colitis disease?"
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Remover a Alma'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Remover a Alma",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Remover a Alna\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Remover a Alma",
      "typo_substitution": "Remover a Alna"
    },
    "new_question_correct_value": "Which foreign language used by \"Remover a Alma\"?"
  },
  {
    "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Orange' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "tables": [
      "frpm"
    ],
    "columns": [
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "frpm",
        "column": "county name",
        "value": "Orange",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "values_list": [
      "frpm.county name.orange"
    ],
    "original_question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
    "question": "What is the highest eligible free rate for K-12 students in the schools in Oranze County?",
    "original_SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Orange",
      "typo_substitution": "Oranze"
    },
    "new_question_correct_value": "What is the highest eligible free rate for K-12 students in the schools in Orange County?"
  },
  {
    "SQL": "SELECT department FROM major WHERE college = 'College of Science'",
    "tables": [
      "major"
    ],
    "columns": [
      "major.department",
      "major.college"
    ],
    "values": [
      {
        "table": "major",
        "column": "college",
        "value": "College of Science",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "major.college.college of humanities and social sciences"
    ],
    "original_question": "List all of the College of Humanities and Social Sciences' departments.",
    "question": "List all of the Collefe of Science' departments.",
    "original_SQL": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "changes_information": {
      "original_value": "College of Science",
      "typo_substitution": "Collefe of Science"
    },
    "new_question_correct_value": "List all of the College of Science' departments."
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Katowice' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Katowice",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the Katowica tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Katowice",
      "typo_substitution": "Katowica"
    },
    "new_question_correct_value": "Find the name of the winner who has the highest rank points and participated in the Katowice tourney."
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Katowice' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Katowice",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the Katowica tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Katowice",
      "typo_substitution": "Katowica"
    },
    "new_question_correct_value": "What is the name of the winner with the most rank points who participated in the Katowice tournament?"
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.first_name",
      "attendance.link_to_member",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "first_name",
        "value": "Maya",
        "condition": "="
      },
      {
        "table": "member",
        "column": "last_name",
        "value": "Mclean",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "member.first_name.maya",
      "member.last_name.mclean"
    ],
    "original_question": "Please list the event names of all the events attended by Maya Mclean.",
    "question": "Please list the event names of all the events attended by Maya Mcleen.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
    "changes_information": {
      "original_value": "Mclean",
      "typo_substitution": "Mcleen"
    },
    "new_question_correct_value": "Please list the event names of all the events attended by Maya Mclean."
  },
  {
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Capital Plaza Museum'",
    "tables": [
      "museum"
    ],
    "columns": [
      "museum.num_of_staff",
      "museum.name",
      "museum.open_year"
    ],
    "values": [
      {
        "table": "museum",
        "column": "name",
        "value": "Capital Plaza Museum",
        "condition": "="
      }
    ],
    "db_id": "museum_visit",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "museum.name.plaza museum"
    ],
    "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "question": "What are the opening year and staff number of the museum named Capitel Plaza Museum?",
    "original_SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "changes_information": {
      "original_value": "Capital Plaza Museum",
      "typo_substitution": "Capitel Plaza Museum"
    },
    "new_question_correct_value": "What are the opening year and staff number of the museum named Capital Plaza Museum?"
  },
  {
    "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Wisconsin'",
    "tables": [
      "owners",
      "dogs"
    ],
    "columns": [
      "owners.state",
      "dogs.owner_id",
      "dogs.name",
      "owners.first_name",
      "owners.owner_id"
    ],
    "values": [
      {
        "table": "owners",
        "column": "state",
        "value": "Wisconsin",
        "condition": "="
      }
    ],
    "db_id": "dog_kennels",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "owners.state.wisconsin"
    ],
    "original_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "question": "Which dogs are owned by someone who lives in Wiscansin? List the owner's first name and the dog's name.",
    "original_SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "changes_information": {
      "original_value": "Wisconsin",
      "typo_substitution": "Wiscansin"
    },
    "new_question_correct_value": "Which dogs are owned by someone who lives in Wisconsin? List the owner's first name and the dog's name."
  },
  {
    "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Wisconsin'",
    "tables": [
      "owners",
      "dogs"
    ],
    "columns": [
      "owners.state",
      "dogs.owner_id",
      "dogs.name",
      "owners.first_name",
      "owners.owner_id"
    ],
    "values": [
      {
        "table": "owners",
        "column": "state",
        "value": "Wisconsin",
        "condition": "="
      }
    ],
    "db_id": "dog_kennels",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "owners.state.wisconsin"
    ],
    "original_question": "Find the first names of owners living in Virginia and the names of dogs they own.",
    "question": "Find the first names of owners living in Wiscansin and the names of dogs they own.",
    "original_SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "changes_information": {
      "original_value": "Wisconsin",
      "typo_substitution": "Wiscansin"
    },
    "new_question_correct_value": "Find the first names of owners living in Wisconsin and the names of dogs they own."
  },
  {
    "SQL": "select other_details from paragraphs where paragraph_text like 'Somalia'",
    "tables": [
      "paragraphs"
    ],
    "columns": [
      "paragraphs.other_details",
      "paragraphs.paragraph_text"
    ],
    "values": [
      {
        "table": "paragraphs",
        "column": "paragraph_text",
        "value": "Somalia",
        "condition": "LIKE"
      }
    ],
    "db_id": "cre_Doc_Template_Mgt",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "paragraphs.paragraph_text.somalia"
    ],
    "original_question": "Show paragraph details for paragraph with text 'Korea ' .",
    "question": "Show paragraph details for paragraph with text 'Sonalia ' .",
    "original_SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
    "changes_information": {
      "original_value": "Somalia",
      "typo_substitution": "Sonalia"
    },
    "new_question_correct_value": "Show paragraph details for paragraph with text 'Somalia ' ."
  },
  {
    "SQL": "select other_details from paragraphs where paragraph_text like 'Somalia'",
    "tables": [
      "paragraphs"
    ],
    "columns": [
      "paragraphs.other_details",
      "paragraphs.paragraph_text"
    ],
    "values": [
      {
        "table": "paragraphs",
        "column": "paragraph_text",
        "value": "Somalia",
        "condition": "LIKE"
      }
    ],
    "db_id": "cre_Doc_Template_Mgt",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "paragraphs.paragraph_text.somalia"
    ],
    "original_question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "question": "What are the details for the paragraph that includes the text 'Sonalia ' ?",
    "original_SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
    "changes_information": {
      "original_value": "Somalia",
      "typo_substitution": "Sonalia"
    },
    "new_question_correct_value": "What are the details for the paragraph that includes the text 'Somalia ' ?"
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Abrahim Gonzalez?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Abraham Gonzalez?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.heading_accuracy",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "values_list": [
      "player.player_name.francois affolter"
    ],
    "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "question": "What is the football player Abrahim Gonzalez header's finishing rate on 18/09/2014?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "What is the football player Abraham Gonzalez header's finishing rate on 18/09/2014?"
  },
  {
    "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez' AND strftime('%Y', t2.date) = '2011'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "values_list": [
      "player.player_name.gabriel tamas"
    ],
    "original_question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "question": "What is the overall rating of the football player Abrahim Gonzalez in year 2011?",
    "original_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "What is the overall rating of the football player Abraham Gonzalez in year 2011?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Abrahim Gonzalez\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Abraham Gonzalez\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Abrahim Gonzalez's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "What is Abraham Gonzalez's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Abrahim Gonzalez?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "What's the heading accuracy of Abraham Gonzalez?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Abrahim Gonzalez?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "Which foot is preferred by Abraham Gonzalez?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
    "values_list": [
      "player.player_name.francesco parravicini"
    ],
    "original_question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "question": "What was the potiential for Abrahim Gonzalez on 2010/8/30?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "What was the potiential for Abraham Gonzalez on 2010/8/30?"
  },
  {
    "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.defensive_work_rate",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
    "values_list": [
      "player.player_name.kevin berigaud"
    ],
    "original_question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
    "question": "Tell the defensive work rate for Abrahim Gonzalez on 2013/2/22.",
    "original_SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "Tell the defensive work rate for Abraham Gonzalez on 2013/2/22."
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Abraham Gonzalez' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Abrahim Gonzalez have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_substitution": "Abrahim Gonzalez"
    },
    "new_question_correct_value": "When was the first time did Abraham Gonzalez have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Cyrano de Bergerac'",
    "tables": [
      "program",
      "director"
    ],
    "columns": [
      "program.title",
      "program.director_id",
      "director.director_id",
      "director.name"
    ],
    "values": [
      {
        "table": "program",
        "column": "title",
        "value": "Cyrano de Bergerac",
        "condition": "="
      }
    ],
    "db_id": "bbc_channels",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "program.title.cyrano_de_bergerac"
    ],
    "original_question": "What is the name of the director who is in the \"Dracula\" program?",
    "question": "What is the name of the director who is in the \"Cyrano de Bergerad\" program?",
    "original_SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "changes_information": {
      "original_value": "Cyrano de Bergerac",
      "typo_substitution": "Cyrano de Bergerad"
    },
    "new_question_correct_value": "What is the name of the director who is in the \"Cyrano de Bergerac\" program?"
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Titan Books'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Titan Books",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by Titen Books by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "Titan Books",
      "typo_substitution": "Titen Books"
    },
    "new_question_correct_value": "Rank heroes published by Titan Books by their height in descending order."
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Titan Books' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Titan Books",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from Titen Books by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "Titan Books",
      "typo_substitution": "Titen Books"
    },
    "new_question_correct_value": "Rank superheroes from Titan Books by their eye color popularity, starting with the most common color."
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Titan Books'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Titan Books",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of Titen Books.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "Titan Books",
      "typo_substitution": "Titen Books"
    },
    "new_question_correct_value": "Give the publisher ID of Titan Books."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Titan Books' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Titan Books",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in Titen Books.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "Titan Books",
      "typo_substitution": "Titen Books"
    },
    "new_question_correct_value": "Identify the heaviest superhero in Titan Books."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Flora Colossus'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Flora Colossus",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.flora_colossus"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the Flora Colussus superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "Flora Colossus",
      "typo_substitution": "Flora Colussus"
    },
    "new_question_correct_value": "Give the name of the Flora Colossus superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Flora Colossus'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Flora Colossus",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.flora_colossus"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of Flora Colussus superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "Flora Colossus",
      "typo_substitution": "Flora Colussus"
    },
    "new_question_correct_value": "List down at least five full name of Flora Colossus superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Flora Colossus'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Flora Colossus",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "values_list": [
      "race.race.flora_colossus"
    ],
    "original_question": "Provide the full names of vampire heroes.",
    "question": "Provide the full names of Flora Colussus heroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "changes_information": {
      "original_value": "Flora Colossus",
      "typo_substitution": "Flora Colussus"
    },
    "new_question_correct_value": "Provide the full names of Flora Colossus heroes."
  },
  {
    "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Eugene')",
    "tables": [
      "sailors"
    ],
    "columns": [
      "sailors.rating",
      "sailors.name"
    ],
    "values": [
      {
        "table": "sailors",
        "column": "name",
        "value": "Eugene",
        "condition": "="
      },
      {
        "table": "",
        "column": "name",
        "value": "Luis",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "sailors.name.eugene",
      ".name.luis"
    ],
    "original_question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Eugena?",
    "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
    "changes_information": {
      "original_value": "Eugene",
      "typo_substitution": "Eugena"
    },
    "new_question_correct_value": "What is the name of all sailors whose rating is higher than any sailor named Eugene?"
  },
  {
    "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Eugene')",
    "tables": [
      "sailors"
    ],
    "columns": [
      "sailors.rating",
      "sailors.name"
    ],
    "values": [
      {
        "table": "sailors",
        "column": "name",
        "value": "Eugene",
        "condition": "="
      },
      {
        "table": "",
        "column": "name",
        "value": "Luis",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "sailors.name.eugene",
      ".name.luis"
    ],
    "original_question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Eugena?",
    "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
    "changes_information": {
      "original_value": "Eugene",
      "typo_substitution": "Eugena"
    },
    "new_question_correct_value": "What are the sailors' names, the ones whose rating is higher than any sailor named Eugene?"
  },
  {
    "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Eugene')",
    "tables": [
      "sailors"
    ],
    "columns": [
      "sailors.rating",
      "sailors.name"
    ],
    "values": [
      {
        "table": "sailors",
        "column": "name",
        "value": "Eugene",
        "condition": "="
      },
      {
        "table": "",
        "column": "name",
        "value": "Luis",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "sailors.name.eugene",
      ".name.luis"
    ],
    "original_question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Eugena?",
    "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
    "changes_information": {
      "original_value": "Eugene",
      "typo_substitution": "Eugena"
    },
    "new_question_correct_value": "What is the name of all sailors whose rating is higher than all sailors named Eugene?"
  },
  {
    "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Eugene')",
    "tables": [
      "sailors"
    ],
    "columns": [
      "sailors.rating",
      "sailors.name"
    ],
    "values": [
      {
        "table": "sailors",
        "column": "name",
        "value": "Eugene",
        "condition": "="
      },
      {
        "table": "",
        "column": "name",
        "value": "Luis",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "sailors.name.eugene",
      ".name.luis"
    ],
    "original_question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "question": "What are the names of all sailors with a higher rating than every sailor named Eugena?",
    "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
    "changes_information": {
      "original_value": "Eugene",
      "typo_substitution": "Eugena"
    },
    "new_question_correct_value": "What are the names of all sailors with a higher rating than every sailor named Eugene?"
  },
  {
    "SQL": "SELECT sname FROM satscores WHERE cname = 'Santa Cruz' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "tables": [
      "satscores"
    ],
    "columns": [
      "satscores.cname",
      "satscores.numtsttakr",
      "satscores.sname"
    ],
    "values": [
      {
        "table": "satscores",
        "column": "cname",
        "value": "Santa Cruz",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "satscores.cname.contra costa"
    ],
    "original_question": "Which school in Contra Costa has the highest number of test takers?",
    "question": "Which school in Senta Cruz has the highest number of test takers?",
    "original_SQL": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "changes_information": {
      "original_value": "Santa Cruz",
      "typo_substitution": "Senta Cruz"
    },
    "new_question_correct_value": "Which school in Santa Cruz has the highest number of test takers?"
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Douglas'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Douglas",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.douglas"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Dougles. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Douglas",
      "typo_substitution": "Dougles"
    },
    "new_question_correct_value": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Douglas. List the district code of the school."
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Valley Springs' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "Valley Springs",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.valley_springs"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of Vallet Springs?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Valley Springs",
      "typo_substitution": "Vallet Springs"
    },
    "new_question_correct_value": "What is the most common type of grade span served in the city of Valley Springs?"
  },
  {
    "SQL": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'Dance from Moldova'",
    "tables": [
      "songs"
    ],
    "columns": [
      "songs.english_translation",
      "songs.original_artist",
      "songs.name"
    ],
    "values": [
      {
        "table": "songs",
        "column": "english_translation",
        "value": "Dance from Moldova",
        "condition": "="
      }
    ],
    "db_id": "sing_contest",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "songs.english_translation.all the streets of love"
    ],
    "original_question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "question": "What are the names and original artists of the song whose English translation is 'Dance from Moldava'?",
    "original_SQL": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'",
    "changes_information": {
      "original_value": "Dance from Moldova",
      "typo_substitution": "Dance from Moldava"
    },
    "new_question_correct_value": "What are the names and original artists of the song whose English translation is 'Dance from Moldova'?"
  },
  {
    "SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Valley Village'",
    "tables": [
      "store"
    ],
    "columns": [
      "store.parking",
      "store.neighborhood",
      "store.name"
    ],
    "values": [
      {
        "table": "store",
        "column": "neighborhood",
        "value": "Valley Village",
        "condition": "="
      }
    ],
    "db_id": "headphone_store",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "store.neighborhood.valley_village"
    ],
    "original_question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "question": "List name and parking info for the stores in the Vallet Village neighborhood.",
    "original_SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
    "changes_information": {
      "original_value": "Valley Village",
      "typo_substitution": "Vallet Village"
    },
    "new_question_correct_value": "List name and parking info for the stores in the Valley Village neighborhood."
  },
  {
    "SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Valley Village'",
    "tables": [
      "store"
    ],
    "columns": [
      "store.parking",
      "store.neighborhood",
      "store.name"
    ],
    "values": [
      {
        "table": "store",
        "column": "neighborhood",
        "value": "Valley Village",
        "condition": "="
      }
    ],
    "db_id": "headphone_store",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "store.neighborhood.valley_village"
    ],
    "original_question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "question": "Which stores are located in the \"Vallet Village\" neighborhood? Return their names and parking information.",
    "original_SQL": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
    "changes_information": {
      "original_value": "Valley Village",
      "typo_substitution": "Vallet Village"
    },
    "new_question_correct_value": "Which stores are located in the \"Valley Village\" neighborhood? Return their names and parking information."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Bernhard Baker'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Bernhard Baker",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Bernhard Bazer?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Bernhard Baker",
      "typo_substitution": "Bernhard Bazer"
    },
    "new_question_correct_value": "What is the eyes colour of Bernhard Baker?"
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Bernhard Baker'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Bernhard Baker",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Bernhard Bazer.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Bernhard Baker",
      "typo_substitution": "Bernhard Bazer"
    },
    "new_question_correct_value": "Provide the hero name and race of Bernhard Baker."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Bernhard Baker'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Bernhard Baker",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Bernhard Bazer.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Bernhard Baker",
      "typo_substitution": "Bernhard Bazer"
    },
    "new_question_correct_value": "List the powers of Bernhard Baker."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Bernhard Baker'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Bernhard Baker",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Bernhard Bazer as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Bernhard Baker",
      "typo_substitution": "Bernhard Bazer"
    },
    "new_question_correct_value": "Provide the eye colour of the superhero who has Bernhard Baker as their full name."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Bernhard Baker'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Bernhard Baker",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Bernhard Bazer as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Bernhard Baker",
      "typo_substitution": "Bernhard Bazer"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Bernhard Baker as their full name?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Bernhard Baker'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Bernhard Baker",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Bernhard Bazer.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Bernhard Baker",
      "typo_substitution": "Bernhard Bazer"
    },
    "new_question_correct_value": "Name the superhero, otherwise known as Bernhard Baker."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "Please list all the superpowers of 3-D Man.",
    "question": "Please list all the superpowers of Azazei.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "Please list all the superpowers of Azazel."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of Azazei's skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "What is the colour of Azazel's skin?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "Who is the publisher of Sauron?",
    "question": "Who is the publisher of Azazei?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "Who is the publisher of Azazel?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of Azazei?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "What is the publisher's name of Azazel?"
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is Azazei's race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "What is Azazel's race?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "Provide the superpowers of the superhero called Deathlok.",
    "question": "Provide the superpowers of the superhero called Azazei.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "Provide the superpowers of the superhero called Azazel."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero Azazei.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "Indicate the attribute value of superhero Azazel."
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero Azazei belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "Which group does superhero Azazel belong to?"
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of Azazei hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "What is the gender of Azazel hero?"
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of Azazei?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "What are the race and alignment of Azazel?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "What is Abomination's superpower?",
    "question": "What is Azazei's superpower?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "What is Azazel's superpower?"
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of Azazei's attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "State all of Azazel's attributes along with their values."
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named Azazei.",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "Give the alignment and superpowers of the superhero named Azazel."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down Azazei's superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "List down Azazel's superpowers."
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Azazel' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the Azazei.",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "Identify the weakest attribute of the Azazel."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "What is Abomination's eye colour?",
    "question": "What is Azazei's eye colour?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "What is Azazel's eye colour?"
  },
  {
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Azazel'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "Provide the full name of the superhero named Alien.",
    "question": "Provide the full name of the superhero named Azazei.",
    "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "Provide the full name of the superhero named Azazel."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named Azazei.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "List the attribute value of the superhero named Azazel."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Azazel'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Azazel",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.azazel"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of Azazei.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "Azazel",
      "typo_substitution": "Azazei"
    },
    "new_question_correct_value": "Give the eye colour of Azazel."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Elemental Transmogrification",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Elementel Transmogrification'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Elemental Transmogrification",
      "typo_substitution": "Elementel Transmogrification"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Elemental Transmogrification'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Elemental Transmogrification",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Elementel Transmogrification?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Elemental Transmogrification",
      "typo_substitution": "Elementel Transmogrification"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Elemental Transmogrification?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Elemental Transmogrification",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.elemental_transmogrification"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Elementel Transmogrification power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Elemental Transmogrification",
      "typo_substitution": "Elementel Transmogrification"
    },
    "new_question_correct_value": "List the name of superheroes with Elemental Transmogrification power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Elemental Transmogrification'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Elemental Transmogrification",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.elemental_transmogrification"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Elementel Transmogrification power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Elemental Transmogrification",
      "typo_substitution": "Elementel Transmogrification"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Elemental Transmogrification power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Elemental Transmogrification'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Elemental Transmogrification",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.elemental_transmogrification"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Elementel Transmogrification?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Elemental Transmogrification",
      "typo_substitution": "Elementel Transmogrification"
    },
    "new_question_correct_value": "What is the power ID of Elemental Transmogrification?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Elemental Transmogrification'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Elemental Transmogrification",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Elementel Transmogrification.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Elemental Transmogrification",
      "typo_substitution": "Elementel Transmogrification"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Elemental Transmogrification."
  },
  {
    "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'independence'",
    "tables": [
      "tags",
      "posts"
    ],
    "columns": [
      "posts.id",
      "tags.tagname",
      "posts.body",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "independence",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
    "values_list": [
      "tags.tagname.independence"
    ],
    "original_question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "question": "From which post is the tag \"independance\" excerpted from? Please give the body of the post.",
    "original_SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "changes_information": {
      "original_value": "independence",
      "typo_substitution": "independance"
    },
    "new_question_correct_value": "From which post is the tag \"independence\" excerpted from? Please give the body of the post."
  },
  {
    "SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'independence'",
    "tables": [
      "tags",
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "tags.excerptpostid",
      "posts.owneruserid",
      "users.location",
      "users.id",
      "users.displayname",
      "tags.tagname"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "independence",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
    "values_list": [
      "tags.tagname.independence"
    ],
    "original_question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "question": "Mention the display name and location of the user who owned the excerpt post with independance tag.",
    "original_SQL": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "changes_information": {
      "original_value": "independence",
      "typo_substitution": "independance"
    },
    "new_question_correct_value": "Mention the display name and location of the user who owned the excerpt post with independence tag."
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'independence'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "independence",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.independence"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named independance?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "independence",
      "typo_substitution": "independance"
    },
    "new_question_correct_value": "What is the excerpt post ID and wiki post ID of the tag named independence?"
  },
  {
    "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'AC Ajaccio'",
    "tables": [
      "team"
    ],
    "columns": [
      "team.team_short_name",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "AC Ajaccio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
    "values_list": [
      "team.team_long_name.queens park rangers"
    ],
    "original_question": "What is the short name of the football team Queens Park Rangers?",
    "question": "What is the short name of the football team AC Ajacclo?",
    "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "changes_information": {
      "original_value": "AC Ajaccio",
      "typo_substitution": "AC Ajacclo"
    },
    "new_question_correct_value": "What is the short name of the football team AC Ajaccio?"
  },
  {
    "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'AC Ajaccio'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team_attributes.team_fifa_api_id",
      "team.team_fifa_api_id",
      "team_attributes.buildupplaypositioningclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "AC Ajaccio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "values_list": [
      "team.team_long_name.ado den haag"
    ],
    "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "question": "What is the AC Ajacclo team freedom of movement in the 1st two thirds of the pitch?",
    "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "changes_information": {
      "original_value": "AC Ajaccio",
      "typo_substitution": "AC Ajacclo"
    },
    "new_question_correct_value": "What is the AC Ajaccio team freedom of movement in the 1st two thirds of the pitch?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "AC Ajaccio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "values_list": [
      "team.team_long_name.ac_ajaccio"
    ],
    "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "question": "What is AC Ajacclo's highest chance creation passing score and what is it classified as?",
    "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "changes_information": {
      "original_value": "AC Ajaccio",
      "typo_substitution": "AC Ajacclo"
    },
    "new_question_correct_value": "What is AC Ajaccio's highest chance creation passing score and what is it classified as?"
  },
  {
    "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplayspeedclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "AC Ajaccio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
    "values_list": [
      "team.team_long_name.willem ii"
    ],
    "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "question": "What was the build up play speed class for \"AC Ajacclo\" on 2011/2/22?",
    "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "changes_information": {
      "original_value": "AC Ajaccio",
      "typo_substitution": "AC Ajacclo"
    },
    "new_question_correct_value": "What was the build up play speed class for \"AC Ajaccio\" on 2011/2/22?"
  },
  {
    "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "AC Ajaccio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "values_list": [
      "team.team_long_name.pec zwolle"
    ],
    "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "question": "State the chance creation passing class for \"AC Ajacclo\" on 2013/9/20.",
    "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "changes_information": {
      "original_value": "AC Ajaccio",
      "typo_substitution": "AC Ajacclo"
    },
    "new_question_correct_value": "State the chance creation passing class for \"AC Ajaccio\" on 2013/9/20."
  },
  {
    "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'AC Ajaccio' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team.team_long_name",
      "team_attributes.chancecreationcrossingclass"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "AC Ajaccio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "values_list": [
      "team.team_long_name.hull city"
    ],
    "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "question": "What was the chance creation crossing class for \"AC Ajacclo\" on 2010/2/22?",
    "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "changes_information": {
      "original_value": "AC Ajaccio",
      "typo_substitution": "AC Ajacclo"
    },
    "new_question_correct_value": "What was the chance creation crossing class for \"AC Ajaccio\" on 2010/2/22?"
  },
  {
    "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'AC Ajaccio'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team.team_long_name",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.team_api_id"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "AC Ajaccio",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "values_list": [
      "team.team_long_name.ksv cercle brugge"
    ],
    "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "question": "Does the AC Ajacclo team have a slow, balanced or fast speed class?",
    "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "changes_information": {
      "original_value": "AC Ajaccio",
      "typo_substitution": "AC Ajacclo"
    },
    "new_question_correct_value": "Does the AC Ajaccio team have a slow, balanced or fast speed class?"
  },
  {
    "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Aurora University'",
    "tables": [
      "major",
      "major_ranking",
      "university"
    ],
    "columns": [
      "major_ranking.university_id",
      "major_ranking.major_id",
      "major_ranking.rank",
      "university.university_name",
      "major.major_id",
      "major.major_name",
      "university.university_id"
    ],
    "values": [
      {
        "table": "university",
        "column": "university_name",
        "value": "Aurora University",
        "condition": "="
      }
    ],
    "db_id": "university_rank",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "university.university_name.augustana college"
    ],
    "original_question": "Show all majors and major ranks for the university with name Augustana College.",
    "question": "Show all majors and major ranks for the university with name Auroro University.",
    "original_SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "changes_information": {
      "original_value": "Aurora University",
      "typo_substitution": "Auroro University"
    },
    "new_question_correct_value": "Show all majors and major ranks for the university with name Aurora University."
  },
  {
    "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Aurora University'",
    "tables": [
      "major",
      "major_ranking",
      "university"
    ],
    "columns": [
      "major_ranking.university_id",
      "major_ranking.major_id",
      "major_ranking.rank",
      "university.university_name",
      "major.major_id",
      "major.major_name",
      "university.university_id"
    ],
    "values": [
      {
        "table": "university",
        "column": "university_name",
        "value": "Aurora University",
        "condition": "="
      }
    ],
    "db_id": "university_rank",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "university.university_name.augustana college"
    ],
    "original_question": "What are the ranks and names of all majors at Augustana College?",
    "question": "What are the ranks and names of all majors at Auroro University?",
    "original_SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "changes_information": {
      "original_value": "Aurora University",
      "typo_substitution": "Auroro University"
    },
    "new_question_correct_value": "What are the ranks and names of all majors at Aurora University?"
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Bernie Perez'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.bernie_perez"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Bernie Perex.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    },
    "new_question_correct_value": "Please list the names of the badges obtained by Bernie Perez."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.bernie_perez"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Bernie Perex\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    },
    "new_question_correct_value": "For the user whose display name is \"Bernie Perez\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.bernie_perez"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Bernie Perex' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    },
    "new_question_correct_value": "What is the badge name that user 'Bernie Perez' obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.bernie_perez"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Bernie Perex\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    },
    "new_question_correct_value": "What is the name of badge that the user whose display name is \"Bernie Perez\" obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.bernie_perez"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Bernie Perex\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    },
    "new_question_correct_value": "State the name of badge that the user whose display name is \"Bernie Perez\" obtained."
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Bernie Perez' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.bernie_perez"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Bernie Perex.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    },
    "new_question_correct_value": "Identify the latest badge awarded to the user with the display name Bernie Perez."
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Bernie Perez'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.bernie_perez"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Bernie Perex' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'Bernie Perez' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Bernie Perez'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Bernie Perex'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'Bernie Perez'?"
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Bernie Perez'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.bernie_perez"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Bernie Perex' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    },
    "new_question_correct_value": "When did the user known as 'Bernie Perez' create his or her account?"
  },
  {
    "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Antonio';",
    "tables": [
      "users",
      "addresses"
    ],
    "columns": [
      "users.first_name",
      "addresses.country",
      "users.user_address_id",
      "addresses.address_id"
    ],
    "values": [
      {
        "table": "users",
        "column": "first_name",
        "value": "Antonio",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "users.first_name.antonio"
    ],
    "original_question": "In which country does the user with first name Robbie live?",
    "question": "In which country does the user with first name Antinio live?",
    "original_SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
    "changes_information": {
      "original_value": "Antonio",
      "typo_substitution": "Antinio"
    },
    "new_question_correct_value": "In which country does the user with first name Antonio live?"
  },
  {
    "SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Antonio';",
    "tables": [
      "users",
      "addresses"
    ],
    "columns": [
      "users.first_name",
      "addresses.country",
      "users.user_address_id",
      "addresses.address_id"
    ],
    "values": [
      {
        "table": "users",
        "column": "first_name",
        "value": "Antonio",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "users.first_name.antonio"
    ],
    "original_question": "Return the country in which the user with first name Robbie lives.",
    "question": "Return the country in which the user with first name Antinio lives.",
    "original_SQL": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
    "changes_information": {
      "original_value": "Antonio",
      "typo_substitution": "Antinio"
    },
    "new_question_correct_value": "Return the country in which the user with first name Antonio lives."
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'North Omer'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "North Omer",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code of the address in the city Port Chelsea?",
    "question": "What is the zip code of the address in the city North Oemr?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "North Omer",
      "typo_transposition": "North Oemr"
    },
    "new_question_correct_value": "What is the zip code of the address in the city North Omer?"
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'North Omer'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "North Omer",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code for Port Chelsea?",
    "question": "What is the zip code for North Oemr?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "North Omer",
      "typo_transposition": "North Oemr"
    },
    "new_question_correct_value": "What is the zip code for North Omer?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Tumbleweed' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Tumbleweed",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.tumbleweed"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Tumbelweed.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Tumbleweed",
      "typo_transposition": "Tumbelweed"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Tumbleweed.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Tumbleweed'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Tumbleweed",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.tumbleweed"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Tumbelweed Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Tumbleweed",
      "typo_transposition": "Tumbelweed"
    },
    "new_question_correct_value": "List all the name of users that obtained the Tumbleweed Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Tumbleweed'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Tumbleweed",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.tumbleweed"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Tumbelweed badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Tumbleweed",
      "typo_transposition": "Tumbelweed"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Tumbleweed badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Tumbleweed' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Tumbleweed",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.tumbleweed"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Tumbelweed badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Tumbleweed",
      "typo_transposition": "Tumbelweed"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Tumbleweed badge?"
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'cadillac' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "cadillac",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.cadillac"
    ],
    "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "question": "For model cadillca, how many cylinders does the car with the least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "cadillac",
      "typo_transposition": "cadillca"
    },
    "new_question_correct_value": "For model cadillac, how many cylinders does the car with the least accelerate have?"
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'cadillac' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "cadillac",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.cadillac"
    ],
    "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "question": "For a cadillca model, how many cylinders does the version with least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "cadillac",
      "typo_transposition": "cadillca"
    },
    "new_question_correct_value": "For a cadillac model, how many cylinders does the version with least accelerate have?"
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Greg Staples'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Gerg Staples.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_transposition": "Gerg Staples"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Greg Staples."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Greg Staples'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Gerg Staples cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_transposition": "Gerg Staples"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Greg Staples cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Greg Staples' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Gerg Staples artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_transposition": "Gerg Staples"
    },
    "new_question_correct_value": "Is there any card from Greg Staples artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Greg Staples'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Gerg Staples created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_transposition": "Gerg Staples"
    },
    "new_question_correct_value": "What kind of printing is on the card that Greg Staples created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Greg Staples' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Gerg Staples? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_transposition": "Gerg Staples"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Greg Staples? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Greg Staples'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Greg Staples",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Gerg Staples worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Greg Staples",
      "typo_transposition": "Gerg Staples"
    },
    "new_question_correct_value": "List all the frame styles and cards Greg Staples worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Morbid'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Morbid",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.morbid"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Morbdi?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Morbid",
      "typo_transposition": "Morbdi"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Morbid?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Celestial Messenger'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Celestail Messenger'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "What is the keyword found on card 'Celestial Messenger'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.celestial_messenger"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Celestail Messenger\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Celestial Messenger\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Celestail Messenger\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "What is the status of card \"Celestial Messenger\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Celestail Messenger\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "What is the type of card \"Celestial Messenger\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Celestail Messenger\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "What is the rule of playing card \"Celestial Messenger\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Celestial Messenger'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Celestail Messenger.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "Write down the ruling of Celestial Messenger."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Celestial Messenger'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Celestail Messenger\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Celestial Messenger\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Celestial Messenger'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Celestail Messenger\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "Did the set of cards with \"Celestial Messenger\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Celestial Messenger'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.celestial_messenger"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Celestail Messenger' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "When was the ruling for the card 'Celestial Messenger' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Celestial Messenger'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.celestial_messenger"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Celestail Messenger\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Celestial Messenger\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Celestial Messenger' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Celestial Messenger",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Celestail Messenger\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Celestial Messenger",
      "typo_transposition": "Celestail Messenger"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Celestial Messenger\" is in?"
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Mana Source'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Mana Source",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Mnaa Source and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Mana Source",
      "typo_transposition": "Mnaa Source"
    },
    "new_question_correct_value": "List down the name of cards with original types of Mana Source and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Mana Source' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Mana Source",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.mana_source",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the Mnaa Source cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Mana Source",
      "typo_transposition": "Mnaa Source"
    },
    "new_question_correct_value": "Among the Mana Source cards, which are black color and comes with foreign languague translation?"
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Michael Chang",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michale Chang?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Michael Chang",
      "typo_transposition": "Michale Chang"
    },
    "new_question_correct_value": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?"
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Michael Chang",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michale Chang?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Michael Chang",
      "typo_transposition": "Michale Chang"
    },
    "new_question_correct_value": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?"
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Adam Beechen",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question": "which countries' tv channels are playing some cartoon written by Adam Beecehn?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Adam Beechen",
      "typo_transposition": "Adam Beecehn"
    },
    "new_question_correct_value": "which countries' tv channels are playing some cartoon written by Adam Beechen?"
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Adam Beechen",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by Adam Beecehn?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Adam Beechen",
      "typo_transposition": "Adam Beecehn"
    },
    "new_question_correct_value": "What are the countries that have cartoons on TV that were written by Adam Beechen?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Marina Bay Street Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Mraina Bay Street Circuit be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Marina Bay Street Circuit",
      "typo_transposition": "Mraina Bay Street Circuit"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Marina Bay Street Circuit be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Marina Bay Street Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Mraina Bay Street Circuit?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Marina Bay Street Circuit",
      "typo_transposition": "Mraina Bay Street Circuit"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Marina Bay Street Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Marina Bay Street Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Mraina Bay Street Circuit.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Marina Bay Street Circuit",
      "typo_transposition": "Mraina Bay Street Circuit"
    },
    "new_question_correct_value": "Please list the time of the races held on Marina Bay Street Circuit."
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Marina Bay Street Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Mraina Bay Street Circuit?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Marina Bay Street Circuit",
      "typo_transposition": "Mraina Bay Street Circuit"
    },
    "new_question_correct_value": "What's the location coordinates of Marina Bay Street Circuit?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Marina Bay Street Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Mraina Bay Street Circuit?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Marina Bay Street Circuit",
      "typo_transposition": "Mraina Bay Street Circuit"
    },
    "new_question_correct_value": "What's the reference name of Marina Bay Street Circuit?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Marina Bay Street Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Mraina Bay Street Circuit was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Marina Bay Street Circuit",
      "typo_transposition": "Mraina Bay Street Circuit"
    },
    "new_question_correct_value": "Please list all the years that Marina Bay Street Circuit was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Marina Bay Street Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Marina Bay Street Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Mraina Bay Street Circuit.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Marina Bay Street Circuit",
      "typo_transposition": "Mraina Bay Street Circuit"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Marina Bay Street Circuit."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Marina Bay Street Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.marina_bay_street_circuit"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Mraina Bay Street Circuit circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Marina Bay Street Circuit",
      "typo_transposition": "Mraina Bay Street Circuit"
    },
    "new_question_correct_value": "In which location does the Marina Bay Street Circuit circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Eloise'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Eloise",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.eloise"
    ],
    "original_question": "Show agency details for client with detail 'Mac'.",
    "question": "Show agency details for client with detail 'Eloies'.",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Eloise",
      "typo_transposition": "Eloies"
    },
    "new_question_correct_value": "Show agency details for client with detail 'Eloise'."
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Eloise'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Eloise",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.eloise"
    ],
    "original_question": "What are the agency details for clients with the detail Mac?",
    "question": "What are the agency details for clients with the detail Eloies?",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Eloise",
      "typo_transposition": "Eloies"
    },
    "new_question_correct_value": "What are the agency details for clients with the detail Eloise?"
  },
  {
    "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Indigo'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "colour.colour",
      "superhero.height_cm"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Indigo",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
    "values_list": [
      "colour.colour.indigo"
    ],
    "original_question": "Provide the heights of the heroes whose eye colours are amber.",
    "question": "Provide the heights of the heroes whose eye colours are Indiog.",
    "original_SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
    "changes_information": {
      "original_value": "Indigo",
      "typo_transposition": "Indiog"
    },
    "new_question_correct_value": "Provide the heights of the heroes whose eye colours are Indigo."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Indigo' LIMIT 5",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "colour.id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Indigo",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
    "values_list": [
      "colour.colour.indigo"
    ],
    "original_question": "List down at least five full names of superheroes with blue eyes.",
    "question": "List down at least five full names of superheroes with Indiog eyes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "changes_information": {
      "original_value": "Indigo",
      "typo_transposition": "Indiog"
    },
    "new_question_correct_value": "List down at least five full names of superheroes with Indigo eyes."
  },
  {
    "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Indigo' AND T4.gender = 'Male'",
    "tables": [
      "race",
      "superhero",
      "gender",
      "colour"
    ],
    "columns": [
      "gender.gender",
      "race.id",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Indigo",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Male",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
    "values_list": [
      "colour.colour.indigo",
      "gender.gender.male"
    ],
    "original_question": "Give the race of the blue-haired male superhero.",
    "question": "Give the race of the Indiog-haired male superhero.",
    "original_SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "changes_information": {
      "original_value": "Indigo",
      "typo_transposition": "Indiog"
    },
    "new_question_correct_value": "Give the race of the Indigo-haired male superhero."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Indigo'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.full_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "weight_kg",
        "value": "100",
        "condition": "<"
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Indigo",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weight less than 100 refers to weight_kg < 100",
    "values_list": [
      "superhero.weight_kg.100",
      "colour.colour.indigo"
    ],
    "original_question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
    "question": "In superheroes with weight less than 100, list the full name of the superheroes with Indiog eyes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
    "changes_information": {
      "original_value": "Indigo",
      "typo_transposition": "Indiog"
    },
    "new_question_correct_value": "In superheroes with weight less than 100, list the full name of the superheroes with Indigo eyes."
  },
  {
    "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Connaught'",
    "tables": [
      "constructors",
      "constructorstandings"
    ],
    "columns": [
      "constructorstandings.constructorid",
      "constructors.name",
      "constructorstandings.position",
      "constructors.constructorid"
    ],
    "values": [
      {
        "table": "constructors",
        "column": "name",
        "value": "Connaught",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Renault is a name of constructor;",
    "values_list": [
      "constructors.name.connaught"
    ],
    "original_question": "Please list the positions of the circuits built by the constructor Renault.",
    "question": "Please list the positions of the circuits built by the constructor Connuaght.",
    "original_SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "changes_information": {
      "original_value": "Connaught",
      "typo_transposition": "Connuaght"
    },
    "new_question_correct_value": "Please list the positions of the circuits built by the constructor Connaught."
  },
  {
    "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Liberec'",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "district.a2",
      "account.account_id",
      "account.district_id",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a2",
        "value": "Liberec",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "A2 refers to the names of districts.",
    "values_list": [
      "district.a2.liberec"
    ],
    "original_question": "List account ID and account opening date for accounts from 'Prachatice'.",
    "question": "List account ID and account opening date for accounts from 'Libeerc'.",
    "original_SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
    "changes_information": {
      "original_value": "Liberec",
      "typo_transposition": "Libeerc"
    },
    "new_question_correct_value": "List account ID and account opening date for accounts from 'Liberec'."
  },
  {
    "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Ransom'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "What is the parent document of document owned by Marlin? List the document id.",
    "question": "What is the parent document of document owned by Ransmo? List the document id.",
    "original_SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "What is the parent document of document owned by Ransom? List the document id."
  },
  {
    "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Ransom'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "What are the document object ids of the objects owned by Marlin?",
    "question": "What are the document object ids of the objects owned by Ransmo?",
    "original_SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "What are the document object ids of the objects owned by Ransom?"
  },
  {
    "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Ransom'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "question": "What is the owner of the parent document of document owned by 'Ransmo'?",
    "original_SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "What is the owner of the parent document of document owned by 'Ransom'?"
  },
  {
    "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Ransom'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "question": "Who is the owner of the parent document of every documents where 'Ransmo' is the owner?",
    "original_SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "Who is the owner of the parent document of every documents where 'Ransom' is the owner?"
  },
  {
    "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Ransom'",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "List all document which is related to document owned by Ransom . List the document id .",
    "question": "List all document which is related to document owned by Ransmo . List the document id .",
    "original_SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "List all document which is related to document owned by Ransom . List the document id ."
  },
  {
    "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Ransom'",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "What are the document object ids of the related to the document owned by Ransom ?",
    "question": "What are the document object ids of the related to the document owned by Ransmo ?",
    "original_SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "What are the document object ids of the related to the document owned by Ransom ?"
  },
  {
    "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Ransom';",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.related_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "question": "What are the different owners of documents that are related to ones owned by Ransmo?",
    "original_SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "What are the different owners of documents that are related to ones owned by Ransom?"
  },
  {
    "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Ransom'",
    "tables": [
      "document_subsets",
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.owner",
      "document_subset_members.document_subset_id",
      "document_subsets.document_subset_name",
      "document_objects.document_object_id",
      "document_subsets.document_subset_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "question": "Which unique subset does document owned by Ransmo belong to? List the subset name.",
    "original_SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "Which unique subset does document owned by Ransom belong to? List the subset name."
  },
  {
    "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Ransom'",
    "tables": [
      "document_subsets",
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.owner",
      "document_subset_members.document_subset_id",
      "document_subsets.document_subset_name",
      "document_objects.document_object_id",
      "document_subsets.document_subset_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "What are the different subset names of all documents owned by Braeden?",
    "question": "What are the different subset names of all documents owned by Ransmo?",
    "original_SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "What are the different subset names of all documents owned by Ransom?"
  },
  {
    "SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'Ransom'",
    "tables": [
      "collections",
      "document_objects",
      "documents_in_collections"
    ],
    "columns": [
      "collections.collection_id",
      "document_objects.owner",
      "documents_in_collections.document_object_id",
      "collections.collection_name",
      "document_objects.document_object_id",
      "documents_in_collections.collection_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "question": "List the Collection Name that document owned by 'Ransmo ' belong to .",
    "original_SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "List the Collection Name that document owned by 'Ransom ' belong to ."
  },
  {
    "SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
    "tables": [
      "collections",
      "document_objects",
      "documents_in_collections"
    ],
    "columns": [
      "collections.collection_id",
      "document_objects.owner",
      "documents_in_collections.document_object_id",
      "collections.collection_name",
      "document_objects.document_object_id",
      "documents_in_collections.collection_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "What is the collection name of a document owned by 'Ransom'?",
    "question": "What is the collection name of a document owned by 'Ransmo'?",
    "original_SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "What is the collection name of a document owned by 'Ransom'?"
  },
  {
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'collagen disease'",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.id",
      "examination.diagnosis",
      "examination.examination date"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "collagen disease",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "values_list": [
      "examination.diagnosis.collagen_disease"
    ],
    "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "question": "Lists all patients by ID who were diagnosed with colalgen disease's and had their exams between 01/01/197 and 12/31/1997.",
    "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "changes_information": {
      "original_value": "collagen disease",
      "typo_transposition": "colalgen disease"
    },
    "new_question_correct_value": "Lists all patients by ID who were diagnosed with collagen disease's and had their exams between 01/01/197 and 12/31/1997."
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Avatar de la puissance'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Avatar de la puissance",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Avatra de la puissance\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Avatar de la puissance",
      "typo_transposition": "Avatra de la puissance"
    },
    "new_question_correct_value": "Which foreign language used by \"Avatar de la puissance\"?"
  },
  {
    "SQL": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Meringue')",
    "tables": [
      "goods"
    ],
    "columns": [
      "goods.id",
      "goods.food",
      "goods.price"
    ],
    "values": [
      {
        "table": "goods",
        "column": "food",
        "value": "Meringue",
        "condition": "="
      },
      {
        "table": "",
        "column": "food",
        "value": "Croissant",
        "condition": "="
      }
    ],
    "db_id": "bakery_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "goods.food.meringue",
      ".food.croissant"
    ],
    "original_question": "What are the ids of Cookies whose price is lower than any Croissant?",
    "question": "What are the ids of Cookies whose price is lower than any Mreingue?",
    "original_SQL": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
    "changes_information": {
      "original_value": "Meringue",
      "typo_transposition": "Mreingue"
    },
    "new_question_correct_value": "What are the ids of Cookies whose price is lower than any Meringue?"
  },
  {
    "SQL": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Meringue')",
    "tables": [
      "goods"
    ],
    "columns": [
      "goods.id",
      "goods.food",
      "goods.price"
    ],
    "values": [
      {
        "table": "goods",
        "column": "food",
        "value": "Meringue",
        "condition": "="
      },
      {
        "table": "",
        "column": "food",
        "value": "Croissant",
        "condition": "="
      }
    ],
    "db_id": "bakery_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "goods.food.meringue",
      ".food.croissant"
    ],
    "original_question": "Give the ids of cookes that are cheaper than any croissant.",
    "question": "Give the ids of cookes that are cheaper than any Mreingue.",
    "original_SQL": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
    "changes_information": {
      "original_value": "Meringue",
      "typo_transposition": "Mreingue"
    },
    "new_question_correct_value": "Give the ids of cookes that are cheaper than any Meringue."
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Kaohsiung' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Kaohsiung",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "question": "What are the country code and first name of the players who won in both tourney Kaohsiugn and Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "Kaohsiung",
      "typo_transposition": "Kaohsiugn"
    },
    "new_question_correct_value": "What are the country code and first name of the players who won in both tourney Kaohsiung and Australian Open?"
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Kaohsiung' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Kaohsiung",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "question": "What are the first names and country codes for players who won both the Kaohsiugn and the Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "Kaohsiung",
      "typo_transposition": "Kaohsiugn"
    },
    "new_question_correct_value": "What are the first names and country codes for players who won both the Kaohsiung and the Australian Open?"
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Kaohsiung' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Kaohsiung",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the Kaohsiugn tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kaohsiung",
      "typo_transposition": "Kaohsiugn"
    },
    "new_question_correct_value": "Find the name of the winner who has the highest rank points and participated in the Kaohsiung tourney."
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Kaohsiung' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Kaohsiung",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the Kaohsiugn tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kaohsiung",
      "typo_transposition": "Kaohsiugn"
    },
    "new_question_correct_value": "What is the name of the winner with the most rank points who participated in the Kaohsiung tournament?"
  },
  {
    "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.major_id",
      "major.major_name",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "first_name",
        "value": "Phillip",
        "condition": "="
      },
      {
        "table": "member",
        "column": "last_name",
        "value": "Cullen",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of major refers to major_name",
    "values_list": [
      "member.first_name.phillip",
      "member.last_name.cullen"
    ],
    "original_question": "State the name of major that Phillip Cullen has joined.",
    "question": "State the name of major that Phillip Culeln has joined.",
    "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
    "changes_information": {
      "original_value": "Cullen",
      "typo_transposition": "Culeln"
    },
    "new_question_correct_value": "State the name of major that Phillip Cullen has joined."
  },
  {
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Capital Plaza Museum'",
    "tables": [
      "museum"
    ],
    "columns": [
      "museum.num_of_staff",
      "museum.name",
      "museum.open_year"
    ],
    "values": [
      {
        "table": "museum",
        "column": "name",
        "value": "Capital Plaza Museum",
        "condition": "="
      }
    ],
    "db_id": "museum_visit",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "museum.name.plaza museum"
    ],
    "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "question": "What are the opening year and staff number of the museum named Capitla Plaza Museum?",
    "original_SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "changes_information": {
      "original_value": "Capital Plaza Museum",
      "typo_transposition": "Capitla Plaza Museum"
    },
    "new_question_correct_value": "What are the opening year and staff number of the museum named Capital Plaza Museum?"
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Abrahma Gonzalez?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Abraham Gonzalez?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.heading_accuracy",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "values_list": [
      "player.player_name.francois affolter"
    ],
    "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "question": "What is the football player Abrahma Gonzalez header's finishing rate on 18/09/2014?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "What is the football player Abraham Gonzalez header's finishing rate on 18/09/2014?"
  },
  {
    "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez' AND strftime('%Y', t2.date) = '2011'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.overall_rating",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "values_list": [
      "player.player_name.gabriel tamas"
    ],
    "original_question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "question": "What is the overall rating of the football player Abrahma Gonzalez in year 2011?",
    "original_SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "What is the overall rating of the football player Abraham Gonzalez in year 2011?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Abrahma Gonzalez\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Abraham Gonzalez\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Abrahma Gonzalez's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "What is Abraham Gonzalez's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Abrahma Gonzalez?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "What's the heading accuracy of Abraham Gonzalez?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Abrahma Gonzalez?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "Which foot is preferred by Abraham Gonzalez?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
    "values_list": [
      "player.player_name.francesco parravicini"
    ],
    "original_question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "question": "What was the potiential for Abrahma Gonzalez on 2010/8/30?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "What was the potiential for Abraham Gonzalez on 2010/8/30?"
  },
  {
    "SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Abraham Gonzalez'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.defensive_work_rate",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
    "values_list": [
      "player.player_name.kevin berigaud"
    ],
    "original_question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
    "question": "Tell the defensive work rate for Abrahma Gonzalez on 2013/2/22.",
    "original_SQL": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "Tell the defensive work rate for Abraham Gonzalez on 2013/2/22."
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Abraham Gonzalez' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Abraham Gonzalez",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Abrahma Gonzalez have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Abraham Gonzalez",
      "typo_transposition": "Abrahma Gonzalez"
    },
    "new_question_correct_value": "When was the first time did Abraham Gonzalez have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Rebellion'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by Rebellino by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_transposition": "Rebellino"
    },
    "new_question_correct_value": "Rank heroes published by Rebellion by their height in descending order."
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Rebellion' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from Rebellino by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_transposition": "Rebellino"
    },
    "new_question_correct_value": "Rank superheroes from Rebellion by their eye color popularity, starting with the most common color."
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Rebellion'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of Rebellino.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_transposition": "Rebellino"
    },
    "new_question_correct_value": "Give the publisher ID of Rebellion."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Rebellion' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.durability"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most durability published by Rebellino?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_transposition": "Rebellino"
    },
    "new_question_correct_value": "Which superhero has the most durability published by Rebellion?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Rebellion' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Rebellion",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in Rebellino.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "Rebellion",
      "typo_transposition": "Rebellino"
    },
    "new_question_correct_value": "Identify the heaviest superhero in Rebellion."
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Patricia'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Patricia",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.patricia"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Patriica. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Patricia",
      "typo_transposition": "Patriica"
    },
    "new_question_correct_value": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Patricia. List the district code of the school."
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Castro Valley' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "Castro Valley",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.castro_valley"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of Castor Valley?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Castro Valley",
      "typo_transposition": "Castor Valley"
    },
    "new_question_correct_value": "What is the most common type of grade span served in the city of Castro Valley?"
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Carnage'",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "cards.setcode",
      "cards.name",
      "set_translations.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "Carnage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
    "question": "Please list the names of the cards in the set \"Cranage\".",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "Carnage",
      "typo_transposition": "Cranage"
    },
    "new_question_correct_value": "Please list the names of the cards in the set \"Carnage\"."
  },
  {
    "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Carnage'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.basesetsize"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "Carnage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
    "question": "How many cards are there in the base set of \"Cranage\"?",
    "original_SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "Carnage",
      "typo_transposition": "Cranage"
    },
    "new_question_correct_value": "How many cards are there in the base set of \"Carnage\"?"
  },
  {
    "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Carnage'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "Carnage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
    "question": "What is the expansion type of the set \"Cranage\"?",
    "original_SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "Carnage",
      "typo_transposition": "Cranage"
    },
    "new_question_correct_value": "What is the expansion type of the set \"Carnage\"?"
  },
  {
    "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Carnage'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.basesetsize"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "Carnage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
    "values_list": [
      "set_translations.translation.rinascita di alara"
    ],
    "original_question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
    "question": "What is the number of cards are there in the set of \"Cranage\"?",
    "original_SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'",
    "changes_information": {
      "original_value": "Carnage",
      "typo_transposition": "Cranage"
    },
    "new_question_correct_value": "What is the number of cards are there in the set of \"Carnage\"?"
  },
  {
    "SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Carnage'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "Carnage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'",
    "values_list": [
      "set_translations.translation.ola de fr\u00edo"
    ],
    "original_question": "What is the release date for the set \"Ola de fr\u00edo\"?",
    "question": "What is the release date for the set \"Cranage\"?",
    "original_SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'",
    "changes_information": {
      "original_value": "Carnage",
      "typo_transposition": "Cranage"
    },
    "new_question_correct_value": "What is the release date for the set \"Carnage\"?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Arena Beginner Set' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Arena Beginner Set",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "values_list": [
      "sets.name.arena_beginner_set"
    ],
    "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the name of the cards in the set Aerna Beginner Set with the highest converted mana cost.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "changes_information": {
      "original_value": "Arena Beginner Set",
      "typo_transposition": "Aerna Beginner Set"
    },
    "new_question_correct_value": "Please list the name of the cards in the set Arena Beginner Set with the highest converted mana cost."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Arena Beginner Set' AND T1.number = 4",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.name",
      "cards.number",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Arena Beginner Set",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "number",
        "value": "4",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
    "values_list": [
      "sets.name.arena_beginner_set",
      "cards.number.4"
    ],
    "original_question": "What is card number 4 in the set Coldsnap?",
    "question": "What is card number 4 in the set Aerna Beginner Set?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "changes_information": {
      "original_value": "Arena Beginner Set",
      "typo_transposition": "Aerna Beginner Set"
    },
    "new_question_correct_value": "What is card number 4 in the set Arena Beginner Set?"
  },
  {
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Arena Beginner Set'",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.name",
      "sets.parentcode"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Arena Beginner Set",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "values_list": [
      "sets.name.commander 2014 oversized"
    ],
    "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "question": "For the set \"Aerna Beginner Set\" , give its parent code.",
    "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "changes_information": {
      "original_value": "Arena Beginner Set",
      "typo_transposition": "Aerna Beginner Set"
    },
    "new_question_correct_value": "For the set \"Arena Beginner Set\" , give its parent code."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Barbara Gordon'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Barbara Gordon",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Barabra Gordon?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Barbara Gordon",
      "typo_transposition": "Barabra Gordon"
    },
    "new_question_correct_value": "What is the eyes colour of Barbara Gordon?"
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Barbara Gordon'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Barbara Gordon",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Barabra Gordon.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Barbara Gordon",
      "typo_transposition": "Barabra Gordon"
    },
    "new_question_correct_value": "Provide the hero name and race of Barbara Gordon."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Barbara Gordon'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Barbara Gordon",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Barabra Gordon.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Barbara Gordon",
      "typo_transposition": "Barabra Gordon"
    },
    "new_question_correct_value": "List the powers of Barbara Gordon."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Barbara Gordon'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Barbara Gordon",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Barabra Gordon as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Barbara Gordon",
      "typo_transposition": "Barabra Gordon"
    },
    "new_question_correct_value": "Provide the eye colour of the superhero who has Barbara Gordon as their full name."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Barbara Gordon'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Barbara Gordon",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Barabra Gordon as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Barbara Gordon",
      "typo_transposition": "Barabra Gordon"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Barbara Gordon as their full name?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Barbara Gordon'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Barbara Gordon",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Barabra Gordon.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Barbara Gordon",
      "typo_transposition": "Barabra Gordon"
    },
    "new_question_correct_value": "Name the superhero, otherwise known as Barbara Gordon."
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "Port Chelsea",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code of the address in the city Port Chelsea?",
    "question": "What is the zip code of the address in the city The Port Chelsea?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "Port Chelsea",
      "word_addition": "The Port Chelsea"
    },
    "new_question_correct_value": "What is the zip code of the address in the city Port Chelsea?"
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "Port Chelsea",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code for Port Chelsea?",
    "question": "What is the zip code for The Port Chelsea?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "Port Chelsea",
      "word_addition": "The Port Chelsea"
    },
    "new_question_correct_value": "What is the zip code for Port Chelsea?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "tables": [
      "superhero",
      "alignment"
    ],
    "columns": [
      "superhero.superhero_name",
      "alignment.alignment",
      "superhero.alignment_id",
      "alignment.id"
    ],
    "values": [
      {
        "table": "alignment",
        "column": "alignment",
        "value": "Neutral",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
    "values_list": [
      "alignment.alignment.neutral"
    ],
    "original_question": "Describe the names of neutral alignment superheroes.",
    "question": "Describe the names of Generally Neutral alignment superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "changes_information": {
      "original_value": "Neutral",
      "word_addition": "Generally Neutral"
    },
    "new_question_correct_value": "Describe the names of Neutral alignment superheroes."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Nice Answer' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Nice Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.nice_answer"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'A Nice Answer.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Nice Answer",
      "word_addition": "A Nice Answer"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Nice Answer.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Nice Answer'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Nice Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.nice_answer"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the A Nice Answer Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Nice Answer",
      "word_addition": "A Nice Answer"
    },
    "new_question_correct_value": "List all the name of users that obtained the Nice Answer Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Nice Answer'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Nice Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.nice_answer"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the A Nice Answer badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Nice Answer",
      "word_addition": "A Nice Answer"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Nice Answer badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Nice Answer' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Nice Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.nice_answer"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first A Nice Answer badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Nice Answer",
      "word_addition": "A Nice Answer"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Nice Answer badge?"
  },
  {
    "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Mars'",
    "tables": [
      "boats",
      "sailors",
      "reserves"
    ],
    "columns": [
      "sailors.sid",
      "sailors.name",
      "boats.bid",
      "reserves.bid",
      "boats.name",
      "reserves.sid"
    ],
    "values": [
      {
        "table": "boats",
        "column": "name",
        "value": "Mars",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boats.name.mars"
    ],
    "original_question": "Find the names of sailors who reserved boat with the name Melon.",
    "question": "Find the names of sailors who reserved boat with the name The Mars.",
    "original_SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
    "changes_information": {
      "original_value": "Mars",
      "word_addition": "The Mars"
    },
    "new_question_correct_value": "Find the names of sailors who reserved boat with the name Mars."
  },
  {
    "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Mars'",
    "tables": [
      "boats",
      "sailors",
      "reserves"
    ],
    "columns": [
      "sailors.sid",
      "sailors.name",
      "boats.bid",
      "reserves.bid",
      "boats.name",
      "reserves.sid"
    ],
    "values": [
      {
        "table": "boats",
        "column": "name",
        "value": "Mars",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boats.name.mars"
    ],
    "original_question": "What are the names of sailors who reserved a boat with the name Melon?",
    "question": "What are the names of sailors who reserved a boat with the name The Mars?",
    "original_SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
    "changes_information": {
      "original_value": "Mars",
      "word_addition": "The Mars"
    },
    "new_question_correct_value": "What are the names of sailors who reserved a boat with the name Mars?"
  },
  {
    "SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
    "tables": [
      "disp",
      "card"
    ],
    "columns": [
      "card.type",
      "card.disp_id",
      "disp.account_id",
      "disp.disp_id"
    ],
    "values": [
      {
        "table": "card",
        "column": "type",
        "value": "gold",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "card.type.gold"
    ],
    "original_question": "What are the accounts that have gold credit cards?",
    "question": "What are the accounts that have Gold Card credit cards?",
    "original_SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
    "changes_information": {
      "original_value": "gold",
      "word_addition": "Gold Card"
    },
    "new_question_correct_value": "What are the accounts that have gold credit cards?"
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Pete Venters'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Mr. Pete Venters.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Pete Venters."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Pete Venters'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Mr. Pete Venters cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Pete Venters cost in total?"
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Pete Venters' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Mr. Pete Venters artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    },
    "new_question_correct_value": "Is there any card from Pete Venters artist in pauper format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Pete Venters'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Mr. Pete Venters created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    },
    "new_question_correct_value": "What kind of printing is on the card that Pete Venters created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Pete Venters' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Mr. Pete Venters? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Pete Venters? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Pete Venters'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Mr. Pete Venters worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    },
    "new_question_correct_value": "List all the frame styles and cards Pete Venters worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.availability",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "arena",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.arena"
    ],
    "original_question": "Lists all types of cards available in arena.",
    "question": "Lists all types of cards available in The arena.",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "arena",
      "word_addition": "The arena"
    },
    "new_question_correct_value": "Lists all types of cards available in arena."
  },
  {
    "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.bordercolor",
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "arena",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "bordercolor",
        "value": "black",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.arena",
      "cards.bordercolor.black"
    ],
    "original_question": "List the artists who illustrated cards with black borders which are available only in arena.",
    "question": "List the artists who illustrated cards with black borders which are available only in The arena.",
    "original_SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "changes_information": {
      "original_value": "arena",
      "word_addition": "The arena"
    },
    "new_question_correct_value": "List the artists who illustrated cards with black borders which are available only in arena."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'First strike'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "First strike",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.first_strike"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of The First strike?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "First strike",
      "word_addition": "The First strike"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of First strike?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Fear'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'The Fear'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    },
    "new_question_correct_value": "What is the keyword found on card 'Fear'?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Fear'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"The Fear\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    },
    "new_question_correct_value": "What is the status of card \"Fear\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Fear'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"The Fear\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    },
    "new_question_correct_value": "What is the type of card \"Fear\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Fear'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"The Fear\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    },
    "new_question_correct_value": "What is the rule of playing card \"Fear\"?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Fear'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"The Fear\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Fear\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Fear'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"The Fear\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    },
    "new_question_correct_value": "Did the set of cards with \"Fear\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Fear'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.fear"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"The Fear\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Fear\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fear' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"The Fear\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Fear\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fear' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"The Fear\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Fear\" is in it."
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Sorcery",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of The Sorcery and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Sorcery",
      "word_addition": "The Sorcery"
    },
    "new_question_correct_value": "List down the name of cards with original types of Sorcery and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Sorcery",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.sorcery",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the The Sorcery cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Sorcery",
      "word_addition": "The Sorcery"
    },
    "new_question_correct_value": "Among the Sorcery cards, which are black color and comes with foreign languague translation?"
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.rarity",
      "rulings.date",
      "cards.name",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "uncommon",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "uncommon refers to rarity = 'uncommon';",
    "values_list": [
      "cards.rarity.uncommon"
    ],
    "original_question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
    "question": "Pick 3 cards with rarity of quite uncommon, list down name these cards according to ascending order of it's ruling date.",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
    "changes_information": {
      "original_value": "uncommon",
      "word_addition": "quite uncommon"
    },
    "new_question_correct_value": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date."
  },
  {
    "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "legalities.status",
      "cards.originalreleasedate",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "rarity",
        "value": "uncommon",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
    "values_list": [
      "legalities.status.legal",
      "cards.rarity.uncommon"
    ],
    "original_question": "When was the oldest mythic card released and what are its legal play formats?",
    "question": "When was the oldest quite uncommon card released and what are its legal play formats?",
    "original_SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "changes_information": {
      "original_value": "uncommon",
      "word_addition": "quite uncommon"
    },
    "new_question_correct_value": "When was the oldest uncommon card released and what are its legal play formats?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Legendary Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.side",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "type",
        "value": "Legendary Artifact",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "vintage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "values_list": [
      "cards.type.legendary_artifact",
      "legalities.format.vintage"
    ],
    "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "question": "For The Legendary Artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "changes_information": {
      "original_value": "Legendary Artifact",
      "word_addition": "The Legendary Artifact"
    },
    "new_question_correct_value": "For Legendary Artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Michael Chang",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Mr. Michael Chang?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Michael Chang",
      "word_addition": "Mr. Michael Chang"
    },
    "new_question_correct_value": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?"
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Michael Chang",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Mr. Michael Chang?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Michael Chang",
      "word_addition": "Mr. Michael Chang"
    },
    "new_question_correct_value": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?"
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Todd Casey",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question": "which countries' tv channels are playing some cartoon written by Mr. Todd Casey?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Todd Casey",
      "word_addition": "Mr. Todd Casey"
    },
    "new_question_correct_value": "which countries' tv channels are playing some cartoon written by Todd Casey?"
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Todd Casey",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by Mr. Todd Casey?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Todd Casey",
      "word_addition": "Mr. Todd Casey"
    },
    "new_question_correct_value": "What are the countries that have cartoons on TV that were written by Todd Casey?"
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Dijon'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Dijon",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.dijon"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in Dijon, France.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Dijon",
      "word_addition": "Dijon, France"
    },
    "new_question_correct_value": "Please list the year during which the race is held on circuits in Dijon."
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Dallas'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Dallas",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.dallas"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in City of Dallas.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Dallas",
      "word_addition": "City of Dallas"
    },
    "new_question_correct_value": "Please list the year during which the race is held on circuits in Dallas."
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Kirsten'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Kirsten",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.kirsten"
    ],
    "original_question": "Show agency details for client with detail 'Mac'.",
    "question": "Show agency details for client with detail 'Ms. Kirsten'.",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Kirsten",
      "word_addition": "Ms. Kirsten"
    },
    "new_question_correct_value": "Show agency details for client with detail 'Kirsten'."
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Kirsten'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Kirsten",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.kirsten"
    ],
    "original_question": "What are the agency details for clients with the detail Mac?",
    "question": "What are the agency details for clients with the detail Ms. Kirsten?",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Kirsten",
      "word_addition": "Ms. Kirsten"
    },
    "new_question_correct_value": "What are the agency details for clients with the detail Kirsten?"
  },
  {
    "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Aston Martin'",
    "tables": [
      "constructors",
      "constructorstandings"
    ],
    "columns": [
      "constructorstandings.constructorid",
      "constructors.name",
      "constructorstandings.position",
      "constructors.constructorid"
    ],
    "values": [
      {
        "table": "constructors",
        "column": "name",
        "value": "Aston Martin",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Renault is a name of constructor;",
    "values_list": [
      "constructors.name.aston_martin"
    ],
    "original_question": "Please list the positions of the circuits built by the constructor Renault.",
    "question": "Please list the positions of the circuits built by the constructor The Aston Martin.",
    "original_SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "changes_information": {
      "original_value": "Aston Martin",
      "word_addition": "The Aston Martin"
    },
    "new_question_correct_value": "Please list the positions of the circuits built by the constructor Aston Martin."
  },
  {
    "SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Oceania' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "tables": [
      "city",
      "countrylanguage",
      "country"
    ],
    "columns": [
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "city.countrycode",
      "country.continent",
      "country.name",
      "country.code",
      "countrylanguage.language",
      "city.name"
    ],
    "values": [
      {
        "table": "country",
        "column": "continent",
        "value": "Oceania",
        "condition": "="
      },
      {
        "table": "countrylanguage",
        "column": "isofficial",
        "value": "T",
        "condition": "="
      },
      {
        "table": "countrylanguage",
        "column": "language",
        "value": "English",
        "condition": "="
      }
    ],
    "db_id": "world_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "country.continent.oceania",
      "countrylanguage.isofficial.t",
      "countrylanguage.language.english"
    ],
    "original_question": "What are the names of cities in Europe for which English is not the official language?",
    "question": "What are the names of cities in The Oceania for which English is not the official language?",
    "original_SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "changes_information": {
      "original_value": "Oceania",
      "word_addition": "The Oceania"
    },
    "new_question_correct_value": "What are the names of cities in Oceania for which English is not the official language?"
  },
  {
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "tables": [
      "courses"
    ],
    "columns": [
      "courses.course_description",
      "courses.course_name"
    ],
    "values": [
      {
        "table": "courses",
        "column": "course_name",
        "value": "math",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "courses.course_name.math"
    ],
    "original_question": "How is the math course described?",
    "question": "How is the Math Course course described?",
    "original_SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "changes_information": {
      "original_value": "math",
      "word_addition": "Math Course"
    },
    "new_question_correct_value": "How is the math course described?"
  },
  {
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "tables": [
      "courses"
    ],
    "columns": [
      "courses.course_description",
      "courses.course_name"
    ],
    "values": [
      {
        "table": "courses",
        "column": "course_name",
        "value": "math",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "courses.course_name.math"
    ],
    "original_question": "What are the descriptions for all the math courses?",
    "question": "What are the descriptions for all the Math Course courses?",
    "original_SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "changes_information": {
      "original_value": "math",
      "word_addition": "Math Course"
    },
    "new_question_correct_value": "What are the descriptions for all the math courses?"
  },
  {
    "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "tables": [
      "students",
      "degree_programs",
      "student_enrolment"
    ],
    "columns": [
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.first_name",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id"
    ],
    "values": [
      {
        "table": "degree_programs",
        "column": "degree_summary_name",
        "value": "Bachelor",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "degree_programs.degree_summary_name.bachelor"
    ],
    "original_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "question": "Who is enrolled in a Bachelor level degree program? List the first name, middle name, last name.",
    "original_SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "changes_information": {
      "original_value": "Bachelor",
      "word_addition": "Bachelor level"
    },
    "new_question_correct_value": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name."
  },
  {
    "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What is the parent document of document owned by Marlin? List the document id.",
    "question": "What is the parent document of document owned by Mr. Marlin? List the document id.",
    "original_SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "What is the parent document of document owned by Marlin? List the document id."
  },
  {
    "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What are the document object ids of the objects owned by Marlin?",
    "question": "What are the document object ids of the objects owned by Mr. Marlin?",
    "original_SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "What are the document object ids of the objects owned by Marlin?"
  },
  {
    "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "question": "What is the owner of the parent document of document owned by 'Mr. Marlin'?",
    "original_SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "What is the owner of the parent document of document owned by 'Marlin'?"
  },
  {
    "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "question": "Who is the owner of the parent document of every documents where 'Mr. Marlin' is the owner?",
    "original_SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?"
  },
  {
    "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Marlin'",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "List all document which is related to document owned by Ransom . List the document id .",
    "question": "List all document which is related to document owned by Mr. Marlin . List the document id .",
    "original_SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "List all document which is related to document owned by Marlin . List the document id ."
  },
  {
    "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Marlin'",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What are the document object ids of the related to the document owned by Ransom ?",
    "question": "What are the document object ids of the related to the document owned by Mr. Marlin ?",
    "original_SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "What are the document object ids of the related to the document owned by Marlin ?"
  },
  {
    "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Marlin';",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.related_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "List all owner of documents that is related to documents owned by Braeden.",
    "question": "List all owner of documents that is related to documents owned by Mr. Marlin.",
    "original_SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "List all owner of documents that is related to documents owned by Marlin."
  },
  {
    "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Marlin';",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.related_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "question": "What are the different owners of documents that are related to ones owned by Mr. Marlin?",
    "original_SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "What are the different owners of documents that are related to ones owned by Marlin?"
  },
  {
    "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Marlin'",
    "tables": [
      "document_subsets",
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.owner",
      "document_subset_members.document_subset_id",
      "document_subsets.document_subset_name",
      "document_objects.document_object_id",
      "document_subsets.document_subset_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "question": "Which unique subset does document owned by Mr. Marlin belong to? List the subset name.",
    "original_SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "Which unique subset does document owned by Marlin belong to? List the subset name."
  },
  {
    "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Marlin'",
    "tables": [
      "document_subsets",
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.owner",
      "document_subset_members.document_subset_id",
      "document_subsets.document_subset_name",
      "document_objects.document_object_id",
      "document_subsets.document_subset_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What are the different subset names of all documents owned by Braeden?",
    "question": "What are the different subset names of all documents owned by Mr. Marlin?",
    "original_SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "What are the different subset names of all documents owned by Marlin?"
  },
  {
    "SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'Marlin'",
    "tables": [
      "collections",
      "document_objects",
      "documents_in_collections"
    ],
    "columns": [
      "collections.collection_id",
      "document_objects.owner",
      "documents_in_collections.document_object_id",
      "collections.collection_name",
      "document_objects.document_object_id",
      "documents_in_collections.collection_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "question": "List the Collection Name that document owned by 'Mr. Marlin ' belong to .",
    "original_SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "List the Collection Name that document owned by 'Marlin ' belong to ."
  },
  {
    "SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Marlin'",
    "tables": [
      "collections",
      "document_objects",
      "documents_in_collections"
    ],
    "columns": [
      "collections.collection_id",
      "document_objects.owner",
      "documents_in_collections.document_object_id",
      "collections.collection_name",
      "document_objects.document_object_id",
      "documents_in_collections.collection_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What is the collection name of a document owned by 'Ransom'?",
    "question": "What is the collection name of a document owned by 'Mr. Marlin'?",
    "original_SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    },
    "new_question_correct_value": "What is the collection name of a document owned by 'Marlin'?"
  },
  {
    "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "tables": [
      "driver"
    ],
    "columns": [
      "driver.citizenship",
      "driver.name"
    ],
    "values": [
      {
        "table": "driver",
        "column": "citizenship",
        "value": "United States",
        "condition": "="
      }
    ],
    "db_id": "vehicle_driver",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "driver.citizenship.united states"
    ],
    "original_question": "What are the names of the drivers who are citizens of the 'United States'?",
    "question": "What are the names of the drivers who are citizens of the 'United States of America'?",
    "original_SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "changes_information": {
      "original_value": "United States",
      "word_addition": "United States of America"
    },
    "new_question_correct_value": "What are the names of the drivers who are citizens of the 'United States'?"
  },
  {
    "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "tables": [
      "driver"
    ],
    "columns": [
      "driver.citizenship",
      "driver.name"
    ],
    "values": [
      {
        "table": "driver",
        "column": "citizenship",
        "value": "United States",
        "condition": "="
      }
    ],
    "db_id": "vehicle_driver",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "driver.citizenship.united states"
    ],
    "original_question": "Return the names of drivers with citizenship from the United States.",
    "question": "Return the names of drivers with citizenship from the United States of America.",
    "original_SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "changes_information": {
      "original_value": "United States",
      "word_addition": "United States of America"
    },
    "new_question_correct_value": "Return the names of drivers with citizenship from the United States."
  },
  {
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'British' ORDER BY dob DESC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.dob",
      "drivers.forename",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "British",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "values_list": [
      "drivers.nationality.british"
    ],
    "original_question": "How old is the youngest Japanese driver? What is his name?",
    "question": "How old is the youngest British England driver? What is his name?",
    "original_SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "changes_information": {
      "original_value": "British",
      "word_addition": "British England"
    },
    "new_question_correct_value": "How old is the youngest British driver? What is his name?"
  },
  {
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'British'",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "British",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Italian refers to nationality = 'italian'",
    "values_list": [
      "drivers.nationality.british"
    ],
    "original_question": "Please list the surnames of all the Italian drivers.",
    "question": "Please list the surnames of all the British England drivers.",
    "original_SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "changes_information": {
      "original_value": "British",
      "word_addition": "British England"
    },
    "new_question_correct_value": "Please list the surnames of all the British drivers."
  },
  {
    "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
    "tables": [
      "pitstops",
      "drivers"
    ],
    "columns": [
      "pitstops.driverid",
      "pitstops.time",
      "drivers.driverid",
      "drivers.nationality",
      "drivers.dob"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "British",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
    "values_list": [
      "drivers.nationality.british"
    ],
    "original_question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
    "question": "List out top 3 British England drivers who were born from 1980-1990 and have the earliest lap time.",
    "original_SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
    "changes_information": {
      "original_value": "British",
      "word_addition": "British England"
    },
    "new_question_correct_value": "List out top 3 British drivers who were born from 1980-1990 and have the earliest lap time."
  },
  {
    "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'British' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.driverref",
      "drivers.dob",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "British",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "values_list": [
      "drivers.nationality.british"
    ],
    "original_question": "Please state the reference name of the oldest German driver.",
    "question": "Please state the reference name of the oldest British England driver.",
    "original_SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "changes_information": {
      "original_value": "British",
      "word_addition": "British England"
    },
    "new_question_correct_value": "Please state the reference name of the oldest British driver."
  },
  {
    "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
    "tables": [
      "pitstops",
      "drivers"
    ],
    "columns": [
      "pitstops.driverid",
      "pitstops.time",
      "drivers.driverid",
      "drivers.nationality",
      "drivers.dob"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "British",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
    "values_list": [
      "drivers.nationality.british"
    ],
    "original_question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
    "question": "List out top 10 British England drivers who were born before 1982 and have the latest lap time.",
    "original_SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
    "changes_information": {
      "original_value": "British",
      "word_addition": "British England"
    },
    "new_question_correct_value": "List out top 10 British drivers who were born before 1982 and have the latest lap time."
  },
  {
    "SQL": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
    "tables": [
      "pitstops",
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "pitstops.driverid",
      "pitstops.duration",
      "drivers.driverid",
      "drivers.forename",
      "drivers.nationality",
      "drivers.dob"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "British",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
    "values_list": [
      "drivers.nationality.british"
    ],
    "original_question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "question": "List down top 3 British England drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "original_SQL": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
    "changes_information": {
      "original_value": "British",
      "word_addition": "British England"
    },
    "new_question_correct_value": "List down top 3 British drivers who has the shortest average pit stop duration and were born between 1980-1985."
  },
  {
    "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.dob",
      "drivers.forename",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "British",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
    "values_list": [
      "drivers.nationality.british"
    ],
    "original_question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
    "question": "What is the full name and date of birth of British England drivers born between 1981 and 1991?",
    "original_SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
    "changes_information": {
      "original_value": "British",
      "word_addition": "British England"
    },
    "new_question_correct_value": "What is the full name and date of birth of British drivers born between 1981 and 1991?"
  },
  {
    "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.forename",
      "drivers.nationality",
      "drivers.url",
      "drivers.dob"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "British",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
    "values_list": [
      "drivers.nationality.british"
    ],
    "original_question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "question": "Find the full name, Wiki Pedia page link, and date of birth of British England drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "original_SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "changes_information": {
      "original_value": "British",
      "word_addition": "British England"
    },
    "new_question_correct_value": "Find the full name, Wiki Pedia page link, and date of birth of British drivers born between 1971 and 1985. List it in descending order of date of birth."
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'April Meeting'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "April Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"The April Meeting\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "April Meeting",
      "word_addition": "The April Meeting"
    },
    "new_question_correct_value": "Give the location for \"April Meeting\"."
  },
  {
    "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Meeting' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "April Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "values_list": [
      "event.event_name.april speaker"
    ],
    "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "question": "Calculate the amount budgeted for 'The April Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "changes_information": {
      "original_value": "April Meeting",
      "word_addition": "The April Meeting"
    },
    "new_question_correct_value": "Calculate the amount budgeted for 'April Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Meeting'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "April Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'The April Meeting' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "April Meeting",
      "word_addition": "The April Meeting"
    },
    "new_question_correct_value": "What category was budgeted for the 'April Meeting' event and how much was the amount budgeted for that category?"
  },
  {
    "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Trinity' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "tables": [
      "frpm"
    ],
    "columns": [
      "frpm.county name",
      "frpm.free meal count (k-12)",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "frpm",
        "column": "county name",
        "value": "Trinity",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "values_list": [
      "frpm.county name.trinity"
    ],
    "original_question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
    "question": "What is the highest eligible free rate for K-12 students in the schools in Trinity County County?",
    "original_SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Trinity",
      "word_addition": "Trinity County"
    },
    "new_question_correct_value": "What is the highest eligible free rate for K-12 students in the schools in Trinity County?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Female' LIMIT 5",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "gender",
        "column": "gender",
        "value": "Female",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
    "values_list": [
      "gender.gender.female"
    ],
    "original_question": "List down at least five superpowers of male superheroes.",
    "question": "List down at least five superpowers of Woman Female superheroes.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
    "changes_information": {
      "original_value": "Female",
      "word_addition": "Woman Female"
    },
    "new_question_correct_value": "List down at least five superpowers of Female superheroes."
  },
  {
    "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "tables": [
      "publisher",
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.skin_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Dark Horse Comics",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Female",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "gender.gender.female"
    ],
    "original_question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "question": "List the eyes, hair and skin colour of all Woman Female superheroes published by Dark Horse Comics.",
    "original_SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "changes_information": {
      "original_value": "Female",
      "word_addition": "Woman Female"
    },
    "new_question_correct_value": "List the eyes, hair and skin colour of all Female superheroes published by Dark Horse Comics."
  },
  {
    "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
    "tables": [
      "hangar"
    ],
    "columns": [
      "hangar.plane_name",
      "hangar.location"
    ],
    "values": [
      {
        "table": "hangar",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "hangar.plane_name.f-14 fighter"
    ],
    "original_question": "Where is the plane F-14 Fighter located?",
    "question": "Where is the plane The Piper Cub located?",
    "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "word_addition": "The Piper Cub"
    },
    "new_question_correct_value": "Where is the plane Piper Cub located?"
  },
  {
    "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
    "tables": [
      "hangar"
    ],
    "columns": [
      "hangar.plane_name",
      "hangar.location"
    ],
    "values": [
      {
        "table": "hangar",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "hangar.plane_name.f-14 fighter"
    ],
    "original_question": "Return the location of the hangar in which F-14 Fighter is located.",
    "question": "Return the location of the hangar in which The Piper Cub is located.",
    "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "word_addition": "The Piper Cub"
    },
    "new_question_correct_value": "Return the location of the hangar in which Piper Cub is located."
  },
  {
    "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "values_list": [
      "cards.rarity.mythic",
      "legalities.format.gladiator",
      "legalities.status.banned"
    ],
    "original_question": "List all the mythic rarity print cards banned in gladiator format.",
    "question": "List all the mythic rarity print cards banned in The Gladiator format.",
    "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "changes_information": {
      "original_value": "gladiator",
      "word_addition": "The Gladiator"
    },
    "new_question_correct_value": "List all the mythic rarity print cards banned in gladiator format."
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'gladiator' AND T1.side IS NULL",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.side",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "type",
        "value": "Artifact",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "values_list": [
      "cards.type.artifact",
      "legalities.format.gladiator"
    ],
    "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for The Gladiator play format.",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "changes_information": {
      "original_value": "gladiator",
      "word_addition": "The Gladiator"
    },
    "new_question_correct_value": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for gladiator play format."
  },
  {
    "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'gladiator'",
    "tables": [
      "cards",
      "legalities",
      "foreign_data"
    ],
    "columns": [
      "legalities.format",
      "foreign_data.uuid",
      "legalities.uuid",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
    "values_list": [
      "legalities.format.gladiator"
    ],
    "original_question": "List down the uuid for legacy cards and the foreign language of these cards.",
    "question": "List down the uuid for The Gladiator cards and the foreign language of these cards.",
    "original_SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
    "changes_information": {
      "original_value": "gladiator",
      "word_addition": "The Gladiator"
    },
    "new_question_correct_value": "List down the uuid for gladiator cards and the foreign language of these cards."
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'gladiator' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Erica Yang",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.gladiator"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Erica Yang artist in The Gladiator format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "gladiator",
      "word_addition": "The Gladiator"
    },
    "new_question_correct_value": "Is there any card from Erica Yang artist in gladiator format and available in paper? If so, indicate its ID."
  },
  {
    "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Legal' AND T1.rarity = 'mythic'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "values_list": [
      "cards.rarity.mythic",
      "legalities.format.gladiator",
      "legalities.status.legal"
    ],
    "original_question": "List all the mythic rarity print cards banned in gladiator format.",
    "question": "List all the mythic rarity print cards Fully Legal in gladiator format.",
    "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "changes_information": {
      "original_value": "Legal",
      "word_addition": "Fully Legal"
    },
    "new_question_correct_value": "List all the mythic rarity print cards Legal in gladiator format."
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "tables": [
      "rulings",
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.types",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "types",
        "value": "Creature",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
    "values_list": [
      "legalities.status.legal",
      "cards.types.creature"
    ],
    "original_question": "Lists by ID all Creature-type cards with legal status.",
    "question": "Lists by ID all Creature-type cards with Fully Legal status.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "changes_information": {
      "original_value": "Legal",
      "word_addition": "Fully Legal"
    },
    "new_question_correct_value": "Lists by ID all Creature-type cards with Legal status."
  },
  {
    "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "legalities.status",
      "cards.originalreleasedate",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
    "values_list": [
      "legalities.status.legal",
      "cards.rarity.mythic"
    ],
    "original_question": "When was the oldest mythic card released and what are its legal play formats?",
    "question": "When was the oldest mythic card released and what are its Fully Legal play formats?",
    "original_SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "changes_information": {
      "original_value": "Legal",
      "word_addition": "Fully Legal"
    },
    "new_question_correct_value": "When was the oldest mythic card released and what are its Legal play formats?"
  },
  {
    "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Legal' GROUP BY T1.name, T2.format",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.format",
      "legalities.status",
      "cards.name",
      "legalities.uuid",
      "cards.uuid",
      "cards.edhrecrank"
    ],
    "values": [
      {
        "table": "cards",
        "column": "edhrecrank",
        "value": "1",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "values_list": [
      "cards.edhrecrank.1",
      "legalities.status.legal"
    ],
    "original_question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Fully Legal play format.",
    "original_SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "changes_information": {
      "original_value": "Legal",
      "word_addition": "Fully Legal"
    },
    "new_question_correct_value": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Legal play format."
  },
  {
    "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "major.major_id",
      "member.position",
      "major.college"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "LIKE"
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Vice President is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "Which college is the vice president of the Student_Club from?",
    "question": "Which college is the Club President of the Student_Club from?",
    "original_SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    },
    "new_question_correct_value": "Which college is the President of the Student_Club from?"
  },
  {
    "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'President'",
    "tables": [
      "member",
      "income"
    ],
    "columns": [
      "income.link_to_member",
      "member.member_id",
      "member.position",
      "income.amount"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "What is the amount of the funds that the Vice President received?",
    "question": "What is the amount of the funds that the Club President received?",
    "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    },
    "new_question_correct_value": "What is the amount of the funds that the President received?"
  },
  {
    "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "tables": [
      "member",
      "zip_code"
    ],
    "columns": [
      "zip_code.zip_code",
      "zip_code.state",
      "zip_code.city",
      "member.position",
      "member.zip"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club;",
    "values_list": [
      "member.position.president"
    ],
    "original_question": "What city and state did the President of the Student_Club grow up?",
    "question": "What city and state did the Club President of the Student_Club grow up?",
    "original_SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    },
    "new_question_correct_value": "What city and state did the President of the Student_Club grow up?"
  },
  {
    "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the major name for the Vice President of the club.",
    "question": "State the major name for the Club President of the club.",
    "original_SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    },
    "new_question_correct_value": "State the major name for the President of the club."
  },
  {
    "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.department",
      "major.major_id",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club",
    "values_list": [
      "member.position.president"
    ],
    "original_question": "Which department was the President of the club in?",
    "question": "Which department was the Club President of the club in?",
    "original_SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    },
    "new_question_correct_value": "Which department was the President of the club in?"
  },
  {
    "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'President'",
    "tables": [
      "member",
      "expense"
    ],
    "columns": [
      "expense.link_to_member",
      "member.member_id",
      "member.position",
      "expense.expense_id",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "List all the expenses incurred by the vice president.",
    "question": "List all the expenses incurred by the Club President.",
    "original_SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    },
    "new_question_correct_value": "List all the expenses incurred by the President."
  },
  {
    "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'President'",
    "tables": [
      "member"
    ],
    "columns": [
      "member.email",
      "member.first_name",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
    "values_list": [
      "member.position.president"
    ],
    "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
    "question": "Provide the full name and email address of the Student_Club's Club President.",
    "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    },
    "new_question_correct_value": "Provide the full name and email address of the Student_Club's President."
  },
  {
    "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the name of major that Vice President has joined.",
    "question": "State the name of major that Club President has joined.",
    "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    },
    "new_question_correct_value": "State the name of major that President has joined."
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.major_id",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last name",
    "values_list": [
      "member.position.president"
    ],
    "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "question": "Write the full name of the club member with the position of 'Club President' and list which college the club member belongs to.",
    "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    },
    "new_question_correct_value": "Write the full name of the club member with the position of 'President' and list which college the club member belongs to."
  },
  {
    "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Large'",
    "tables": [
      "member",
      "expense"
    ],
    "columns": [
      "expense.link_to_member",
      "member.t_shirt_size",
      "expense.expense_description",
      "member.member_id"
    ],
    "values": [
      {
        "table": "member",
        "column": "t_shirt_size",
        "value": "Large",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
    "values_list": [
      "member.t_shirt_size.large"
    ],
    "original_question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
    "question": "What kind of expenses incurred by members who have Size Large in size of tee shirt?",
    "original_SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "changes_information": {
      "original_value": "Large",
      "word_addition": "Size Large"
    },
    "new_question_correct_value": "What kind of expenses incurred by members who have Large in size of tee shirt?"
  },
  {
    "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "tables": [
      "movietheaters",
      "movies"
    ],
    "columns": [
      "movies.code",
      "movietheaters.movie",
      "movies.title",
      "movietheaters.name"
    ],
    "values": [
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      }
    ],
    "db_id": "movie_2",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "movietheaters.name.odeon"
    ],
    "original_question": "Find the title of the movie that is played in the Odeon theater.",
    "question": "Find the title of the movie that is played in the The Odeon theater.",
    "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "changes_information": {
      "original_value": "Odeon",
      "word_addition": "The Odeon"
    },
    "new_question_correct_value": "Find the title of the movie that is played in the Odeon theater."
  },
  {
    "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "tables": [
      "movietheaters",
      "movies"
    ],
    "columns": [
      "movies.code",
      "movietheaters.movie",
      "movies.title",
      "movietheaters.name"
    ],
    "values": [
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      }
    ],
    "db_id": "movie_2",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "movietheaters.name.odeon"
    ],
    "original_question": "What are the movie titles for ones that are played in the Odeon theater?",
    "question": "What are the movie titles for ones that are played in the The Odeon theater?",
    "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "changes_information": {
      "original_value": "Odeon",
      "word_addition": "The Odeon"
    },
    "new_question_correct_value": "What are the movie titles for ones that are played in the Odeon theater?"
  },
  {
    "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Odeon'",
    "tables": [
      "movietheaters",
      "movies"
    ],
    "columns": [
      "movies.code",
      "movietheaters.movie",
      "movies.title",
      "movietheaters.name"
    ],
    "values": [
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      },
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      }
    ],
    "db_id": "movie_2",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "movietheaters.name.odeon",
      "movietheaters.name.odeon"
    ],
    "original_question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "question": "What are the titles of all the movies that played at the Odeon or The Odeon theater?",
    "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
    "changes_information": {
      "original_value": "Odeon",
      "word_addition": "The Odeon"
    },
    "new_question_correct_value": "What are the titles of all the movies that played at Odeon or The Odeon theater?"
  },
  {
    "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "tables": [
      "movietheaters",
      "movies"
    ],
    "columns": [
      "movies.code",
      "movietheaters.movie",
      "movies.title",
      "movietheaters.name"
    ],
    "values": [
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      },
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      }
    ],
    "db_id": "movie_2",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "movietheaters.name.odeon",
      "movietheaters.name.odeon"
    ],
    "original_question": "What movie is playing at both the Odeon and Imperial theater?",
    "question": "What movie is playing at both the Odeon and The Odeon theater?",
    "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
    "changes_information": {
      "original_value": "Odeon",
      "word_addition": "The Odeon"
    },
    "new_question_correct_value": "What movie is playing at both Odeon and The Odeon theater?"
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "Port Chelsea",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code of the address in the city Port Chelsea?",
    "question": "What is the zip code of the address in the city Chelsea Port?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "Port Chelsea",
      "word_order_change": "Chelsea Port"
    },
    "new_question_correct_value": "What is the zip code of the address in the city Port Chelsea?"
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "Port Chelsea",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code for Port Chelsea?",
    "question": "What is the zip code for Chelsea Port?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "Port Chelsea",
      "word_order_change": "Chelsea Port"
    },
    "new_question_correct_value": "What is the zip code for Port Chelsea?"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Great Answer' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Great Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.great_answer"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Answer Great.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Great Answer",
      "word_order_change": "Answer Great"
    },
    "new_question_correct_value": "Name 10 users with the badge name 'Great Answer.'"
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Great Answer'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Great Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.great_answer"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Answer Great Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Great Answer",
      "word_order_change": "Answer Great"
    },
    "new_question_correct_value": "List all the name of users that obtained the Great Answer Badges."
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Great Answer'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Great Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.great_answer"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Answer Great badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Great Answer",
      "word_order_change": "Answer Great"
    },
    "new_question_correct_value": "Describe the last accessed date and location of the users who received the Great Answer badge."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Great Answer' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Great Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.great_answer"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Answer Great badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Great Answer",
      "word_order_change": "Answer Great"
    },
    "new_question_correct_value": "What is the display name of the user who acquired the first Great Answer badge?"
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Speaker Gifts' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Speaker Gifts' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.speaker_gifts",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Gifts Speaker\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "word_order_change": "Gifts Speaker"
    },
    "new_question_correct_value": "With the biggest budget for the \"Speaker Gifts\", what was the remaining of it?"
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.speaker_gifts"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Gifts Speaker.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "word_order_change": "Gifts Speaker"
    },
    "new_question_correct_value": "Name the event with the highest amount spent on Speaker Gifts."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Speaker Gifts' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.category",
      "budget.link_to_event",
      "budget.budget_id",
      "expense.link_to_budget",
      "event.event_id"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "values_list": [
      "budget.category.speaker_gifts"
    ],
    "original_question": "List the name of events with less than average parking cost.",
    "question": "List the name of events with less than average Gifts Speaker cost.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "word_order_change": "Gifts Speaker"
    },
    "new_question_correct_value": "List the name of events with less than average Speaker Gifts cost."
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Speaker Gifts'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.speaker_gifts"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Gifts Speaker.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "word_order_change": "Gifts Speaker"
    },
    "new_question_correct_value": "List the event names which were budgeted for the Speaker Gifts."
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Gifts Speaker and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "word_order_change": "Gifts Speaker"
    },
    "new_question_correct_value": "Calculate the total amount spent on Speaker Gifts and list the name of the event they were spent on."
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Lorenzo Lanfranconi'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Lorenzo Lanfranconi",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Lanfranconi Lorenzo.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Lorenzo Lanfranconi",
      "word_order_change": "Lanfranconi Lorenzo"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Lorenzo Lanfranconi."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Lorenzo Lanfranconi'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Lorenzo Lanfranconi",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Lanfranconi Lorenzo cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Lorenzo Lanfranconi",
      "word_order_change": "Lanfranconi Lorenzo"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Lorenzo Lanfranconi cost in total?"
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Lorenzo Lanfranconi'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Lorenzo Lanfranconi",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Lanfranconi Lorenzo created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Lorenzo Lanfranconi",
      "word_order_change": "Lanfranconi Lorenzo"
    },
    "new_question_correct_value": "What kind of printing is on the card that Lorenzo Lanfranconi created?"
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Lorenzo Lanfranconi'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Lorenzo Lanfranconi",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Lanfranconi Lorenzo worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Lorenzo Lanfranconi",
      "word_order_change": "Lanfranconi Lorenzo"
    },
    "new_question_correct_value": "List all the frame styles and cards Lorenzo Lanfranconi worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Naya Hushblade'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Hushblade Naya'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    },
    "new_question_correct_value": "What is the keyword found on card 'Naya Hushblade'?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Naya Hushblade'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Hushblade Naya\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    },
    "new_question_correct_value": "What is the status of card \"Naya Hushblade\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Naya Hushblade'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Hushblade Naya\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    },
    "new_question_correct_value": "What is the type of card \"Naya Hushblade\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Naya Hushblade'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Hushblade Naya\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    },
    "new_question_correct_value": "What is the rule of playing card \"Naya Hushblade\"?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Naya Hushblade'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Hushblade Naya\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Naya Hushblade\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Naya Hushblade'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Hushblade Naya\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    },
    "new_question_correct_value": "Did the set of cards with \"Naya Hushblade\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Naya Hushblade'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.naya_hushblade"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Hushblade Naya\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Naya Hushblade\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Naya Hushblade' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Hushblade Naya\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Naya Hushblade\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Naya Hushblade' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Hushblade Naya\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Naya Hushblade\" is in it."
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Legendary Artifact'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Legendary Artifact",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Artifact Legendary and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Legendary Artifact",
      "word_order_change": "Artifact Legendary"
    },
    "new_question_correct_value": "List down the name of cards with original types of Legendary Artifact and the date of rulings for these cards."
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Legendary Artifact' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Legendary Artifact",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.legendary_artifact",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the Artifact Legendary cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Legendary Artifact",
      "word_order_change": "Artifact Legendary"
    },
    "new_question_correct_value": "Among the Legendary Artifact cards, which are black color and comes with foreign languague translation?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Snow Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.side",
      "legalities.format",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "type",
        "value": "Snow Artifact",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "vintage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "values_list": [
      "cards.type.snow_artifact",
      "legalities.format.vintage"
    ],
    "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "question": "For Artifact Snow type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "changes_information": {
      "original_value": "Snow Artifact",
      "word_order_change": "Artifact Snow"
    },
    "new_question_correct_value": "For Snow Artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."
  },
  {
    "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
    "question": "Name the foreign name of the card that has (HOU) set watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
    "changes_information": {
      "original_value": "set (HOU)",
      "word_order_change": "(HOU) set"
    },
    "new_question_correct_value": "Name the foreign name of the card that has (HOU) set watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "foreign_data.flavortext",
      "cards.watermark",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
    "question": "What is the language and flavor text of the card that has (HOU) set watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
    "changes_information": {
      "original_value": "set (HOU)",
      "word_order_change": "(HOU) set"
    },
    "new_question_correct_value": "What is the language and flavor text of the card that has (HOU) set watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
    "question": "Name the foreign name of the card that has (HOU) set watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
    "changes_information": {
      "original_value": "set (HOU)",
      "word_order_change": "(HOU) set"
    },
    "new_question_correct_value": "Name the foreign name of the card that has (HOU) set watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "What is the language of the card that has azorius watermark? List out the type of this card.",
    "question": "What is the language of the card that has (HOU) set watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
    "changes_information": {
      "original_value": "set (HOU)",
      "word_order_change": "(HOU) set"
    },
    "new_question_correct_value": "What is the language of the card that has (HOU) set watermark? List out the type of this card."
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Michael Jelenic'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Michael Jelenic",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question": "which countries' tv channels are playing some cartoon written by Jelenic Michael?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Michael Jelenic",
      "word_order_change": "Jelenic Michael"
    },
    "new_question_correct_value": "which countries' tv channels are playing some cartoon written by Michael Jelenic?"
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Michael Jelenic'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Michael Jelenic",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by Jelenic Michael?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Michael Jelenic",
      "word_order_change": "Jelenic Michael"
    },
    "new_question_correct_value": "What are the countries that have cartoons on TV that were written by Michael Jelenic?"
  },
  {
    "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'South Africa'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.name",
      "circuits.country",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "South Africa",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Germany is a name of country;",
    "values_list": [
      "circuits.country.south_africa"
    ],
    "original_question": "Please give the name of the race held on the circuits in Germany.",
    "question": "Please give the name of the race held on the circuits in Africa South.",
    "original_SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "changes_information": {
      "original_value": "South Africa",
      "word_order_change": "Africa South"
    },
    "new_question_correct_value": "Please give the name of the race held on the circuits in South Africa."
  },
  {
    "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'South Africa'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.name",
      "circuits.country",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "South Africa",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Spain is a name of country;",
    "values_list": [
      "circuits.country.south_africa"
    ],
    "original_question": "Please give the names of the races held on the circuits in Spain.",
    "question": "Please give the names of the races held on the circuits in Africa South.",
    "original_SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "changes_information": {
      "original_value": "South Africa",
      "word_order_change": "Africa South"
    },
    "new_question_correct_value": "Please give the names of the races held on the circuits in South Africa."
  },
  {
    "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'South Africa'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "South Africa",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
    "values_list": [
      "circuits.country.south_africa"
    ],
    "original_question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "question": "How many times the circuits were held in Africa South? Please give their location and coordinates.",
    "original_SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "changes_information": {
      "original_value": "South Africa",
      "word_order_change": "Africa South"
    },
    "new_question_correct_value": "How many times the circuits were held in South Africa? Please give their location and coordinates."
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Marina Bay'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Marina Bay",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.marina_bay"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in Bay Marina.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Marina Bay",
      "word_order_change": "Bay Marina"
    },
    "new_question_correct_value": "Please list the year during which the race is held on circuits in Marina Bay."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Speedway Fuji be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    },
    "new_question_correct_value": "Where can the introduction of the races held on Fuji Speedway be found?"
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Speedway Fuji?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    },
    "new_question_correct_value": "Where can I find the information about the races held on Fuji Speedway?"
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Speedway Fuji.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    },
    "new_question_correct_value": "Please list the time of the races held on Fuji Speedway."
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Fuji Speedway'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Speedway Fuji?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    },
    "new_question_correct_value": "What's the location coordinates of Fuji Speedway?"
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Fuji Speedway'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Speedway Fuji?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    },
    "new_question_correct_value": "What's the reference name of Fuji Speedway?"
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Speedway Fuji was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    },
    "new_question_correct_value": "Please list all the years that Fuji Speedway was used in a Formula_1 race."
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Speedway Fuji.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    },
    "new_question_correct_value": "Please give more information about the Formula_1 races that used the Fuji Speedway."
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Fuji Speedway'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.fuji_speedway"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Speedway Fuji circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    },
    "new_question_correct_value": "In which location does the Fuji Speedway circuit located? Also, find the country and coordinates of this circuit?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Strawberry Blond'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Strawberry Blond",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.strawberry_blond"
    ],
    "original_question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and Blond Strawberry hair.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "changes_information": {
      "original_value": "Strawberry Blond",
      "word_order_change": "Blond Strawberry"
    },
    "new_question_correct_value": "Please list the superhero names of all the superheroes that have blue eyes and Strawberry Blond hair."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Strawberry Blond'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Strawberry Blond",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.strawberry_blond"
    ],
    "original_question": "Which superheroes have blue eyes with brown hair?",
    "question": "Which superheroes have blue eyes with Blond Strawberry hair?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "changes_information": {
      "original_value": "Strawberry Blond",
      "word_order_change": "Blond Strawberry"
    },
    "new_question_correct_value": "Which superheroes have blue eyes with Strawberry Blond hair?"
  },
  {
    "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Strawberry Blond' AND T4.gender = 'Male'",
    "tables": [
      "race",
      "superhero",
      "gender",
      "colour"
    ],
    "columns": [
      "gender.gender",
      "race.id",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Strawberry Blond",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Male",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
    "values_list": [
      "colour.colour.strawberry_blond",
      "gender.gender.male"
    ],
    "original_question": "Give the race of the blue-haired male superhero.",
    "question": "Give the race of the Blond Strawberry-haired male superhero.",
    "original_SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "changes_information": {
      "original_value": "Strawberry Blond",
      "word_order_change": "Blond Strawberry"
    },
    "new_question_correct_value": "Give the race of the Strawberry Blond-haired male superhero."
  },
  {
    "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'BMW Sauber'",
    "tables": [
      "constructors",
      "constructorstandings"
    ],
    "columns": [
      "constructorstandings.constructorid",
      "constructors.name",
      "constructorstandings.position",
      "constructors.constructorid"
    ],
    "values": [
      {
        "table": "constructors",
        "column": "name",
        "value": "BMW Sauber",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Renault is a name of constructor;",
    "values_list": [
      "constructors.name.bmw_sauber"
    ],
    "original_question": "Please list the positions of the circuits built by the constructor Renault.",
    "question": "Please list the positions of the circuits built by the constructor Sauber BMW.",
    "original_SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "changes_information": {
      "original_value": "BMW Sauber",
      "word_order_change": "Sauber BMW"
    },
    "new_question_correct_value": "Please list the positions of the circuits built by the constructor BMW Sauber."
  },
  {
    "SQL": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Kelly Clauss'",
    "tables": [
      "votes",
      "contestants"
    ],
    "columns": [
      "votes.contestant_number",
      "contestants.contestant_name",
      "votes.phone_number",
      "votes.state",
      "votes.created",
      "contestants.contestant_number"
    ],
    "values": [
      {
        "table": "contestants",
        "column": "contestant_name",
        "value": "Kelly Clauss",
        "condition": "="
      }
    ],
    "db_id": "voter_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "contestants.contestant_name.tabatha gehling"
    ],
    "original_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
    "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Clauss Kelly'?",
    "original_SQL": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
    "changes_information": {
      "original_value": "Kelly Clauss",
      "word_order_change": "Clauss Kelly"
    },
    "new_question_correct_value": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Kelly Clauss'?"
  },
  {
    "SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'South America' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "tables": [
      "city",
      "countrylanguage",
      "country"
    ],
    "columns": [
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "city.countrycode",
      "country.continent",
      "country.name",
      "country.code",
      "countrylanguage.language",
      "city.name"
    ],
    "values": [
      {
        "table": "country",
        "column": "continent",
        "value": "South America",
        "condition": "="
      },
      {
        "table": "countrylanguage",
        "column": "isofficial",
        "value": "T",
        "condition": "="
      },
      {
        "table": "countrylanguage",
        "column": "language",
        "value": "English",
        "condition": "="
      }
    ],
    "db_id": "world_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "country.continent.south_america",
      "countrylanguage.isofficial.t",
      "countrylanguage.language.english"
    ],
    "original_question": "What are the names of cities in Europe for which English is not the official language?",
    "question": "What are the names of cities in America South for which English is not the official language?",
    "original_SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
    "changes_information": {
      "original_value": "South America",
      "word_order_change": "America South"
    },
    "new_question_correct_value": "What are the names of cities in South America for which English is not the official language?"
  },
  {
    "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Kutna Hora'",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "district.a2",
      "account.account_id",
      "account.district_id",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a2",
        "value": "Kutna Hora",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "A2 refers to the names of districts.",
    "values_list": [
      "district.a2.kutna_hora"
    ],
    "original_question": "List account ID and account opening date for accounts from 'Prachatice'.",
    "question": "List account ID and account opening date for accounts from 'Hora Kutna'.",
    "original_SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
    "changes_information": {
      "original_value": "Kutna Hora",
      "word_order_change": "Hora Kutna"
    },
    "new_question_correct_value": "List account ID and account opening date for accounts from 'Kutna Hora'."
  },
  {
    "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' ORDER BY T1.date ASC LIMIT 1",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "account.account_id",
      "account.district_id",
      "district.a3",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "south Bohemia",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "A3 stands for region names",
    "values_list": [
      "district.a3.south_bohemia"
    ],
    "original_question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
    "question": "For the first client who opened his/her account in Bohemia south, what is his/her account ID?",
    "original_SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
    "changes_information": {
      "original_value": "south Bohemia",
      "word_order_change": "Bohemia south"
    },
    "new_question_correct_value": "For the first client who opened his/her account in south Bohemia, what is his/her account ID?"
  },
  {
    "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "tables": [
      "district",
      "client"
    ],
    "columns": [
      "client.gender",
      "client.district_id",
      "district.a4",
      "district.a3",
      "district.district_id",
      "client.client_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "south Bohemia",
        "condition": "="
      },
      {
        "table": "client",
        "column": "gender",
        "value": "M",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
    "values_list": [
      "district.a3.south bohemia",
      "client.gender.m"
    ],
    "original_question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "question": "For the branch which located in the Bohemia south with biggest number of inhabitants, what is the percentage of the male clients?",
    "original_SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "changes_information": {
      "original_value": "south Bohemia",
      "word_order_change": "Bohemia south"
    },
    "new_question_correct_value": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?"
  },
  {
    "SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "account.frequency",
      "account.account_id",
      "account.district_id",
      "district.a3",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "south Bohemia",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "Accounts holder refers to the person who own this account.",
    "values_list": [
      "district.a3.east bohemia"
    ],
    "original_question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
    "question": "From Year 1995 to 2000, who are the accounts holders from 'Bohemia south'. State the account ID the frequency of statement issuance.",
    "original_SQL": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
    "changes_information": {
      "original_value": "south Bohemia",
      "word_order_change": "Bohemia south"
    },
    "new_question_correct_value": "From Year 1995 to 2000, who are the accounts holders from 'south Bohemia'. State the account ID the frequency of statement issuance."
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Marlin Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Marlin Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What is the owner of document with the Description 'Braeden Collection'?",
    "question": "What is the owner of document with the Description 'Collection Marlin'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Marlin Collection",
      "word_order_change": "Collection Marlin"
    },
    "new_question_correct_value": "What is the owner of document with the Description 'Marlin Collection'?"
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Marlin Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Marlin Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "question": "What are the owners of the document objects described as the 'Collection Marlin'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Marlin Collection",
      "word_order_change": "Collection Marlin"
    },
    "new_question_correct_value": "What are the owners of the document objects described as the 'Marlin Collection'?"
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'March Speaker'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Speaker",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"Speaker March\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "March Speaker",
      "word_order_change": "Speaker March"
    },
    "new_question_correct_value": "Give the location for \"March Speaker\"."
  },
  {
    "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Speaker",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "values_list": [
      "event.event_name.april speaker"
    ],
    "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "question": "Calculate the amount budgeted for 'Speaker March' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "changes_information": {
      "original_value": "March Speaker",
      "word_order_change": "Speaker March"
    },
    "new_question_correct_value": "Calculate the amount budgeted for 'March Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Speaker'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Speaker",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'Speaker March' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "March Speaker",
      "word_order_change": "Speaker March"
    },
    "new_question_correct_value": "What category was budgeted for the 'March Speaker' event and how much was the amount budgeted for that category?"
  },
  {
    "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'Campus Common'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "event.location",
      "budget.link_to_event",
      "budget.category"
    ],
    "values": [
      {
        "table": "event",
        "column": "location",
        "value": "Campus Common",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "held at MU 215 refers to location = 'MU 215'",
    "values_list": [
      "event.location.mu 215"
    ],
    "original_question": "Mention the category of events which were held at MU 215.",
    "question": "Mention the category of events which were held at Common Campus.",
    "original_SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "changes_information": {
      "original_value": "Campus Common",
      "word_order_change": "Common Campus"
    },
    "new_question_correct_value": "Mention the category of events which were held at Campus Common."
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'Campus Common'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "event.location",
      "budget.link_to_event",
      "budget.category"
    ],
    "values": [
      {
        "table": "event",
        "column": "location",
        "value": "Campus Common",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'MU 215' is the location of event; ",
    "values_list": [
      "event.location.mu 215"
    ],
    "original_question": "State the category of events were held at MU 215.",
    "question": "State the category of events were held at Common Campus.",
    "original_SQL": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "changes_information": {
      "original_value": "Campus Common",
      "word_order_change": "Common Campus"
    },
    "new_question_correct_value": "State the category of events were held at Campus Common."
  },
  {
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'MCTD, AMI'",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.id",
      "examination.diagnosis",
      "examination.examination date"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "MCTD, AMI",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "values_list": [
      "examination.diagnosis.mctd,_ami"
    ],
    "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "question": "Lists all patients by ID who were diagnosed with AMI, MCTD's and had their exams between 01/01/197 and 12/31/1997.",
    "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "changes_information": {
      "original_value": "MCTD, AMI",
      "word_order_change": "AMI, MCTD"
    },
    "new_question_correct_value": "Lists all patients by ID who were diagnosed with MCTD, AMI's and had their exams between 01/01/197 and 12/31/1997."
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'MCTD, AMI' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "MCTD, AMI",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.mctd,_ami"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with AMI, MCTD disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "MCTD, AMI",
      "word_order_change": "AMI, MCTD"
    },
    "new_question_correct_value": "What is the most common sign of patients with MCTD, AMI disease?"
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Alumni Glass'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Alumni Glass",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.alumni_glass"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'Glass Alumni' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Alumni Glass",
      "word_order_change": "Glass Alumni"
    },
    "new_question_correct_value": "Which budget category does the expense 'Alumni Glass' fall to?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in Simplified Chinese.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    },
    "new_question_correct_value": "Name all the cards which have alternative language in Chinese Simplified."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Phyrexian' is the language; name of artists refers to artist;",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "question": "Please provide the names of the artists who illustrated the card art in Simplified Chinese.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    },
    "new_question_correct_value": "Please provide the names of the artists who illustrated the card art in Chinese Simplified."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in Simplified Chinese.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    },
    "new_question_correct_value": "List down the name of artists for cards in Chinese Simplified."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and Simplified Chinese language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    },
    "new_question_correct_value": "What are the cards that only available in paper and Chinese Simplified language?"
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Chinese Simplified'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.chinese_simplified",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in Simplified Chinese. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    },
    "new_question_correct_value": "Calculate the percentage of cards in Chinese Simplified. List them by name."
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Simplified Chinese.",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    },
    "new_question_correct_value": "Lists all types of cards in Chinese Simplified."
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Simplified Chinese text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    },
    "new_question_correct_value": "Please list the Chinese Simplified text ruling of all the cards in the set Coldsnap."
  },
  {
    "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified' ORDER BY T2.convertedManaCost DESC",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the Simplified Chinese names of the cards in the set Coldsnap with the highest converted mana cost.",
    "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    },
    "new_question_correct_value": "Please list the Chinese Simplified names of the cards in the set Coldsnap with the highest converted mana cost."
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Lord Magnus'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Lord Magnus",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Magnus Lord\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Lord Magnus",
      "word_order_change": "Magnus Lord"
    },
    "new_question_correct_value": "Which foreign language used by \"Lord Magnus\"?"
  },
  {
    "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
    "tables": [
      "hangar"
    ],
    "columns": [
      "hangar.plane_name",
      "hangar.location"
    ],
    "values": [
      {
        "table": "hangar",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "hangar.plane_name.f-14 fighter"
    ],
    "original_question": "Where is the plane F-14 Fighter located?",
    "question": "Where is the plane Cub Piper located?",
    "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "word_order_change": "Cub Piper"
    },
    "new_question_correct_value": "Where is the plane Piper Cub located?"
  },
  {
    "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
    "tables": [
      "hangar"
    ],
    "columns": [
      "hangar.plane_name",
      "hangar.location"
    ],
    "values": [
      {
        "table": "hangar",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "hangar.plane_name.f-14 fighter"
    ],
    "original_question": "Return the location of the hangar in which F-14 Fighter is located.",
    "question": "Return the location of the hangar in which Cub Piper is located.",
    "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "word_order_change": "Cub Piper"
    },
    "new_question_correct_value": "Return the location of the hangar in which Piper Cub is located."
  },
  {
    "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Netherlands Eredivisie'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "league.country_id",
      "league.name",
      "country.id"
    ],
    "values": [
      {
        "table": "league",
        "column": "name",
        "value": "Netherlands Eredivisie",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
    "values_list": [
      "league.name.italy serie a"
    ],
    "original_question": "Which country is the league Italy Serie A from?",
    "question": "Which country is the league Eredivisie Netherlands from?",
    "original_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
    "changes_information": {
      "original_value": "Netherlands Eredivisie",
      "word_order_change": "Eredivisie Netherlands"
    },
    "new_question_correct_value": "Which country is the league Netherlands Eredivisie from?"
  },
  {
    "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Netherlands Eredivisie'",
    "tables": [
      "league",
      "country"
    ],
    "columns": [
      "country.name",
      "league.country_id",
      "league.name",
      "country.id"
    ],
    "values": [
      {
        "table": "league",
        "column": "name",
        "value": "Netherlands Eredivisie",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
    "values_list": [
      "league.name.belgium jupiler league"
    ],
    "original_question": "Which country is the Belgium Jupiler League from?",
    "question": "Which country is the Eredivisie Netherlands from?",
    "original_SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
    "changes_information": {
      "original_value": "Netherlands Eredivisie",
      "word_order_change": "Eredivisie Netherlands"
    },
    "new_question_correct_value": "Which country is the Netherlands Eredivisie from?"
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name;",
    "values_list": [
      "major.department.art and design department"
    ],
    "original_question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "question": "Please list the full names of the students in the Student_Club that come from the Department Physics.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "changes_information": {
      "original_value": "Physics Department",
      "word_order_change": "Department Physics"
    },
    "new_question_correct_value": "Please list the full names of the students in the Student_Club that come from the Physics Department."
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
    "values_list": [
      "major.department.school of applied sciences, technology and education"
    ],
    "original_question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "question": "List all the members of the \"Department Physics\" department.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "changes_information": {
      "original_value": "Physics Department",
      "word_order_change": "Department Physics"
    },
    "new_question_correct_value": "List all the members of the \"Physics Department\" department."
  },
  {
    "SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Liberal Arts'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.major_id",
      "major.major_name",
      "member.last_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Liberal Arts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Law and Constitutional Studies' is the major name",
    "values_list": [
      "major.major_name.law and constitutional studies"
    ],
    "original_question": "List the last name of all the students who majored Law and Constitutional Studies. \n",
    "question": "List the last name of all the students who majored Arts Liberal. \n",
    "original_SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
    "changes_information": {
      "original_value": "Liberal Arts",
      "word_order_change": "Arts Liberal"
    },
    "new_question_correct_value": "List the last name of all the students who majored Liberal Arts. \n"
  },
  {
    "SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Liberal Arts'",
    "tables": [
      "member",
      "event",
      "major",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.link_to_major",
      "member.first_name",
      "attendance.link_to_member",
      "major.major_id",
      "major.major_name",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Community Theater",
        "condition": "="
      },
      {
        "table": "major",
        "column": "major_name",
        "value": "Liberal Arts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
    "values_list": [
      "event.event_name.community theater",
      "major.major_name.interior design"
    ],
    "original_question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "question": "Among the students majored in Arts Liberal, who have attended the Community Theater event?",
    "original_SQL": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "changes_information": {
      "original_value": "Liberal Arts",
      "word_order_change": "Arts Liberal"
    },
    "new_question_correct_value": "Among the students majored in Liberal Arts, who have attended the Community Theater event?"
  },
  {
    "SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Liberal Arts'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.major_id",
      "major.major_name",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Liberal Arts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Business' is the major name",
    "values_list": [
      "major.major_name.liberal_arts"
    ],
    "original_question": "List out the position of members who joined major of Business.",
    "question": "List out the position of members who joined major of Arts Liberal.",
    "original_SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
    "changes_information": {
      "original_value": "Liberal Arts",
      "word_order_change": "Arts Liberal"
    },
    "new_question_correct_value": "List out the position of members who joined major of Liberal Arts."
  },
  {
    "SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Liberal Arts'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.phone",
      "member.link_to_major",
      "major.major_id",
      "major.major_name",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Liberal Arts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Elementary Education' is the major name; phone numbers refers to phone",
    "values_list": [
      "major.major_name.elementary education"
    ],
    "original_question": "List the last names of students under the Elementary Education major and include their phone numbers.",
    "question": "List the last names of students under the Arts Liberal major and include their phone numbers.",
    "original_SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
    "changes_information": {
      "original_value": "Liberal Arts",
      "word_order_change": "Arts Liberal"
    },
    "new_question_correct_value": "List the last names of students under the Liberal Arts major and include their phone numbers."
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "WTA Championships",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "question": "What are the country code and first name of the players who won in both tourney Championships WTA and Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "WTA Championships",
      "word_order_change": "Championships WTA"
    },
    "new_question_correct_value": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?"
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "WTA Championships",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "question": "What are the first names and country codes for players who won both the Championships WTA and the Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "WTA Championships",
      "word_order_change": "Championships WTA"
    },
    "new_question_correct_value": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?"
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "WTA Championships",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the Championships WTA tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "WTA Championships",
      "word_order_change": "Championships WTA"
    },
    "new_question_correct_value": "Find the name of the winner who has the highest rank points and participated in the WTA Championships tourney."
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "WTA Championships",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the Championships WTA tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "WTA Championships",
      "word_order_change": "Championships WTA"
    },
    "new_question_correct_value": "What is the name of the winner with the most rank points who participated in the WTA Championships tournament?"
  },
  {
    "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "major.major_id",
      "member.position",
      "major.college"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "LIKE"
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Vice President is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "Which college is the vice president of the Student_Club from?",
    "question": "Which college is the President Vice of the Student_Club from?",
    "original_SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "Which college is the Vice President of the Student_Club from?"
  },
  {
    "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "income"
    ],
    "columns": [
      "income.link_to_member",
      "member.member_id",
      "member.position",
      "income.amount"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "What is the amount of the funds that the Vice President received?",
    "question": "What is the amount of the funds that the President Vice received?",
    "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "What is the amount of the funds that the Vice President received?"
  },
  {
    "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "zip_code"
    ],
    "columns": [
      "zip_code.zip_code",
      "zip_code.state",
      "zip_code.city",
      "member.position",
      "member.zip"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club;",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "What city and state did the President of the Student_Club grow up?",
    "question": "What city and state did the President Vice of the Student_Club grow up?",
    "original_SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "What city and state did the Vice President of the Student_Club grow up?"
  },
  {
    "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the major name for the Vice President of the club.",
    "question": "State the major name for the President Vice of the club.",
    "original_SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "State the major name for the Vice President of the club."
  },
  {
    "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.department",
      "major.major_id",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "Which department was the President of the club in?",
    "question": "Which department was the President Vice of the club in?",
    "original_SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "Which department was the Vice President of the club in?"
  },
  {
    "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "expense"
    ],
    "columns": [
      "expense.link_to_member",
      "member.member_id",
      "member.position",
      "expense.expense_id",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "List all the expenses incurred by the vice president.",
    "question": "List all the expenses incurred by the President Vice.",
    "original_SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "List all the expenses incurred by the Vice President."
  },
  {
    "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Vice President'",
    "tables": [
      "member"
    ],
    "columns": [
      "member.email",
      "member.first_name",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
    "question": "Provide the full name and email address of the Student_Club's President Vice.",
    "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "Provide the full name and email address of the Student_Club's Vice President."
  },
  {
    "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the name of major that Vice President has joined.",
    "question": "State the name of major that President Vice has joined.",
    "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "State the name of major that Vice President has joined."
  },
  {
    "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "event.type",
      "attendance.link_to_member",
      "member.position",
      "event.event_id",
      "event.location"
    ],
    "values": [
      {
        "table": "event",
        "column": "type",
        "value": "Social",
        "condition": "="
      },
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      },
      {
        "table": "event",
        "column": "location",
        "value": "900 E. Washington St.",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
    "values_list": [
      "event.type.social",
      "member.position.vice president",
      "event.location.900 e. washington st."
    ],
    "original_question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "question": "What is the name of the social event that was attended by the President Vice of the Student_Club located at 900 E. Washington St.?",
    "original_SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "What is the name of the social event that was attended by the Vice President of the Student_Club located at 900 E. Washington St.?"
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.major_id",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last name",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "question": "Write the full name of the club member with the position of 'President Vice' and list which college the club member belongs to.",
    "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "changes_information": {
      "original_value": "Vice President",
      "word_order_change": "President Vice"
    },
    "new_question_correct_value": "Write the full name of the club member with the position of 'Vice President' and list which college the club member belongs to."
  },
  {
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "tables": [
      "museum"
    ],
    "columns": [
      "museum.num_of_staff",
      "museum.name",
      "museum.open_year"
    ],
    "values": [
      {
        "table": "museum",
        "column": "name",
        "value": "Plaza Museum",
        "condition": "="
      }
    ],
    "db_id": "museum_visit",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "museum.name.plaza museum"
    ],
    "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "question": "What are the opening year and staff number of the museum named Museum Plaza?",
    "original_SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "changes_information": {
      "original_value": "Plaza Museum",
      "word_order_change": "Museum Plaza"
    },
    "new_question_correct_value": "What are the opening year and staff number of the museum named Plaza Museum?"
  },
  {
    "SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Iskren Petsov'",
    "tables": [
      "participants",
      "performance_score"
    ],
    "columns": [
      "performance_score.stage_presence",
      "performance_score.voice_sound_quality",
      "performance_score.rhythm_tempo",
      "participants.id",
      "performance_score.participant_id",
      "participants.name"
    ],
    "values": [
      {
        "table": "participants",
        "column": "name",
        "value": "Iskren Petsov",
        "condition": "="
      }
    ],
    "db_id": "sing_contest",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "participants.name.iskren_petsov"
    ],
    "original_question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Petsov Iskren'?",
    "original_SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
    "changes_information": {
      "original_value": "Iskren Petsov",
      "word_order_change": "Petsov Iskren"
    },
    "new_question_correct_value": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Iskren Petsov'?"
  },
  {
    "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.attacking_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Appindangoye",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.franco zennaro"
    ],
    "original_question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "question": "What is the attacking work rate of the football playerr Appindangoye Aaron?",
    "original_SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "changes_information": {
      "original_value": "Aaron Appindangoye",
      "word_order_change": "Appindangoye Aaron"
    },
    "new_question_correct_value": "What is the attacking work rate of the football playerr Aaron Appindangoye?"
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Appindangoye",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Appindangoye Aaron\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Aaron Appindangoye",
      "word_order_change": "Appindangoye Aaron"
    },
    "new_question_correct_value": "What is the defensive work rate of the football player Aaron Appindangoye\n?"
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Appindangoye",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Appindangoye Aaron's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Aaron Appindangoye",
      "word_order_change": "Appindangoye Aaron"
    },
    "new_question_correct_value": "What is Aaron Appindangoye's potential score?"
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player_attributes.heading_accuracy",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player.player_name"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Appindangoye",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.ariel borysiuk"
    ],
    "original_question": "What's the heading accuracy of Ariel Borysiuk?",
    "question": "What's the heading accuracy of Appindangoye Aaron?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "changes_information": {
      "original_value": "Aaron Appindangoye",
      "word_order_change": "Appindangoye Aaron"
    },
    "new_question_correct_value": "What's the heading accuracy of Aaron Appindangoye?"
  },
  {
    "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player.player_api_id",
      "player_attributes.preferred_foot"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Appindangoye",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "values_list": [
      "player.player_name.abdou diallo"
    ],
    "original_question": "Which foot is preferred by Abdou Diallo?",
    "question": "Which foot is preferred by Appindangoye Aaron?",
    "original_SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "changes_information": {
      "original_value": "Aaron Appindangoye",
      "word_order_change": "Appindangoye Aaron"
    },
    "new_question_correct_value": "Which foot is preferred by Aaron Appindangoye?"
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Aaron Appindangoye' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Appindangoye",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Appindangoye Aaron have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Aaron Appindangoye",
      "word_order_change": "Appindangoye Aaron"
    },
    "new_question_correct_value": "When was the first time did Aaron Appindangoye have his highest crossing score? Give the date."
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Variance components'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Variance components",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"components Variance\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Variance components",
      "word_order_change": "components Variance"
    },
    "new_question_correct_value": "Who is the owner of the post \"Variance components\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Variance components'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Variance components",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"components Variance\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Variance components",
      "word_order_change": "components Variance"
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"Variance components\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Variance components'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Variance components",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"components Variance\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Variance components",
      "word_order_change": "components Variance"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Variance components\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Variance components'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Variance components",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'components Variance' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Variance components",
      "word_order_change": "components Variance"
    },
    "new_question_correct_value": "How many views did the post titled 'Variance components' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Variance components'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Variance components",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"components Variance\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Variance components",
      "word_order_change": "components Variance"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Variance components\"."
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Variance components' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Variance components",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'components Variance' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Variance components",
      "word_order_change": "components Variance"
    },
    "new_question_correct_value": "Provide the text of the latest 10 comments to the post with the title 'Variance components' and the display name of the user who left it."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Variance components'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Variance components",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'components Variance'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Variance components",
      "word_order_change": "components Variance"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Variance components'?"
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Variance components'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Variance components",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"components Variance\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Variance components",
      "word_order_change": "components Variance"
    },
    "new_question_correct_value": "What is the post ID and the comments commented in the post titled by \"Variance components\"?"
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by Comics DC by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "DC Comics",
      "word_order_change": "Comics DC"
    },
    "new_question_correct_value": "Rank heroes published by DC Comics by their height in descending order."
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from Comics DC by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "DC Comics",
      "word_order_change": "Comics DC"
    },
    "new_question_correct_value": "Rank superheroes from DC Comics by their eye color popularity, starting with the most common color."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'DC Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Strength",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Comics DC who have the super power of 'Super Strength'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "DC Comics",
      "word_order_change": "Comics DC"
    },
    "new_question_correct_value": "List the superheroes from DC Comics who have the super power of 'Super Strength'."
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'DC Comics'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of Comics DC.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "DC Comics",
      "word_order_change": "Comics DC"
    },
    "new_question_correct_value": "Give the publisher ID of DC Comics."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'DC Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "publisher",
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "superhero.id",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "attribute.attribute_name",
      "publisher.id",
      "attribute.id",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.publisher_id",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      },
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Durability",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "attribute.attribute_name.durability"
    ],
    "original_question": "Which superhero has the most durability published by Dark Horse Comics?",
    "question": "Which superhero has the most durability published by Comics DC?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "DC Comics",
      "word_order_change": "Comics DC"
    },
    "new_question_correct_value": "Which superhero has the most durability published by DC Comics?"
  },
  {
    "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'DC Comics' AND T3.gender = 'Female'",
    "tables": [
      "publisher",
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.skin_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Female",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "values_list": [
      "publisher.publisher_name.dark horse comics",
      "gender.gender.female"
    ],
    "original_question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "question": "List the eyes, hair and skin colour of all female superheroes published by Comics DC.",
    "original_SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "changes_information": {
      "original_value": "DC Comics",
      "word_order_change": "Comics DC"
    },
    "new_question_correct_value": "List the eyes, hair and skin colour of all female superheroes published by DC Comics."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in Comics DC.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "DC Comics",
      "word_order_change": "Comics DC"
    },
    "new_question_correct_value": "Identify the heaviest superhero in DC Comics."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Dathomirian Zabrak'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Dathomirian Zabrak",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.dathomirian_zabrak"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the Zabrak Dathomirian superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "Dathomirian Zabrak",
      "word_order_change": "Zabrak Dathomirian"
    },
    "new_question_correct_value": "Give the name of the Dathomirian Zabrak superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Dathomirian Zabrak'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Dathomirian Zabrak",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.dathomirian_zabrak"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of Zabrak Dathomirian superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "Dathomirian Zabrak",
      "word_order_change": "Zabrak Dathomirian"
    },
    "new_question_correct_value": "List down at least five full name of Dathomirian Zabrak superheroes."
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Dathomirian Zabrak'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Dathomirian Zabrak",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "values_list": [
      "race.race.dathomirian_zabrak"
    ],
    "original_question": "Provide the full names of vampire heroes.",
    "question": "Provide the full names of Zabrak Dathomirian heroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "changes_information": {
      "original_value": "Dathomirian Zabrak",
      "word_order_change": "Zabrak Dathomirian"
    },
    "new_question_correct_value": "Provide the full names of Dathomirian Zabrak heroes."
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Kipling West'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Kipling West",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Kipling.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Kipling West",
      "word_removal": "Kipling"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Kipling West."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Kipling West'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Kipling West",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Kipling cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Kipling West",
      "word_removal": "Kipling"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Kipling West cost in total?"
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Kipling West'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Kipling West",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Kipling created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Kipling West",
      "word_removal": "Kipling"
    },
    "new_question_correct_value": "What kind of printing is on the card that Kipling West created?"
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Kipling West'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Kipling West",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Kipling worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Kipling West",
      "word_removal": "Kipling"
    },
    "new_question_correct_value": "List all the frame styles and cards Kipling West worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Rebekah Lynn'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Rebekah Lynn",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Rebekah.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Rebekah Lynn",
      "word_removal": "Rebekah"
    },
    "new_question_correct_value": "Name the cards that were illustrated by Rebekah Lynn."
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Rebekah Lynn'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Rebekah Lynn",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Rebekah cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Rebekah Lynn",
      "word_removal": "Rebekah"
    },
    "new_question_correct_value": "What is the  unconverted mana do all the cards created by Rebekah Lynn cost in total?"
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Rebekah Lynn'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Rebekah Lynn",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Rebekah created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Rebekah Lynn",
      "word_removal": "Rebekah"
    },
    "new_question_correct_value": "What kind of printing is on the card that Rebekah Lynn created?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Rebekah Lynn' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Rebekah Lynn",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Rebekah? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Rebekah Lynn",
      "word_removal": "Rebekah"
    },
    "new_question_correct_value": "What are the rulings for the card named and designed by Rebekah Lynn? List them in descending order of dates."
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Rebekah Lynn'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Rebekah Lynn",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Rebekah worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Rebekah Lynn",
      "word_removal": "Rebekah"
    },
    "new_question_correct_value": "List all the frame styles and cards Rebekah Lynn worked on and find any banned cards if there are any."
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Tempting offer'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Tempting offer",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.tempting_offer"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Tempting?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Tempting offer",
      "word_removal": "Tempting"
    },
    "new_question_correct_value": "What are the card layout of cards with keyword of Tempting offer?"
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Cornucopia astral'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Cornucopia astral",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Cornucopia\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Cornucopia astral",
      "word_removal": "Cornucopia"
    },
    "new_question_correct_value": "Which foreign language used by \"Cornucopia astral\"?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Mythic Edition' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Mythic Edition",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "values_list": [
      "sets.name.mythic_edition"
    ],
    "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the name of the cards in the set Mythic with the highest converted mana cost.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "changes_information": {
      "original_value": "Mythic Edition",
      "word_removal": "Mythic"
    },
    "new_question_correct_value": "Please list the name of the cards in the set Mythic Edition with the highest converted mana cost."
  },
  {
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Mythic Edition'",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.name",
      "sets.parentcode"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Mythic Edition",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "values_list": [
      "sets.name.commander 2014 oversized"
    ],
    "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "question": "For the set \"Mythic\" , give its parent code.",
    "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "changes_information": {
      "original_value": "Mythic Edition",
      "word_removal": "Mythic"
    },
    "new_question_correct_value": "For the set \"Mythic Edition\" , give its parent code."
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Redemption Program' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Redemption Program",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "values_list": [
      "sets.name.redemption_program"
    ],
    "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the name of the cards in the set Redemption with the highest converted mana cost.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "changes_information": {
      "original_value": "Redemption Program",
      "word_removal": "Redemption"
    },
    "new_question_correct_value": "Please list the name of the cards in the set Redemption Program with the highest converted mana cost."
  },
  {
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Redemption Program'",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.name",
      "sets.parentcode"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Redemption Program",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "values_list": [
      "sets.name.commander 2014 oversized"
    ],
    "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "question": "For the set \"Redemption\" , give its parent code.",
    "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "changes_information": {
      "original_value": "Redemption Program",
      "word_removal": "Redemption"
    },
    "new_question_correct_value": "For the set \"Redemption Program\" , give its parent code."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Damon Macready'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Damon Macready",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Macready?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Damon Macready",
      "word_removal": "Macready"
    },
    "new_question_correct_value": "What is the eyes colour of Damon Macready?"
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Damon Macready'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Damon Macready",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Macready.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Damon Macready",
      "word_removal": "Macready"
    },
    "new_question_correct_value": "Provide the hero name and race of Damon Macready."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Damon Macready'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Damon Macready",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Macready.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Damon Macready",
      "word_removal": "Macready"
    },
    "new_question_correct_value": "List the powers of Damon Macready."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Damon Macready'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Damon Macready",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Macready as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Damon Macready",
      "word_removal": "Macready"
    },
    "new_question_correct_value": "Provide the eye colour of the superhero who has Damon Macready as their full name."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Damon Macready'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Damon Macready",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Macready as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Damon Macready",
      "word_removal": "Macready"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Damon Macready as their full name?"
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Damon Macready'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Damon Macready",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Macready.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Damon Macready",
      "word_removal": "Macready"
    },
    "new_question_correct_value": "Name the superhero, otherwise known as Damon Macready."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "Please list all the superpowers of 3-D Man.",
    "question": "Please list all the superpowers of Manhattan.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "Please list all the superpowers of Dr Manhattan."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of Manhattan's skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "What is the colour of Dr Manhattan's skin?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "Who is the publisher of Sauron?",
    "question": "Who is the publisher of Manhattan?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "Who is the publisher of Dr Manhattan?"
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of Manhattan?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "What is the publisher's name of Dr Manhattan?"
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is Manhattan's race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "What is Dr Manhattan's race?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "Provide the superpowers of the superhero called Deathlok.",
    "question": "Provide the superpowers of the superhero called Manhattan.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "Provide the superpowers of the superhero called Dr Manhattan."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero Manhattan.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "Indicate the attribute value of superhero Dr Manhattan."
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero Manhattan belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "Which group does superhero Dr Manhattan belong to?"
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of Manhattan hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "What is the gender of Dr Manhattan hero?"
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of Manhattan?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "What are the race and alignment of Dr Manhattan?"
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "What is Abomination's superpower?",
    "question": "What is Manhattan's superpower?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "What is Dr Manhattan's superpower?"
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of Manhattan's attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "State all of Dr Manhattan's attributes along with their values."
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named Manhattan.",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "Give the alignment and superpowers of the superhero named Dr Manhattan."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down Manhattan's superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "List down Dr Manhattan's superpowers."
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Dr Manhattan' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the Manhattan.",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "Identify the weakest attribute of the Dr Manhattan."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "What is Abomination's eye colour?",
    "question": "What is Manhattan's eye colour?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "What is Dr Manhattan's eye colour?"
  },
  {
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "Provide the full name of the superhero named Alien.",
    "question": "Provide the full name of the superhero named Manhattan.",
    "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "Provide the full name of the superhero named Dr Manhattan."
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named Manhattan.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "List the attribute value of the superhero named Dr Manhattan."
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Dr Manhattan'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Dr Manhattan",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.dr_manhattan"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of Manhattan.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "Dr Manhattan",
      "word_removal": "Manhattan"
    },
    "new_question_correct_value": "Give the eye colour of Dr Manhattan."
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'The Hague'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "The Hague",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in Hague obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "The Hague",
      "word_removal": "Hague"
    },
    "new_question_correct_value": "List out the dates that users who are located in The Hague obtained their badges?"
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'The Hague'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "The Hague",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in Hague obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "The Hague",
      "word_removal": "Hague"
    },
    "new_question_correct_value": "List out the age of users who located in The Hague obtained the badge?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'The Hague'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "The Hague",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "values_list": [
      "users.location.north pole"
    ],
    "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "question": "Provide the badge names received in 2011 for the user whose location is in the Hague.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "changes_information": {
      "original_value": "The Hague",
      "word_removal": "Hague"
    },
    "new_question_correct_value": "Provide the badge names received in 2011 for the user whose location is in the The Hague."
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Toils of Night and Day'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Toils of Night & Day'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "What is the keyword found on card 'Toils of Night and Day'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.toils_of_night_and_day"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Toils of Night and Day\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "What is the status of card \"Toils of Night and Day\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "What is the type of card \"Toils of Night and Day\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "What is the rule of playing card \"Toils of Night and Day\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Toils of Night & Day.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "Write down the ruling of Toils of Night and Day."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Toils of Night and Day'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Toils of Night and Day\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Toils of Night & Day\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "Did the set of cards with \"Toils of Night and Day\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.toils_of_night_and_day"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Toils of Night & Day' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "When was the ruling for the card 'Toils of Night and Day' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.toils_of_night_and_day"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Toils of Night & Day\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Toils of Night and Day\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Toils of Night and Day' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Toils of Night & Day\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Toils of Night and Day\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Toils of Night and Day' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Toils of Night & Day\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Toils of Night and Day\" is in it."
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Sword of Truth and Justice'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Sword of Truth & Justice'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "What is the keyword found on card 'Sword of Truth and Justice'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.sword_of_truth_and_justice"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Sword of Truth & Justice\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Sword of Truth and Justice\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Sword of Truth & Justice\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "What is the status of card \"Sword of Truth and Justice\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Sword of Truth & Justice\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "What is the type of card \"Sword of Truth and Justice\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Sword of Truth & Justice\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "What is the rule of playing card \"Sword of Truth and Justice\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Sword of Truth & Justice.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "Write down the ruling of Sword of Truth and Justice."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Sword of Truth and Justice'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Sword of Truth & Justice\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Sword of Truth and Justice\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Sword of Truth & Justice\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "Did the set of cards with \"Sword of Truth and Justice\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.sword_of_truth_and_justice"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Sword of Truth & Justice' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "When was the ruling for the card 'Sword of Truth and Justice' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.sword_of_truth_and_justice"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Sword of Truth & Justice\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Sword of Truth and Justice\" in it?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Burn at the Stake'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Burn @ the Stake'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "What is the keyword found on card 'Burn at the Stake'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.burn_at_the_stake"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Burn at the Stake\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "What is the status of card \"Burn at the Stake\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "What is the type of card \"Burn at the Stake\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "What is the rule of playing card \"Burn at the Stake\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Burn @ the Stake.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "Write down the ruling of Burn at the Stake."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Burn at the Stake'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Burn at the Stake\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Burn @ the Stake\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "Did the set of cards with \"Burn at the Stake\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.burn_at_the_stake"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Burn @ the Stake' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "When was the ruling for the card 'Burn at the Stake' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.burn_at_the_stake"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Burn @ the Stake\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Burn at the Stake\" in it?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Smart Ass'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Smart Ass",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Smart @ss'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Smart Ass",
      "word_to_symbol_change": "Smart @ss"
    },
    "new_question_correct_value": "What is the keyword found on card 'Smart Ass'?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Smart Ass'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Smart Ass",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Smart @ss\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Smart Ass",
      "word_to_symbol_change": "Smart @ss"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Smart Ass\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Smart Ass'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Smart Ass",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Smart @ss\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Smart Ass",
      "word_to_symbol_change": "Smart @ss"
    },
    "new_question_correct_value": "Did the set of cards with \"Smart Ass\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Smart Ass'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Smart Ass",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.smart_ass"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Smart @ss\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Smart Ass",
      "word_to_symbol_change": "Smart @ss"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Smart Ass\" in it?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Touch and Go'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Touch and Go",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Touch & Go'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Touch and Go",
      "word_to_symbol_change": "Touch & Go"
    },
    "new_question_correct_value": "What is the keyword found on card 'Touch and Go'?"
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Touch and Go'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Touch and Go",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Touch & Go\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Touch and Go",
      "word_to_symbol_change": "Touch & Go"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Touch and Go\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Touch and Go'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Touch and Go",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Touch & Go\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Touch and Go",
      "word_to_symbol_change": "Touch & Go"
    },
    "new_question_correct_value": "Did the set of cards with \"Touch and Go\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Touch and Go'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Touch and Go",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.touch_and_go"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Touch & Go\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Touch and Go",
      "word_to_symbol_change": "Touch & Go"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Touch and Go\" in it?"
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Sword of Feast and Famine'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Sword of Feast & Famine'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "What is the keyword found on card 'Sword of Feast and Famine'?"
  },
  {
    "SQL": "SELECT promoTypes FROM cards WHERE name = 'Sword of Feast and Famine' AND promoTypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
    "values_list": [
      "cards.name.sword_of_feast_and_famine"
    ],
    "original_question": "What type of promotion is of card 'Duress'?",
    "question": "What type of promotion is of card 'Sword of Feast & Famine'?",
    "original_SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "What type of promotion is of card 'Sword of Feast and Famine'?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.sword_of_feast_and_famine"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Sword of Feast & Famine\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "What is the description about the ruling of card \"Sword of Feast and Famine\"?"
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Sword of Feast & Famine\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "What is the status of card \"Sword of Feast and Famine\"?"
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Sword of Feast & Famine\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "What is the type of card \"Sword of Feast and Famine\"?"
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Sword of Feast & Famine\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "What is the rule of playing card \"Sword of Feast and Famine\"?"
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Sword of Feast & Famine.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "Write down the ruling of Sword of Feast and Famine."
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Sword of Feast and Famine'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Sword of Feast & Famine\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "What's the list of all types for the card \"Sword of Feast and Famine\"?"
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Sword of Feast & Famine\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "Did the set of cards with \"Sword of Feast and Famine\" appear on Magic: The Gathering Online?"
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.sword_of_feast_and_famine"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Sword of Feast & Famine' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "When was the ruling for the card 'Sword of Feast and Famine' created?"
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.sword_of_feast_and_famine"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Sword of Feast & Famine\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "What was the release date for the set which card \"Sword of Feast and Famine\" in it?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Sword of Feast and Famine' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Sword of Feast & Famine\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "What's the French name of the set of cards with \"Sword of Feast and Famine\" is in?"
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Sword of Feast and Famine' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Sword of Feast & Famine\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    },
    "new_question_correct_value": "Tell the Japanese name of the set which card \"Sword of Feast and Famine\" is in it."
  },
  {
    "SQL": "SELECT department FROM major WHERE college = 'College of Agriculture and Applied Sciences'",
    "tables": [
      "major"
    ],
    "columns": [
      "major.department",
      "major.college"
    ],
    "values": [
      {
        "table": "major",
        "column": "college",
        "value": "College of Agriculture and Applied Sciences",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "major.college.college of humanities and social sciences"
    ],
    "original_question": "List all of the College of Humanities and Social Sciences' departments.",
    "question": "List all of the College of Agriculture & Applied Sciences' departments.",
    "original_SQL": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "changes_information": {
      "original_value": "College of Agriculture and Applied Sciences",
      "word_to_symbol_change": "College of Agriculture & Applied Sciences"
    },
    "new_question_correct_value": "List all of the College of Agriculture and Applied Sciences' departments."
  },
  {
    "SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.phone",
      "major.college",
      "member.link_to_major",
      "major.major_id",
      "major.major_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Business",
        "condition": "="
      },
      {
        "table": "major",
        "column": "college",
        "value": "College of Agriculture and Applied Sciences",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
    "values_list": [
      "major.major_name.business",
      "major.college.college of agriculture and applied sciences"
    ],
    "original_question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
    "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture & Applied Sciences.",
    "original_SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
    "changes_information": {
      "original_value": "College of Agriculture and Applied Sciences",
      "word_to_symbol_change": "College of Agriculture & Applied Sciences"
    },
    "new_question_correct_value": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences."
  },
  {
    "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Selecting trustworthy rows based on minima and maxima'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posthistory.text",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posts.viewcount",
      "posts.lasteditoruserid"
    ],
    "values": [
      {
        "table": "posthistory",
        "column": "text",
        "value": "Selecting trustworthy rows based on minima and maxima",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "values_list": [
      "posthistory.text.computer game datasets"
    ],
    "original_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "question": "Identify the total views on the post 'Selecting trustworthy rows based on minima & maxima'. Name the user who posted it last time.",
    "original_SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "changes_information": {
      "original_value": "Selecting trustworthy rows based on minima and maxima",
      "word_to_symbol_change": "Selecting trustworthy rows based on minima & maxima"
    },
    "new_question_correct_value": "Identify the total views on the post 'Selecting trustworthy rows based on minima and maxima'. Name the user who posted it last time."
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Predicting with both continuous & categorical features\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    },
    "new_question_correct_value": "Who is the owner of the post \"Predicting with both continuous and categorical features\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Predicting with both continuous & categorical features\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"Predicting with both continuous and categorical features\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Predicting with both continuous & categorical features\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Predicting with both continuous and categorical features\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Predicting with both continuous & categorical features' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    },
    "new_question_correct_value": "How many views did the post titled 'Predicting with both continuous and categorical features' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Predicting with both continuous & categorical features\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Predicting with both continuous and categorical features\"."
  },
  {
    "SQL": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "posts",
      "postlinks"
    ],
    "columns": [
      "posts.id",
      "postlinks.relatedpostid",
      "posts.title",
      "postlinks.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.how to tell if something happened in a data set which monitors a value over time"
    ],
    "original_question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
    "question": "Provide the related post title of \"Predicting with both continuous & categorical features\".",
    "original_SQL": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    },
    "new_question_correct_value": "Provide the related post title of \"Predicting with both continuous and categorical features\"."
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Predicting with both continuous and categorical features' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Predicting with both continuous & categorical features' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    },
    "new_question_correct_value": "Provide the text of the latest 10 comments to the post with the title 'Predicting with both continuous and categorical features' and the display name of the user who left it."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Predicting with both continuous & categorical features'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Predicting with both continuous and categorical features'?"
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Predicting with both continuous & categorical features\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    },
    "new_question_correct_value": "What is the post ID and the comments commented in the post titled by \"Predicting with both continuous and categorical features\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Probability of at least one unique outcome",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Probability of @ least one unique outcome\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Probability of at least one unique outcome",
      "word_to_symbol_change": "Probability of @ least one unique outcome"
    },
    "new_question_correct_value": "Who is the owner of the post \"Probability of at least one unique outcome\"?"
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Probability of at least one unique outcome",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Probability of @ least one unique outcome\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Probability of at least one unique outcome",
      "word_to_symbol_change": "Probability of @ least one unique outcome"
    },
    "new_question_correct_value": "What is the display name of the user who last edited the post \"Probability of at least one unique outcome\"?"
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Probability of at least one unique outcome",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Probability of @ least one unique outcome\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Probability of at least one unique outcome",
      "word_to_symbol_change": "Probability of @ least one unique outcome"
    },
    "new_question_correct_value": "What is the location of the owner of the post \"Probability of at least one unique outcome\"?"
  },
  {
    "SQL": "SELECT ViewCount FROM posts WHERE Title = 'Probability of at least one unique outcome'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Probability of at least one unique outcome",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "values_list": [
      "posts.title.integration of weka and/or rapidminer into informatica powercenter/developer"
    ],
    "original_question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "question": "How many views did the post titled 'Probability of @ least one unique outcome' get?",
    "original_SQL": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "changes_information": {
      "original_value": "Probability of at least one unique outcome",
      "word_to_symbol_change": "Probability of @ least one unique outcome"
    },
    "new_question_correct_value": "How many views did the post titled 'Probability of at least one unique outcome' get?"
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Probability of at least one unique outcome'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Probability of at least one unique outcome",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Probability of @ least one unique outcome\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Probability of at least one unique outcome",
      "word_to_symbol_change": "Probability of @ least one unique outcome"
    },
    "new_question_correct_value": "Provide the last edit date and last edit user ID for the post \"Probability of at least one unique outcome\"."
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Probability of at least one unique outcome'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Probability of at least one unique outcome",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Probability of @ least one unique outcome'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Probability of at least one unique outcome",
      "word_to_symbol_change": "Probability of @ least one unique outcome"
    },
    "new_question_correct_value": "How many comments and answers were left by the users on the post with the title 'Probability of at least one unique outcome'?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Champs and States' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Champs and States",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "values_list": [
      "sets.name.champs_and_states"
    ],
    "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the name of the cards in the set Champs & States with the highest converted mana cost.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "changes_information": {
      "original_value": "Champs and States",
      "word_to_symbol_change": "Champs & States"
    },
    "new_question_correct_value": "Please list the name of the cards in the set Champs and States with the highest converted mana cost."
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Champs and States' AND T1.artist = 'Chippy') OR (T2.name = 'Champs and States' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Champs and States' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "sets.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Champs and States",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Jeremy Jarvis",
        "condition": "="
      },
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      },
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Aaron Miller",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
    "values_list": [
      "sets.name.champs_and_states",
      "cards.artist.jeremy jarvis",
      "sets.name.coldsnap",
      "cards.artist.chippy",
      "sets.name.coldsnap",
      "cards.artist.aaron miller"
    ],
    "original_question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "question": "Which of these artists have designed a card in the set Champs & States, Jeremy Jarvis, Aaron Miller or Chippy?",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "changes_information": {
      "original_value": "Champs and States",
      "word_to_symbol_change": "Champs & States"
    },
    "new_question_correct_value": "Which of these artists have designed a card in the set Champs and States, Jeremy Jarvis, Aaron Miller or Chippy?"
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Champs and States' AND T1.number = 4",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.name",
      "cards.number",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Champs and States",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "number",
        "value": "4",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
    "values_list": [
      "sets.name.champs_and_states",
      "cards.number.4"
    ],
    "original_question": "What is card number 4 in the set Coldsnap?",
    "question": "What is card number 4 in the set Champs & States?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "changes_information": {
      "original_value": "Champs and States",
      "word_to_symbol_change": "Champs & States"
    },
    "new_question_correct_value": "What is card number 4 in the set Champs and States?"
  },
  {
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Champs and States'",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.name",
      "sets.parentcode"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Champs and States",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "values_list": [
      "sets.name.commander 2014 oversized"
    ],
    "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "question": "For the set \"Champs & States\" , give its parent code.",
    "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "changes_information": {
      "original_value": "Champs and States",
      "word_to_symbol_change": "Champs & States"
    },
    "new_question_correct_value": "For the set \"Champs and States\" , give its parent code."
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Toxin & Disease Control'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    },
    "new_question_correct_value": "List the superheroes from Marvel Comics who have the super power of 'Toxin and Disease Control'."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Toxin & Disease Control?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    },
    "new_question_correct_value": "What are the names of the superheroes with the power of Toxin and Disease Control?"
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.toxin_and_disease_control"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Toxin & Disease Control power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    },
    "new_question_correct_value": "List the name of superheroes with Toxin and Disease Control power."
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.toxin_and_disease_control"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Toxin & Disease Control power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    },
    "new_question_correct_value": "Provide superheroes' names who have the Toxin and Disease Control power."
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Toxin and Disease Control'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.toxin_and_disease_control"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Toxin & Disease Control?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    },
    "new_question_correct_value": "What is the power ID of Toxin and Disease Control?"
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Toxin and Disease Control'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Toxin & Disease Control.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    },
    "new_question_correct_value": "Identify the gender of the superhero who has the ability of Toxin and Disease Control."
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user blue & grey?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "Please list the titles of the posts owned by the user blue and grey?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by blue & grey and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "What is the title of the post that is owned by blue and grey and has the highest popularity?"
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by blue & grey.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "Please list the names of the badges obtained by blue and grey."
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by blue & grey.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "List the title of posts which were edited by blue and grey."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"blue & grey\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "What is the name of badge that the user whose display name is \"blue and grey\" obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"blue & grey\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "State the name of badge that the user whose display name is \"blue and grey\" obtained."
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by blue & grey's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "What is the name of tags used by blue and grey's?"
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by blue & grey has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "Which post by blue and grey has the most answers count? State the post ID."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by blue & grey and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "Among posts by blue and grey and Noah Snyder, which one has higher popularity?"
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'blue and grey' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by blue & grey has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "Which post by blue and grey has the most views? Please give the id and title of this post."
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name blue & grey.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "Identify the latest badge awarded to the user with the display name blue and grey."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'blue and grey'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'blue & grey'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'blue and grey'?"
  },
  {
    "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
    "tables": [
      "users",
      "comments"
    ],
    "columns": [
      "comments.text",
      "users.id",
      "comments.userid",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "List the comments commented by the user with a username of Harvey Motulsky.",
    "question": "List the comments commented by the user with a username of blue & grey.",
    "original_SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "List the comments commented by the user with a username of blue and grey."
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user Dazed & Confused?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "Please list the titles of the posts owned by the user Dazed and Confused?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by Dazed & Confused and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "What is the title of the post that is owned by Dazed and Confused and has the highest popularity?"
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Dazed & Confused.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "Please list the names of the badges obtained by Dazed and Confused."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Dazed & Confused\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "For the user whose display name is \"Dazed and Confused\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Dazed & Confused' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "What is the badge name that user 'Dazed and Confused' obtained?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by Dazed & Confused.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "List the title of posts which were edited by Dazed and Confused."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Dazed & Confused\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "What is the name of badge that the user whose display name is \"Dazed and Confused\" obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Dazed & Confused\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "State the name of badge that the user whose display name is \"Dazed and Confused\" obtained."
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by Dazed & Confused's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "What is the name of tags used by Dazed and Confused's?"
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by Dazed & Confused has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "Which post by Dazed and Confused has the most answers count? State the post ID."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by Dazed & Confused and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "Among posts by Dazed and Confused and Noah Snyder, which one has higher popularity?"
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Dazed and Confused' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by Dazed & Confused has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "Which post by Dazed and Confused has the most views? Please give the id and title of this post."
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Dazed & Confused.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "Identify the latest badge awarded to the user with the display name Dazed and Confused."
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Dazed & Confused' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'Dazed and Confused' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Dazed and Confused'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Dazed & Confused'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'Dazed and Confused'?"
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Dazed and Confused'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Dazed & Confused' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    },
    "new_question_correct_value": "When did the user known as 'Dazed and Confused' create his or her account?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user Ben & Smiley?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "Please list the titles of the posts owned by the user Ben Smiley?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by Ben & Smiley and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "What is the title of the post that is owned by Ben Smiley and has the highest popularity?"
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Ben & Smiley.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "Please list the names of the badges obtained by Ben Smiley."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Ben & Smiley\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "For the user whose display name is \"Ben Smiley\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Ben & Smiley' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "What is the badge name that user 'Ben Smiley' obtained?"
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by Ben & Smiley.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "List the title of posts which were edited by Ben Smiley."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Ben & Smiley\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "What is the name of badge that the user whose display name is \"Ben Smiley\" obtained?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Ben & Smiley\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "State the name of badge that the user whose display name is \"Ben Smiley\" obtained."
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by Ben & Smiley's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "What is the name of tags used by Ben Smiley's?"
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by Ben & Smiley has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "Which post by Ben Smiley has the most answers count? State the post ID."
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by Ben & Smiley and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "Among posts by Ben Smiley and Noah Snyder, which one has higher popularity?"
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Ben Smiley' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by Ben & Smiley has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "Which post by Ben Smiley has the most views? Please give the id and title of this post."
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Ben & Smiley.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "Identify the latest badge awarded to the user with the display name Ben Smiley."
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Ben & Smiley' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'Ben Smiley' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Ben Smiley'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Ben & Smiley'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "What is the reputation and view count of the user, who is known by his or her display name 'Ben Smiley'?"
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Ben Smiley'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Ben & Smiley' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    },
    "new_question_correct_value": "When did the user known as 'Ben Smiley' create his or her account?"
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Some where between this world and the other'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Some where between this world and the other",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in Some where between this world & the other obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "Some where between this world and the other",
      "word_to_symbol_change": "Some where between this world & the other"
    },
    "new_question_correct_value": "List out the dates that users who are located in Some where between this world and the other obtained their badges?"
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Some where between this world and the other'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Some where between this world and the other",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in Some where between this world & the other obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "Some where between this world and the other",
      "word_to_symbol_change": "Some where between this world & the other"
    },
    "new_question_correct_value": "List out the age of users who located in Some where between this world and the other obtained the badge?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'Some where between this world and the other'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Some where between this world and the other",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "values_list": [
      "users.location.north pole"
    ],
    "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "question": "Provide the badge names received in 2011 for the user whose location is in the Some where between this world & the other.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "changes_information": {
      "original_value": "Some where between this world and the other",
      "word_to_symbol_change": "Some where between this world & the other"
    },
    "new_question_correct_value": "Provide the badge names received in 2011 for the user whose location is in the Some where between this world and the other."
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'University of Texas at Austin'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "University of Texas at Austin",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in University of Texas @ Austin obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "University of Texas at Austin",
      "word_to_symbol_change": "University of Texas @ Austin"
    },
    "new_question_correct_value": "List out the dates that users who are located in University of Texas at Austin obtained their badges?"
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'University of Texas at Austin'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "University of Texas at Austin",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in University of Texas @ Austin obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "University of Texas at Austin",
      "word_to_symbol_change": "University of Texas @ Austin"
    },
    "new_question_correct_value": "List out the age of users who located in University of Texas at Austin obtained the badge?"
  },
  {
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Photosensitivities'",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.id",
      "examination.diagnosis",
      "examination.examination date"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Photosensitivities",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "values_list": [
      "examination.diagnosis.photosensitivities"
    ],
    "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "question": "Lists all patients by ID who were diagnosed with Sensitivity to photos's and had their exams between 01/01/197 and 12/31/1997.",
    "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "changes_information": {
      "original_value": "Photosensitivities",
      "paraphrasing": "Sensitivity to photos"
    },
    "new_question_correct_value": "Lists all patients by ID who were diagnosed with Photosensitivities's and had their exams between 01/01/197 and 12/31/1997."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Moses Magnum'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Moses Magnum",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Moses Magum as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Moses Magnum",
      "typo_deletion": "Moses Magum"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Moses Magnum as their full name?"
  },
  {
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Photosensitivities'",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.id",
      "examination.diagnosis",
      "examination.examination date"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Photosensitivities",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "values_list": [
      "examination.diagnosis.photosensitivities"
    ],
    "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "question": "Lists all patients by ID who were diagnosed with Photo sensitivities's and had their exams between 01/01/197 and 12/31/1997.",
    "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "changes_information": {
      "original_value": "Photosensitivities",
      "typo_space_addition": "Photo sensitivities"
    },
    "new_question_correct_value": "Lists all patients by ID who were diagnosed with Photosensitivities's and had their exams between 01/01/197 and 12/31/1997."
  },
  {
    "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Ransom';",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.related_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "List all owner of documents that is related to documents owned by Braeden.",
    "question": "List all owner of documents that is related to documents owned by Ransmo.",
    "original_SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "List all owner of documents that is related to documents owned by Ransom."
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'collagen disease' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "collagen disease",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.collagen_disease"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with colalgen disease disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "collagen disease",
      "typo_transposition": "colalgen disease"
    },
    "new_question_correct_value": "What is the most common sign of patients with collagen disease disease?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"blue & grey\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "For the user whose display name is \"blue and grey\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'blue & grey' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "What is the badge name that user 'blue and grey' obtained?"
  },
  {
    "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "users",
      "comments"
    ],
    "columns": [
      "comments.text",
      "users.id",
      "comments.userid",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
    "values_list": [
      "users.displayname.a lion"
    ],
    "original_question": "Write all comments made by user 'A Lion.'",
    "question": "Write all comments made by user 'blue & grey.'",
    "original_SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "Write all comments made by user 'blue and grey.'"
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'blue & grey' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'blue and grey' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'blue and grey'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'blue & grey' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "When did the user known as 'blue and grey' create his or her account?"
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Bizarre and beautiful world",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in Bizarre & beautiful world obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "Bizarre and beautiful world",
      "word_to_symbol_change": "Bizarre & beautiful world"
    },
    "new_question_correct_value": "List out the dates that users who are located in Bizarre and beautiful world obtained their badges?"
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Bizarre and beautiful world",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in Bizarre & beautiful world obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "Bizarre and beautiful world",
      "word_to_symbol_change": "Bizarre & beautiful world"
    },
    "new_question_correct_value": "List out the age of users who located in Bizarre and beautiful world obtained the badge?"
  }
]