[
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.full_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Intelligence",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "values_list": [
      "attribute.attribute_name.intelligence"
    ],
    "original_question": "What is the hero's full name with the highest attribute in strength?",
    "question": "What is the hero's full name with the highest attribute in Int.?",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Intelligence",
      "abbreviation_acronym": "Int."
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Fav Question.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Favorite Question",
      "abbreviation_acronym": "Fav Question"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Fav Question Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Favorite Question",
      "abbreviation_acronym": "Fav Question"
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Favorite Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Fav Question badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Favorite Question",
      "abbreviation_acronym": "Fav Question"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Favorite Question' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Favorite Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.favorite_question"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Fav Question badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Favorite Question",
      "abbreviation_acronym": "Fav Question"
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the RA badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Research Assistant",
      "abbreviation_acronym": "RA"
    }
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "question": "How much did the Student_Club members spend on Ad in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "abbreviation_acronym": "Ad"
    }
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Ad.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Advertisement",
      "abbreviation_acronym": "Ad"
    }
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Richard Wright'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by R Wright.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    }
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Richard Wright' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from R Wright artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    }
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Richard Wright'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that R Wright created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Richard Wright' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by R Wright? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Richard Wright'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Richard Wright",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards R Wright worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Richard Wright",
      "abbreviation_acronym": "R Wright"
    }
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Monte Michael Moore'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Monte M. Moore.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    }
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Monte Michael Moore'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Monte M. Moore cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    }
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Monte Michael Moore' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Monte M. Moore artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    }
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Monte Michael Moore'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Monte M. Moore created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Monte Michael Moore' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Monte M. Moore? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Monte Michael Moore'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Monte Michael Moore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Monte M. Moore worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Monte Michael Moore",
      "abbreviation_acronym": "Monte M. Moore"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Deal Damage'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Deal Damage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Deal DMG'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Deal Damage",
      "abbreviation_acronym": "Deal DMG"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Deal Damage'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Deal Damage",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.deal_damage"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Deal DMG\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Deal Damage",
      "abbreviation_acronym": "Deal DMG"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Defense of the Heart'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Def of the Heart'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    }
  },
  {
    "SQL": "SELECT promoTypes FROM cards WHERE name = 'Defense of the Heart' AND promoTypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
    "values_list": [
      "cards.name.defense_of_the_heart"
    ],
    "original_question": "What type of promotion is of card 'Duress'?",
    "question": "What type of promotion is of card 'Def of the Heart'?",
    "original_SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.defense_of_the_heart"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Def of the Heart\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Def of the Heart\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    }
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.defense_of_the_heart"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Def of the Heart' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Defense of the Heart'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.defense_of_the_heart"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Def of the Heart\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Defense of the Heart' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Defense of the Heart",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Def of the Heart\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Defense of the Heart",
      "abbreviation_acronym": "Def of the Heart"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Precinct Captain'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Precinct Capt'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Precinct Capt\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Precinct Capt\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    }
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Precinct Capt\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Precinct Capt\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Precinct Captain'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.precinct_captain"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Precinct Capt\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Precinct Captain' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Precinct Capt\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Precinct Captain' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Precinct Captain",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Precinct Capt\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Precinct Captain",
      "abbreviation_acronym": "Precinct Capt"
    }
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Enchant Permanent'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Enchant Permanent",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Enchant Perm and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Enchant Permanent",
      "abbreviation_acronym": "Enchant Perm"
    }
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'New York State'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "New York State",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.new_york_state"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in NY State.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "New York State",
      "abbreviation_acronym": "NY State"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Bahrain Intl Circuit be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Bahrain Intl Circuit?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Bahrain Intl Circuit.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    }
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Bahrain International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Bahrain Intl Circuit?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    }
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Bahrain International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Bahrain Intl Circuit?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Bahrain Intl Circuit was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Bahrain International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Bahrain Intl Circuit.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    }
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Bahrain International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Bahrain International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.bahrain_international_circuit"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Bahrain Intl Circuit circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Bahrain International Circuit",
      "abbreviation_acronym": "Bahrain Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Okayama Intl Circuit be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Okayama Intl Circuit?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Okayama Intl Circuit.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    }
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Okayama International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Okayama Intl Circuit?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    }
  },
  {
    "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Okayama International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.circuitref",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "values_list": [
      "circuits.name.marina bay street circuit"
    ],
    "original_question": "What's the reference name of Marina Bay Street Circuit?",
    "question": "What's the reference name of Okayama Intl Circuit?",
    "original_SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Okayama Intl Circuit was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Okayama International Circuit'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Okayama Intl Circuit.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    }
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Okayama International Circuit'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Okayama International Circuit",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.okayama_international_circuit"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Okayama Intl Circuit circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Okayama International Circuit",
      "abbreviation_acronym": "Okayama Intl Circuit"
    }
  },
  {
    "SQL": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Great Britain' OR T1.nation  =  'Great Britain'",
    "tables": [
      "cyclists_own_bikes",
      "cyclist",
      "bike"
    ],
    "columns": [
      "bike.id",
      "cyclist.nation",
      "bike.product_name",
      "cyclists_own_bikes.bike_id",
      "cyclist.id",
      "cyclists_own_bikes.cyclist_id"
    ],
    "values": [
      {
        "table": "cyclist",
        "column": "nation",
        "value": "Great Britain",
        "condition": "="
      },
      {
        "table": "cyclist",
        "column": "nation",
        "value": "Great Britain",
        "condition": "="
      }
    ],
    "db_id": "bike_racing",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "cyclist.nation.great_britain",
      "cyclist.nation.great britain"
    ],
    "original_question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "question": "What are the distinct product names of bikes owned by cyclists from 'GB' or cyclists from 'Great Britain'?",
    "original_SQL": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
    "changes_information": {
      "original_value": "Great Britain",
      "abbreviation_acronym": "GB"
    }
  },
  {
    "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' ORDER BY T1.date ASC LIMIT 1",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "account.account_id",
      "account.district_id",
      "district.a3",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "north Bohemia",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "A3 stands for region names",
    "values_list": [
      "district.a3.north_bohemia"
    ],
    "original_question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
    "question": "For the first client who opened his/her account in N Bohemia, what is his/her account ID?",
    "original_SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
    "changes_information": {
      "original_value": "north Bohemia",
      "abbreviation_acronym": "N Bohemia"
    }
  },
  {
    "SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'north Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
    "tables": [
      "disp",
      "district",
      "client",
      "account"
    ],
    "columns": [
      "client.district_id",
      "disp.account_id",
      "account.account_id",
      "disp.client_id",
      "account.district_id",
      "district.a3",
      "client.birth_date",
      "district.district_id",
      "client.client_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "north Bohemia",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "district.a3.east bohemia"
    ],
    "original_question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
    "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in N Bohemia, along with their IDs.",
    "original_SQL": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
    "changes_information": {
      "original_value": "north Bohemia",
      "abbreviation_acronym": "N Bohemia"
    }
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Ransom Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What is the owner of document with the Description 'Braeden Collection'?",
    "question": "What is the owner of document with the Description 'Ransom Coll'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Ransom Collection",
      "abbreviation_acronym": "Ransom Coll"
    }
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Ransom Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "question": "What are the owners of the document objects described as the 'Ransom Coll'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Ransom Collection",
      "abbreviation_acronym": "Ransom Coll"
    }
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'Mar Meeting' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "March Meeting",
      "abbreviation_acronym": "Mar Meeting"
    }
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "member.first_name",
      "attendance.link_to_member",
      "event.event_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Laugh Out Loud",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
    "values_list": [
      "event.event_name.laugh out loud"
    ],
    "original_question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "question": "List the full name of all the members of the Student_Club who attended the \"LOL\" event.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "changes_information": {
      "original_value": "Laugh Out Loud",
      "abbreviation_acronym": "LOL"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in Chinese Simp..",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    }
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in Chinese Simp..",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and Chinese Simp. language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    }
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Chinese Simplified'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.chinese_simplified",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in Chinese Simp.. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    }
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Chinese Simp..",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Chinese Simp. text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    }
  },
  {
    "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified' ORDER BY T2.convertedManaCost DESC",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the Chinese Simp. names of the cards in the set Coldsnap with the highest converted mana cost.",
    "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "abbreviation_acronym": "Chinese Simp."
    }
  },
  {
    "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'Lieutenant du consul'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language",
      "foreign_data.name"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "name",
        "value": "Lieutenant du consul",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "values_list": [
      "foreign_data.name.a pedra fellwar"
    ],
    "original_question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "question": "Which foreign language used by \"Lt du consul\"?",
    "original_SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "changes_information": {
      "original_value": "Lieutenant du consul",
      "abbreviation_acronym": "Lt du consul"
    }
  },
  {
    "SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
    "tables": [
      "gasstations"
    ],
    "columns": [
      "gasstations.segment",
      "gasstations.gasstationid"
    ],
    "values": [
      {
        "table": "gasstations",
        "column": "segment",
        "value": "Value for money",
        "condition": "="
      },
      {
        "table": "",
        "column": "segment",
        "value": "Value for money",
        "condition": "="
      },
      {
        "table": "",
        "column": "segment",
        "value": "Value for money",
        "condition": "="
      }
    ],
    "db_id": "debit_card_specializing",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "gasstations.segment.value for money",
      ".segment.value for money",
      ".segment.value for money"
    ],
    "original_question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
    "question": "Which country has more \"VFM\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
    "original_SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Value for money",
      "abbreviation_acronym": "VFM"
    }
  },
  {
    "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "major.major_id",
      "member.position",
      "major.college"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "LIKE"
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Vice President is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "Which college is the vice president of the Student_Club from?",
    "question": "Which college is the VP of the Student_Club from?",
    "original_SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    }
  },
  {
    "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "income"
    ],
    "columns": [
      "income.link_to_member",
      "member.member_id",
      "member.position",
      "income.amount"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "What is the amount of the funds that the Vice President received?",
    "question": "What is the amount of the funds that the VP received?",
    "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    }
  },
  {
    "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the major name for the Vice President of the club.",
    "question": "State the major name for the VP of the club.",
    "original_SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    }
  },
  {
    "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.department",
      "major.major_id",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "Which department was the President of the club in?",
    "question": "Which department was the VP of the club in?",
    "original_SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    }
  },
  {
    "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "expense"
    ],
    "columns": [
      "expense.link_to_member",
      "member.member_id",
      "member.position",
      "expense.expense_id",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "List all the expenses incurred by the vice president.",
    "question": "List all the expenses incurred by the VP.",
    "original_SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    }
  },
  {
    "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Vice President'",
    "tables": [
      "member"
    ],
    "columns": [
      "member.email",
      "member.first_name",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
    "question": "Provide the full name and email address of the Student_Club's VP.",
    "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    }
  },
  {
    "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the name of major that Vice President has joined.",
    "question": "State the name of major that VP has joined.",
    "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    }
  },
  {
    "SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "tables": [
      "member",
      "event",
      "attendance"
    ],
    "columns": [
      "attendance.link_to_event",
      "event.event_name",
      "member.member_id",
      "event.type",
      "attendance.link_to_member",
      "member.position",
      "event.event_id",
      "event.location"
    ],
    "values": [
      {
        "table": "event",
        "column": "type",
        "value": "Social",
        "condition": "="
      },
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      },
      {
        "table": "event",
        "column": "location",
        "value": "900 E. Washington St.",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
    "values_list": [
      "event.type.social",
      "member.position.vice president",
      "event.location.900 e. washington st."
    ],
    "original_question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "question": "What is the name of the social event that was attended by the VP of the Student_Club located at 900 E. Washington St.?",
    "original_SQL": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    }
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Vice President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.major_id",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Vice President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last name",
    "values_list": [
      "member.position.vice_president"
    ],
    "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "question": "Write the full name of the club member with the position of 'VP' and list which college the club member belongs to.",
    "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "changes_information": {
      "original_value": "Vice President",
      "abbreviation_acronym": "VP"
    }
  },
  {
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Central City District Residential Museum'",
    "tables": [
      "museum"
    ],
    "columns": [
      "museum.num_of_staff",
      "museum.name",
      "museum.open_year"
    ],
    "values": [
      {
        "table": "museum",
        "column": "name",
        "value": "Central City District Residential Museum",
        "condition": "="
      }
    ],
    "db_id": "museum_visit",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "museum.name.plaza museum"
    ],
    "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "question": "What are the opening year and staff number of the museum named CCD Residential Museum?",
    "original_SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "changes_information": {
      "original_value": "Central City District Residential Museum",
      "abbreviation_acronym": "CCD Residential Museum"
    }
  },
  {
    "SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Vermont'",
    "tables": [
      "owners",
      "dogs"
    ],
    "columns": [
      "owners.state",
      "dogs.owner_id",
      "dogs.name",
      "owners.first_name",
      "owners.owner_id"
    ],
    "values": [
      {
        "table": "owners",
        "column": "state",
        "value": "Vermont",
        "condition": "="
      }
    ],
    "db_id": "dog_kennels",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "owners.state.vermont"
    ],
    "original_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
    "question": "Which dogs are owned by someone who lives in VT? List the owner's first name and the dog's name.",
    "original_SQL": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
    "changes_information": {
      "original_value": "Vermont",
      "abbreviation_acronym": "VT"
    }
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.heading_accuracy",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "values_list": [
      "player.player_name.francois affolter"
    ],
    "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "question": "What is the football player Adrian R. Centurion header's finishing rate on 18/09/2014?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    }
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Adrian R. Centurion\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    }
  },
  {
    "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.potential",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "potential score refers to potential;",
    "values_list": [
      "player.player_name.aaron doran"
    ],
    "original_question": "What is Aaron Doran's potential score?",
    "question": "What is Adrian R. Centurion's potential score?",
    "original_SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    }
  },
  {
    "SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Adrian Ricardo Centurion' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player.player_fifa_api_id",
      "player_attributes.crossing",
      "player_attributes.date",
      "player_attributes.player_fifa_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Adrian Ricardo Centurion",
        "condition": "="
      },
      {
        "table": "player",
        "column": "player_name",
        "value": "Kevin Constant",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "values_list": [
      "player.player_name.kevin constant",
      "player.player_name.kevin constant"
    ],
    "original_question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "question": "When was the first time did Adrian R. Centurion have his highest crossing score? Give the date.",
    "original_SQL": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Adrian Ricardo Centurion",
      "abbreviation_acronym": "Adrian R. Centurion"
    }
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Classifier success rate and CI\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    }
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Classifier success rate and confidence intervals'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Classifier success rate and confidence intervals",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Classifier success rate and CI\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Classifier success rate and confidence intervals",
      "abbreviation_acronym": "Classifier success rate and CI"
    }
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Sony Pictures'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of Sony Pics.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "Sony Pictures",
      "abbreviation_acronym": "Sony Pics"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Animal Atts'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.animal_attributes"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Animal Atts power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.animal_attributes"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Animal Atts power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    }
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Animal Attributes'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.animal_attributes"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Animal Atts?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    }
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Animal Atts.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "abbreviation_acronym": "Animal Atts"
    }
  },
  {
    "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'West Ham United'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team_attributes.team_fifa_api_id",
      "team.team_fifa_api_id",
      "team_attributes.buildupplaypositioningclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "values_list": [
      "team.team_long_name.ado den haag"
    ],
    "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "question": "What is the WHU team freedom of movement in the 1st two thirds of the pitch?",
    "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    }
  },
  {
    "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "values_list": [
      "team.team_long_name.west_ham_united"
    ],
    "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "question": "What is WHU's highest chance creation passing score and what is it classified as?",
    "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    }
  },
  {
    "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplayspeedclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
    "values_list": [
      "team.team_long_name.willem ii"
    ],
    "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "question": "What was the build up play speed class for \"WHU\" on 2011/2/22?",
    "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    }
  },
  {
    "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "values_list": [
      "team.team_long_name.pec zwolle"
    ],
    "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "question": "State the chance creation passing class for \"WHU\" on 2013/9/20.",
    "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    }
  },
  {
    "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'West Ham United' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team.team_long_name",
      "team_attributes.chancecreationcrossingclass"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "West Ham United",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "values_list": [
      "team.team_long_name.hull city"
    ],
    "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "question": "What was the chance creation crossing class for \"WHU\" on 2010/2/22?",
    "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "changes_information": {
      "original_value": "West Ham United",
      "abbreviation_acronym": "WHU"
    }
  },
  {
    "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "tables": [
      "team"
    ],
    "columns": [
      "team.team_short_name",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
    "values_list": [
      "team.team_long_name.queens park rangers"
    ],
    "original_question": "What is the short name of the football team Queens Park Rangers?",
    "question": "What is the short name of the football team QPR?",
    "original_SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    }
  },
  {
    "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'Queens Park Rangers'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team_attributes.team_fifa_api_id",
      "team.team_fifa_api_id",
      "team_attributes.buildupplaypositioningclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "values_list": [
      "team.team_long_name.ado den haag"
    ],
    "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "question": "What is the QPR team freedom of movement in the 1st two thirds of the pitch?",
    "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    }
  },
  {
    "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "values_list": [
      "team.team_long_name.queens_park_rangers"
    ],
    "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "question": "What is QPR's highest chance creation passing score and what is it classified as?",
    "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    }
  },
  {
    "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplayspeedclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
    "values_list": [
      "team.team_long_name.willem ii"
    ],
    "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "question": "What was the build up play speed class for \"QPR\" on 2011/2/22?",
    "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    }
  },
  {
    "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "values_list": [
      "team.team_long_name.pec zwolle"
    ],
    "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "question": "State the chance creation passing class for \"QPR\" on 2013/9/20.",
    "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    }
  },
  {
    "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Queens Park Rangers' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team.team_long_name",
      "team_attributes.chancecreationcrossingclass"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "values_list": [
      "team.team_long_name.hull city"
    ],
    "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "question": "What was the chance creation crossing class for \"QPR\" on 2010/2/22?",
    "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    }
  },
  {
    "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'Queens Park Rangers'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team.team_long_name",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.team_api_id"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "Queens Park Rangers",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "values_list": [
      "team.team_long_name.ksv cercle brugge"
    ],
    "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "question": "Does the QPR team have a slow, balanced or fast speed class?",
    "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "changes_information": {
      "original_value": "Queens Park Rangers",
      "abbreviation_acronym": "QPR"
    }
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Massachusetts'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Massachusetts",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in MA obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "Massachusetts",
      "abbreviation_acronym": "MA"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'Massachusetts'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Massachusetts",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "values_list": [
      "users.location.north pole"
    ],
    "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "question": "Provide the badge names received in 2011 for the user whose location is in the MA.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "changes_information": {
      "original_value": "Massachusetts",
      "abbreviation_acronym": "MA"
    }
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'South Africa'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "South Africa",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in SAfrica obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "South Africa",
      "abbreviation_acronym": "SAfrica"
    }
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'South Africa'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "South Africa",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in SAfrica obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "South Africa",
      "abbreviation_acronym": "SAfrica"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'South Africa'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "South Africa",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "values_list": [
      "users.location.north pole"
    ],
    "original_question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "question": "Provide the badge names received in 2011 for the user whose location is in the SAfrica.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "changes_information": {
      "original_value": "South Africa",
      "abbreviation_acronym": "SAfrica"
    }
  },
  {
    "SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
    "tables": [
      "users"
    ],
    "columns": [
      "users.first_name",
      "users.user_category_code",
      "users.login_name"
    ],
    "values": [
      {
        "table": "users",
        "column": "user_category_code",
        "value": "Senior Citizen",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "users.user_category_code.senior citizen"
    ],
    "original_question": "Find the login names of all senior citizen users ordered by their first names.",
    "question": "Find the login names of all Sr Citizen users ordered by their first names.",
    "original_SQL": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
    "changes_information": {
      "original_value": "Senior Citizen",
      "abbreviation_acronym": "Sr Citizen"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Popular Question' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Popular Q.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Popular Question",
      "clipping": "Popular Q"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Popular Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Popular Q Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Popular Question",
      "clipping": "Popular Q"
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Popular Question'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Popular Q badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Popular Question",
      "clipping": "Popular Q"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Popular Question' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Popular Question",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.popular_question"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Popular Q badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Popular Question",
      "clipping": "Popular Q"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Research Asst..'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Research Assistant",
      "clipping": "Research Asst."
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Research Asst. Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Research Assistant",
      "clipping": "Research Asst."
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Research Assistant'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Research Asst. badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Research Assistant",
      "clipping": "Research Asst."
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Research Assistant' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Research Assistant",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.research_assistant"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Research Asst. badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Research Assistant",
      "clipping": "Research Asst."
    }
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "question": "How much did the Student_Club members spend on Advert. in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "clipping": "Advert."
    }
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Advertisement' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Advertisement' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.advertisement",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Advert.\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Advertisement",
      "clipping": "Advert."
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.misinformation"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Misinfo.\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Misinfo.\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Misinformation'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Misinfo.\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    }
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Misinformation'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Misinfo.\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Misinformation'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Misinfo.\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Misinformation'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Misinformation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.misinformation"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Misinfo.\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Misinformation",
      "clipping": "Misinfo."
    }
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name;",
    "values_list": [
      "major.department.art and design department"
    ],
    "original_question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "question": "Please list the full names of the students in the Student_Club that come from the Physics Dept.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "changes_information": {
      "original_value": "Physics Department",
      "clipping": "Physics Dept"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Statistics collaboration'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Statistics collab.\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Statistics collaboration'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Statistics collab.\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    }
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Statistics collaboration'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Statistics collab.\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    }
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Statistics collaboration'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Statistics collab.\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    }
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Statistics collaboration' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Statistics collab.' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    }
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Statistics collaboration'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Statistics collab.'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    }
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Statistics collaboration'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Statistics collaboration",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Statistics collab.\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Statistics collaboration",
      "clipping": "Statistics collab."
    }
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Test Statistics'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Test Statistics",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Test Stats'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Test Statistics",
      "clipping": "Test Stats"
    }
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Test Statistics'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Test Statistics",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Test Stats\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Test Statistics",
      "clipping": "Test Stats"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Graphics encyclopedia'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Graphics encycl\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Graphics encyclopedia'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Graphics encycl\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    }
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Graphics encyclopedia'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Graphics encycl\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    }
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Graphics encyclopedia'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Graphics encycl\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    }
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Graphics encyclopedia' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Graphics encycl' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    }
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Graphics encyclopedia'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Graphics encycl'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    }
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Graphics encyclopedia'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Graphics encyclopedia",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Graphics encycl\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Graphics encyclopedia",
      "clipping": "Graphics encycl"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Welch statistic'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Welch stat\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Welch statistic'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Welch stat\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    }
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Welch statistic'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Welch statistic",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Welch stat\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Welch statistic",
      "clipping": "Welch stat"
    }
  },
  {
    "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Sony Pictures'",
    "tables": [
      "publisher"
    ],
    "columns": [
      "publisher.id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Sony Pictures",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Star Trek is the publisher_name;",
    "values_list": [
      "publisher.publisher_name.star trek"
    ],
    "original_question": "Give the publisher ID of Star Trek.",
    "question": "Give the publisher ID of Sony Pics.",
    "original_SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "changes_information": {
      "original_value": "Sony Pictures",
      "clipping": "Sony Pics"
    }
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Christopher'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Christopher",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.christopher"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Chris.. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Christopher",
      "clipping": "Chris."
    }
  },
  {
    "SQL": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.enrollment (ages 5-17)",
      "frpm.cdscode",
      "schools.school",
      "schools.cdscode",
      "schools.doc",
      "frpm.enrollment (k-12)",
      "schools.fundingtype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "fundingtype",
        "value": "Locally funded",
        "condition": "="
      },
      {
        "table": "schools",
        "column": "fundingtype",
        "value": "Locally funded",
        "condition": "="
      },
      {
        "table": "schools",
        "column": "fundingtype",
        "value": "Locally funded",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "values_list": [
      "schools.fundingtype.locally funded",
      "schools.fundingtype.locally funded",
      "schools.fundingtype.locally funded"
    ],
    "original_question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are Locally fund, list the names and DOC type of schools which has a difference above this average.",
    "original_SQL": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "changes_information": {
      "original_value": "Locally funded",
      "clipping": "Locally fund"
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of Captain Am.'s skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Who is the publisher of Sauron?",
    "question": "Who is the publisher of Captain Am.?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of Captain Am.?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is Captain Am.'s race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero Captain Am..",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero Captain Am. belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of Captain Am. hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of Captain Am.?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "What is Abomination's superpower?",
    "question": "What is Captain Am.'s superpower?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of Captain Am.'s attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down Captain Am.'s superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "What is Abomination's eye colour?",
    "question": "What is Captain Am.'s eye colour?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Captain America'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Captain America",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.captain_america"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of Captain Am..",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "Captain America",
      "clipping": "Captain Am."
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Fire Resistance",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Fire Resist'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Fire Resistance",
      "clipping": "Fire Resist"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Fire Resistance",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.fire_resistance"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Fire Resist power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Fire Resistance",
      "clipping": "Fire Resist"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Fire Resistance'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Fire Resistance",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.fire_resistance"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Fire Resist power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Fire Resistance",
      "clipping": "Fire Resist"
    }
  },
  {
    "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Benedictine University'",
    "tables": [
      "major",
      "major_ranking",
      "university"
    ],
    "columns": [
      "major_ranking.university_id",
      "major_ranking.major_id",
      "major_ranking.rank",
      "university.university_name",
      "major.major_id",
      "major.major_name",
      "university.university_id"
    ],
    "values": [
      {
        "table": "university",
        "column": "university_name",
        "value": "Benedictine University",
        "condition": "="
      }
    ],
    "db_id": "university_rank",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "university.university_name.augustana college"
    ],
    "original_question": "Show all majors and major ranks for the university with name Augustana College.",
    "question": "Show all majors and major ranks for the university with name Benedictine Uni.",
    "original_SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "changes_information": {
      "original_value": "Benedictine University",
      "clipping": "Benedictine Uni"
    }
  },
  {
    "SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Benedictine University'",
    "tables": [
      "major",
      "major_ranking",
      "university"
    ],
    "columns": [
      "major_ranking.university_id",
      "major_ranking.major_id",
      "major_ranking.rank",
      "university.university_name",
      "major.major_id",
      "major.major_name",
      "university.university_id"
    ],
    "values": [
      {
        "table": "university",
        "column": "university_name",
        "value": "Benedictine University",
        "condition": "="
      }
    ],
    "db_id": "university_rank",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "university.university_name.augustana college"
    ],
    "original_question": "What are the ranks and names of all majors at Augustana College?",
    "question": "What are the ranks and names of all majors at Benedictine Uni?",
    "original_SQL": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "changes_information": {
      "original_value": "Benedictine University",
      "clipping": "Benedictine Uni"
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Informed'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Informed",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.informed"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the not uninformed badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Informed",
      "negated_antonym": "not uninformed"
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Curious'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Curious",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.curious"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the not uncurious badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Curious",
      "negated_antonym": "not uncurious"
    }
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Indestructible'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Indestructible",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.indestructible"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of not destructible?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Indestructible",
      "negated_antonym": "not destructible"
    }
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.amount",
      "budget.link_to_event",
      "event.status",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "status",
        "value": "Closed",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
    "values_list": [
      "event.status.closed"
    ],
    "original_question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "question": "Among all the not open events, which event has the highest spend-to-budget ratio?",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Closed",
      "negated_antonym": "not open"
    }
  },
  {
    "SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.type",
      "event.event_name",
      "event.event_date",
      "event.status"
    ],
    "values": [
      {
        "table": "event",
        "column": "status",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "event",
        "column": "type",
        "value": "Game",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
    "values_list": [
      "event.status.closed",
      "event.type.game"
    ],
    "original_question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "question": "List the names of not open event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "original_SQL": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "changes_information": {
      "original_value": "Closed",
      "negated_antonym": "not open"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "values_list": [
      "cards.rarity.mythic",
      "legalities.format.gladiator",
      "legalities.status.banned"
    ],
    "original_question": "List all the mythic rarity print cards banned in gladiator format.",
    "question": "List all the mythic rarity print cards not permitted in gladiator format.",
    "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "changes_information": {
      "original_value": "Banned",
      "negated_antonym": "not permitted"
    }
  },
  {
    "SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "tables": [
      "cards",
      "legalities",
      "maxbanned"
    ],
    "columns": [
      "maxbanned.format",
      "legalities.format",
      "legalities.status",
      "cards.name",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
    "values_list": [
      "legalities.status.banned",
      "legalities.status.banned",
      ".status.banned"
    ],
    "original_question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "question": "Which of the play format has the highest number of not permitted status? Indicate the play format and the names of all the card meet the condition.",
    "original_SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "changes_information": {
      "original_value": "Banned",
      "negated_antonym": "not permitted"
    }
  },
  {
    "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.format",
      "legalities.status",
      "cards.name",
      "legalities.uuid",
      "cards.uuid",
      "cards.edhrecrank"
    ],
    "values": [
      {
        "table": "cards",
        "column": "edhrecrank",
        "value": "1",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "values_list": [
      "cards.edhrecrank.1",
      "legalities.status.banned"
    ],
    "original_question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its not permitted play format.",
    "original_SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "changes_information": {
      "original_value": "Banned",
      "negated_antonym": "not permitted"
    }
  },
  {
    "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "satscores.avgscrread",
      "schools.district",
      "schools.cdscode",
      "satscores.cds",
      "schools.statustype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "statustype",
        "value": "Active",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.statustype.active"
    ],
    "original_question": "Which active district has the highest average score in Reading?",
    "question": "Which not inactive district has the highest average score in Reading?",
    "original_SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "changes_information": {
      "original_value": "Active",
      "negated_antonym": "not inactive"
    }
  },
  {
    "SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.closeddate",
      "schools.school",
      "schools.county",
      "schools.statustype"
    ],
    "values": [
      {
        "table": "schools",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      },
      {
        "table": "",
        "column": "statustype",
        "value": "Closed",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
    "values_list": [
      "schools.statustype.closed",
      ".statustype.closed",
      ".statustype.closed"
    ],
    "original_question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "question": "Which different county has the most number of not open schools? Please provide the name of each school as well as the closure date.",
    "original_SQL": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "changes_information": {
      "original_value": "Closed",
      "negated_antonym": "not open"
    }
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'nonlinear'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "nonlinear",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.nonlinear"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named not linear?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "nonlinear",
      "negated_antonym": "not linear"
    }
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Speaker Gifts' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Speaker Gifts' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.speaker_gifts",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Gifts for speakers\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "paraphrasing": "Gifts for speakers"
    }
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Speaker Gifts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Gifts for speakers and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Speaker Gifts",
      "paraphrasing": "Gifts for speakers"
    }
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'March Meeting'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "March Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'Meeting in March' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "March Meeting",
      "paraphrasing": "Meeting in March"
    }
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Physics Department'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.department",
      "major.major_id",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "department",
        "value": "Physics Department",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name;",
    "values_list": [
      "major.department.art and design department"
    ],
    "original_question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "question": "Please list the full names of the students in the Student_Club that come from the Department of Physics.",
    "original_SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "changes_information": {
      "original_value": "Physics Department",
      "paraphrasing": "Department of Physics"
    }
  },
  {
    "SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Communication Studies'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.major_id",
      "major.major_name",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Communication Studies",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Business' is the major name",
    "values_list": [
      "major.major_name.communication_studies"
    ],
    "original_question": "List out the position of members who joined major of Business.",
    "question": "List out the position of members who joined major of Studies in Communication.",
    "original_SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
    "changes_information": {
      "original_value": "Communication Studies",
      "paraphrasing": "Studies in Communication"
    }
  },
  {
    "SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Communication Studies'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.phone",
      "member.link_to_major",
      "major.major_id",
      "major.major_name",
      "member.last_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Communication Studies",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Elementary Education' is the major name; phone numbers refers to phone",
    "values_list": [
      "major.major_name.elementary education"
    ],
    "original_question": "List the last names of students under the Elementary Education major and include their phone numbers.",
    "question": "List the last names of students under the Studies in Communication major and include their phone numbers.",
    "original_SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
    "changes_information": {
      "original_value": "Communication Studies",
      "paraphrasing": "Studies in Communication"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Weather Control",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Control the weather'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Weather Control",
      "paraphrasing": "Control the weather"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Weather Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Weather Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.weather_control"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Control the weather power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Weather Control",
      "paraphrasing": "Control the weather"
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'hypothesis-testing'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "hypothesis-testing",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.hypothesis-testing"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the hypothesis_testing badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "hypothesis-testing",
      "punct_change": "hypothesis_testing"
    }
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "mercedes-benz",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.mercedes-benz"
    ],
    "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "question": "For model mercedes_benz, how many cylinders does the car with the least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "mercedes-benz",
      "punct_change": "mercedes_benz"
    }
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "mercedes-benz",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.mercedes-benz"
    ],
    "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "question": "For a mercedes_benz model, how many cylinders does the version with least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "mercedes-benz",
      "punct_change": "mercedes_benz"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Zoltan Boros & Gabor Szikszai'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Zoltan Boros & Gabor Szikszai",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Zoltan Boros, Gabor Szikszai worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Zoltan Boros & Gabor Szikszai",
      "punct_change": "Zoltan Boros, Gabor Szikszai"
    }
  },
  {
    "SQL": "SELECT artist FROM cards WHERE flavorName = 'Godzilla, King of the Monsters'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.flavorname"
    ],
    "values": [
      {
        "table": "cards",
        "column": "flavorname",
        "value": "Godzilla, King of the Monsters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
    "values_list": [
      "cards.flavorname.battra, dark destroyer"
    ],
    "original_question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
    "question": "Which artist designed the card whose promotional name is \"Godzilla; King of the Monsters\"?",
    "original_SQL": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
    "changes_information": {
      "original_value": "Godzilla, King of the Monsters",
      "punct_change": "Godzilla; King of the Monsters"
    }
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Angel'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Creature - Angel",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Creature & Angel and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Creature - Angel",
      "punct_change": "Creature & Angel"
    }
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'tourney,fnm'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "tourney,fnm",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.tourney,fnm"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"tourney&fnm\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "tourney,fnm",
      "punct_change": "tourney&fnm"
    }
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Monte-Carlo'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Monte-Carlo",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.monte-carlo"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in Monte_Carlo.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Monte-Carlo",
      "punct_change": "Monte_Carlo"
    }
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Circuit de Barcelona-Catalunya",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Circuit de Barcelona,Catalunya?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Circuit de Barcelona-Catalunya",
      "punct_change": "Circuit de Barcelona,Catalunya"
    }
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'Officers meeting - January'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Officers meeting - January",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"Officers meeting , January\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "Officers meeting - January",
      "punct_change": "Officers meeting , January"
    }
  },
  {
    "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Officers meeting - January' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Officers meeting - January",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "values_list": [
      "event.event_name.april speaker"
    ],
    "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "question": "Calculate the amount budgeted for 'Officers meeting , January' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "changes_information": {
      "original_value": "Officers meeting - January",
      "punct_change": "Officers meeting , January"
    }
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Officers meeting - January'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "Officers meeting - January",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'Officers meeting , January' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "Officers meeting - January",
      "punct_change": "Officers meeting , January"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Post Cards, Posters'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Post Cards, Posters",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.post_cards,_posters"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'Post Cards& Posters' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Post Cards, Posters",
      "punct_change": "Post Cards& Posters"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in Portuguese [Brazil].",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    }
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in Portuguese [Brazil].",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and Portuguese [Brazil] language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    }
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Portuguese (Brazil)'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in Portuguese [Brazil]. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    }
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Portuguese [Brazil].",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Portuguese [Brazil] text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    }
  },
  {
    "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)' ORDER BY T2.convertedManaCost DESC",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the Portuguese [Brazil] names of the cards in the set Coldsnap with the highest converted mana cost.",
    "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese [Brazil]"
    }
  },
  {
    "SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'RA, SLE susp' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "tables": [
      "patient",
      "laboratory"
    ],
    "columns": [
      "laboratory.date",
      "patient.diagnosis",
      "laboratory.id",
      "patient.id",
      "patient.first date",
      "patient.birthday"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "RA, SLE susp",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
    "values_list": [
      "patient.diagnosis.ra,_sle_susp"
    ],
    "original_question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "question": "The oldest RA/ SLE susp patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "original_SQL": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "changes_information": {
      "original_value": "RA, SLE susp",
      "punct_change": "RA/ SLE susp"
    }
  },
  {
    "SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'RA, SLE susp' AND T2.PLT BETWEEN 100 AND 400",
    "tables": [
      "patient",
      "laboratory"
    ],
    "columns": [
      "patient.diagnosis",
      "patient.id",
      "laboratory.plt",
      "laboratory.id"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "RA, SLE susp",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
    "values_list": [
      "patient.diagnosis.ra,_sle_susp"
    ],
    "original_question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
    "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with RA/ SLE susp.",
    "original_SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400",
    "changes_information": {
      "original_value": "RA, SLE susp",
      "punct_change": "RA/ SLE susp"
    }
  },
  {
    "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Caesar III: An Empire Without End'",
    "tables": [
      "program",
      "director"
    ],
    "columns": [
      "program.title",
      "program.director_id",
      "director.director_id",
      "director.name"
    ],
    "values": [
      {
        "table": "program",
        "column": "title",
        "value": "Caesar III: An Empire Without End",
        "condition": "="
      }
    ],
    "db_id": "bbc_channels",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "program.title.caesar_iii:_an_empire_without_end"
    ],
    "original_question": "What is the name of the director who is in the \"Dracula\" program?",
    "question": "What is the name of the director who is in the \"Caesar III; An Empire Without End\" program?",
    "original_SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "changes_information": {
      "original_value": "Caesar III: An Empire Without End",
      "punct_change": "Caesar III; An Empire Without End"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'God / Eternal'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "God / Eternal",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.god_/_eternal"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the God - Eternal superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "God / Eternal",
      "punct_change": "God - Eternal"
    }
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'God / Eternal'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "God / Eternal",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.god_/_eternal"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of God - Eternal superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "God / Eternal",
      "punct_change": "God - Eternal"
    }
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Agua-Dulce' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "Agua-Dulce",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.agua-dulce"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of Agua_Dulce?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Agua-Dulce",
      "punct_change": "Agua_Dulce"
    }
  },
  {
    "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.totalsetsize",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "List all the sets available in Italian translation. State the total number of cards per set.",
    "question": "List all the sets available in Portuguese {Brasil} translation. State the total number of cards per set.",
    "original_SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese {Brasil}"
    }
  },
  {
    "SQL": "SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)'",
    "tables": [
      "set_translations"
    ],
    "columns": [
      "set_translations.setcode",
      "set_translations.language"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; set code refers to setCode",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Lists the set code of all cards translated into Spanish.",
    "question": "Lists the set code of all cards translated into Portuguese {Brasil}.",
    "original_SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_change": "Portuguese {Brasil}"
    }
  },
  {
    "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'draft_innovation'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "type",
        "value": "draft_innovation",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "code of sets refers to setCode",
    "values_list": [
      "sets.type.draft_innovation"
    ],
    "original_question": "Give the code of sets have expansion commander type?",
    "question": "Give the code of sets have expansion draft-innovation type?",
    "original_SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
    "changes_information": {
      "original_value": "draft_innovation",
      "punct_change": "draft-innovation"
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Teth-Adam'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Teth/Adam?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Teth-Adam'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Teth/Adam.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    }
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Teth-Adam'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Teth/Adam.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Teth-Adam'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Teth-Adam",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Teth/Adam.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Teth-Adam",
      "punct_change": "Teth/Adam"
    }
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Ant-Man'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Ant-Man",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.ant-man"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero Ant_Man.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Ant-Man",
      "punct_change": "Ant_Man"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Technopath/Cyberpath' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Technopath/Cyberpath",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Technopath;Cyberpath'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Technopath/Cyberpath",
      "punct_change": "Technopath;Cyberpath"
    }
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Technopath/Cyberpath'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Technopath/Cyberpath",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Technopath;Cyberpath.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Technopath/Cyberpath",
      "punct_change": "Technopath;Cyberpath"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Self-Learner' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Self-Learner",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.self-learner"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'Self Learner.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Self-Learner",
      "punct_removal": "Self Learner"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Self-Learner'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Self-Learner",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.self-learner"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Self Learner Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Self-Learner",
      "punct_removal": "Self Learner"
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Self-Learner'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Self-Learner",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.self-learner"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Self Learner badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Self-Learner",
      "punct_removal": "Self Learner"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Self-Learner' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Self-Learner",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.self-learner"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Self Learner badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Self-Learner",
      "punct_removal": "Self Learner"
    }
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Club T-Shirts' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Club T-Shirts' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Club T-Shirts",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.club_t-shirts",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Club TShirts\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Club T-Shirts",
      "punct_removal": "Club TShirts"
    }
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Club T-Shirts'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Club T-Shirts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.club_t-shirts"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Club TShirts.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Club T-Shirts",
      "punct_removal": "Club TShirts"
    }
  },
  {
    "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Club T-Shirts' GROUP BY T2.event_name",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Club T-Shirts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "values_list": [
      "budget.category.speaker gifts"
    ],
    "original_question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "question": "Calculate the total amount spent on Club TShirts and list the name of the event they were spent on.",
    "original_SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "changes_information": {
      "original_value": "Club T-Shirts",
      "punct_removal": "Club TShirts"
    }
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "mercedes-benz",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.mercedes-benz"
    ],
    "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
    "question": "For model mercedesbenz, how many cylinders does the car with the least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "mercedes-benz",
      "punct_removal": "mercedesbenz"
    }
  },
  {
    "SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'mercedes-benz' ORDER BY T1.accelerate ASC LIMIT 1;",
    "tables": [
      "car_names",
      "cars_data"
    ],
    "columns": [
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.cylinders",
      "car_names.model",
      "car_names.makeid"
    ],
    "values": [
      {
        "table": "car_names",
        "column": "model",
        "value": "mercedes-benz",
        "condition": "="
      }
    ],
    "db_id": "car_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "car_names.model.mercedes-benz"
    ],
    "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
    "question": "For a mercedesbenz model, how many cylinders does the version with least accelerate have?",
    "original_SQL": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
    "changes_information": {
      "original_value": "mercedes-benz",
      "punct_removal": "mercedesbenz"
    }
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Matthew D. Wilson'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Matthew D Wilson.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    }
  },
  {
    "SQL": "SELECT manaCost FROM cards WHERE artist = 'Matthew D. Wilson'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.manacost"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "values_list": [
      "cards.artist.rob alexander"
    ],
    "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "question": "What is the  unconverted mana do all the cards created by Matthew D Wilson cost in total?",
    "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    }
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Matthew D. Wilson' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Matthew D Wilson artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    }
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Matthew D. Wilson'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Matthew D Wilson created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Matthew D. Wilson' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Matthew D Wilson? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Matthew D. Wilson'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Matthew D. Wilson",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Matthew D Wilson worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Matthew D. Wilson",
      "punct_removal": "Matthew D Wilson"
    }
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'mtgo,paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "mtgo,paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Erica Yang",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.mtgo,paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Erica Yang artist in pauper format and available in mtgo paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "mtgo,paper",
      "punct_removal": "mtgo paper"
    }
  },
  {
    "SQL": "SELECT artist FROM cards WHERE flavorName = 'King Caesar, Ancient Guardian'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.flavorname"
    ],
    "values": [
      {
        "table": "cards",
        "column": "flavorname",
        "value": "King Caesar, Ancient Guardian",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
    "values_list": [
      "cards.flavorname.battra, dark destroyer"
    ],
    "original_question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
    "question": "Which artist designed the card whose promotional name is \"King Caesar Ancient Guardian\"?",
    "original_SQL": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
    "changes_information": {
      "original_value": "King Caesar, Ancient Guardian",
      "punct_removal": "King Caesar Ancient Guardian"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
    "question": "Name the foreign name of the card that has set HOU watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_removal": "set HOU"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "foreign_data.flavortext",
      "cards.watermark",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
    "question": "What is the language and flavor text of the card that has set HOU watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_removal": "set HOU"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.watermark",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "What is the language of the card that has azorius watermark? List out the type of this card.",
    "question": "What is the language of the card that has set HOU watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
    "changes_information": {
      "original_value": "set (HOU)",
      "punct_removal": "set HOU"
    }
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'J. M. DeMatteis'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "J. M. DeMatteis",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question": "which countries' tv channels are playing some cartoon written by J M DeMatteis?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "J. M. DeMatteis",
      "punct_removal": "J M DeMatteis"
    }
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'J. M. DeMatteis'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "J. M. DeMatteis",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by J M DeMatteis?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "J. M. DeMatteis",
      "punct_removal": "J M DeMatteis"
    }
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Monte-Carlo'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Monte-Carlo",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.monte-carlo"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in Monte Carlo.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Monte-Carlo",
      "punct_removal": "Monte Carlo"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Dijon Prenois be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Dijon Prenois?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Dijon Prenois.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    }
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Dijon-Prenois'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Dijon Prenois?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Dijon Prenois was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Dijon-Prenois'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Dijon Prenois.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    }
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Dijon-Prenois'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Dijon-Prenois",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.dijon-prenois"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Dijon Prenois circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Dijon-Prenois",
      "punct_removal": "Dijon Prenois"
    }
  },
  {
    "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jablonec n. Nisou'",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "district.a2",
      "account.account_id",
      "account.district_id",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a2",
        "value": "Jablonec n. Nisou",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "A2 refers to the names of districts.",
    "values_list": [
      "district.a2.jablonec_n._nisou"
    ],
    "original_question": "List account ID and account opening date for accounts from 'Prachatice'.",
    "question": "List account ID and account opening date for accounts from 'Jablonec n Nisou'.",
    "original_SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
    "changes_information": {
      "original_value": "Jablonec n. Nisou",
      "punct_removal": "Jablonec n Nisou"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in Portuguese Brazil.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in Portuguese Brazil.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and Portuguese Brazil language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Portuguese (Brazil)'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in Portuguese Brazil. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Portuguese Brazil.",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Portuguese Brazil text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Portuguese (Brazil)' ORDER BY T2.convertedManaCost DESC",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.portuguese_(brazil)"
    ],
    "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the Portuguese Brazil names of the cards in the set Coldsnap with the highest converted mana cost.",
    "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'St. Petersburg' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "St. Petersburg",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the St Petersburg tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "St. Petersburg",
      "punct_removal": "St Petersburg"
    }
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'St. Petersburg' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "St. Petersburg",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the St Petersburg tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "St. Petersburg",
      "punct_removal": "St Petersburg"
    }
  },
  {
    "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "tables": [
      "member",
      "expense"
    ],
    "columns": [
      "expense.link_to_member",
      "member.t_shirt_size",
      "expense.expense_description",
      "member.member_id"
    ],
    "values": [
      {
        "table": "member",
        "column": "t_shirt_size",
        "value": "X-Large",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
    "values_list": [
      "member.t_shirt_size.x-large"
    ],
    "original_question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
    "question": "What kind of expenses incurred by members who have XLarge in size of tee shirt?",
    "original_SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "changes_information": {
      "original_value": "X-Large",
      "punct_removal": "XLarge"
    }
  },
  {
    "SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Taylor-Sinclair' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.heading_accuracy",
      "player_attributes.date",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Taylor-Sinclair",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "values_list": [
      "player.player_name.francois affolter"
    ],
    "original_question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "question": "What is the football player Aaron Taylor Sinclair header's finishing rate on 18/09/2014?",
    "original_SQL": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "changes_information": {
      "original_value": "Aaron Taylor-Sinclair",
      "punct_removal": "Aaron Taylor Sinclair"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'PLINK meta-analysis method'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"PLINK metaanalysis method\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'PLINK meta-analysis method'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"PLINK metaanalysis method\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    }
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'PLINK meta-analysis method'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"PLINK metaanalysis method\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    }
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'PLINK meta-analysis method'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "PLINK meta-analysis method",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'PLINK metaanalysis method'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "PLINK meta-analysis method",
      "punct_removal": "PLINK metaanalysis method"
    }
  },
  {
    "SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Caesar III: An Empire Without End'",
    "tables": [
      "program",
      "director"
    ],
    "columns": [
      "program.title",
      "program.director_id",
      "director.director_id",
      "director.name"
    ],
    "values": [
      {
        "table": "program",
        "column": "title",
        "value": "Caesar III: An Empire Without End",
        "condition": "="
      }
    ],
    "db_id": "bbc_channels",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "program.title.caesar_iii:_an_empire_without_end"
    ],
    "original_question": "What is the name of the director who is in the \"Dracula\" program?",
    "question": "What is the name of the director who is in the \"Caesar III An Empire Without End\" program?",
    "original_SQL": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "changes_information": {
      "original_value": "Caesar III: An Empire Without End",
      "punct_removal": "Caesar III An Empire Without End"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Demi-God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.demi-god"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the DemiGod superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "Demi-God",
      "punct_removal": "DemiGod"
    }
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Demi-God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.demi-god"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of DemiGod superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "Demi-God",
      "punct_removal": "DemiGod"
    }
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Demi-God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "values_list": [
      "race.race.demi-god"
    ],
    "original_question": "Provide the full names of vampire heroes.",
    "question": "Provide the full names of DemiGod heroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "changes_information": {
      "original_value": "Demi-God",
      "punct_removal": "DemiGod"
    }
  },
  {
    "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Mt. Shasta'",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "schools.cdscode",
      "schools.mailcity",
      "satscores.numtsttakr",
      "satscores.cds"
    ],
    "values": [
      {
        "table": "schools",
        "column": "mailcity",
        "value": "Mt. Shasta",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.mailcity.mt._shasta"
    ],
    "original_question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "question": "How many test takers are there at the school/s whose mailing city address is in Mt Shasta?",
    "original_SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "changes_information": {
      "original_value": "Mt. Shasta",
      "punct_removal": "Mt Shasta"
    }
  },
  {
    "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.totalsetsize",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "List all the sets available in Italian translation. State the total number of cards per set.",
    "question": "List all the sets available in Portuguese Brazil translation. State the total number of cards per set.",
    "original_SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)'",
    "tables": [
      "set_translations"
    ],
    "columns": [
      "set_translations.setcode",
      "set_translations.language"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; set code refers to setCode",
    "values_list": [
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Lists the set code of all cards translated into Spanish.",
    "question": "Lists the set code of all cards translated into Portuguese Brazil.",
    "original_SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Portuguese (Brazil)' ORDER BY T1.id LIMIT 2",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.language",
      "sets.code",
      "sets.id",
      "sets.block",
      "set_translations.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "block",
        "value": "Shadowmoor",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "sets.block.shadowmoor",
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "question": "Please list top two sets of cards with their IDs that have Portuguese Brazil-language cards and are located in the Shadowmoor block in alphabetical order.",
    "original_SQL": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'Portuguese (Brazil)' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Tendo Ice Bridge",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Portuguese (Brazil)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.portuguese_(brazil)"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the Portuguese Brazil name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Portuguese (Brazil)",
      "punct_removal": "Portuguese Brazil"
    }
  },
  {
    "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "sets.type",
      "set_translations.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
    "values_list": [
      "set_translations.translation.hauptset zehnte edition"
    ],
    "original_question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
    "question": "What is the expansion type of the set \"From The Vault Lore\"?",
    "original_SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_removal": "From The Vault Lore"
    }
  },
  {
    "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.basesetsize"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
    "values_list": [
      "set_translations.translation.rinascita di alara"
    ],
    "original_question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
    "question": "What is the number of cards are there in the set of \"From The Vault Lore\"?",
    "original_SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_removal": "From The Vault Lore"
    }
  },
  {
    "SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'From The Vault: Lore'",
    "tables": [
      "sets",
      "set_translations"
    ],
    "columns": [
      "set_translations.translation",
      "set_translations.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "set_translations",
        "column": "translation",
        "value": "From The Vault: Lore",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'",
    "values_list": [
      "set_translations.translation.ola de fr\u00edo"
    ],
    "original_question": "What is the release date for the set \"Ola de fr\u00edo\"?",
    "question": "What is the release date for the set \"From The Vault Lore\"?",
    "original_SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'",
    "changes_information": {
      "original_value": "From The Vault: Lore",
      "punct_removal": "From The Vault Lore"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Intl. Collectors\u2019 Edition' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Intl. Collectors\u2019 Edition",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "values_list": [
      "sets.name.intl._collectors\u2019_edition"
    ],
    "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the name of the cards in the set Intl Collectors Edition with the highest converted mana cost.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "changes_information": {
      "original_value": "Intl. Collectors\u2019 Edition",
      "punct_removal": "Intl Collectors Edition"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Intl. Collectors\u2019 Edition' AND T1.number = 4",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.name",
      "cards.number",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Intl. Collectors\u2019 Edition",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "number",
        "value": "4",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
    "values_list": [
      "sets.name.intl._collectors\u2019_edition",
      "cards.number.4"
    ],
    "original_question": "What is card number 4 in the set Coldsnap?",
    "question": "What is card number 4 in the set Intl Collectors Edition?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "changes_information": {
      "original_value": "Intl. Collectors\u2019 Edition",
      "punct_removal": "Intl Collectors Edition"
    }
  },
  {
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Intl. Collectors\u2019 Edition'",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.name",
      "sets.parentcode"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Intl. Collectors\u2019 Edition",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "values_list": [
      "sets.name.commander 2014 oversized"
    ],
    "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "question": "For the set \"Intl Collectors Edition\" , give its parent code.",
    "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "changes_information": {
      "original_value": "Intl. Collectors\u2019 Edition",
      "punct_removal": "Intl Collectors Edition"
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Alexander J Mercer?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.id",
      "superhero.superhero_name",
      "superhero.full_name",
      "superhero.race_id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Provide the hero name and race of Charles Chandler.",
    "question": "Provide the hero name and race of Alexander J Mercer.",
    "original_SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    }
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "values_list": [
      "superhero.full_name.hunter zolomon"
    ],
    "original_question": "List the powers of Hunter Zolomon.",
    "question": "List the powers of Alexander J Mercer.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "values_list": [
      "superhero.full_name.karen beecher-duncan"
    ],
    "original_question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "question": "Provide the eye colour of the superhero who has Alexander J Mercer as their full name.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    }
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Alexander J. Mercer'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Alexander J. Mercer",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Alexander J Mercer as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Alexander J. Mercer",
      "punct_removal": "Alexander J Mercer"
    }
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "Please list all the superpowers of 3-D Man.",
    "question": "Please list all the superpowers of ABomb.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.superhero_name",
      "superhero.skin_colour_id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "What is the colour of Apocalypse's skin?",
    "question": "What is the colour of ABomb's skin?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "values_list": [
      "superhero.superhero_name.blue beetle ii"
    ],
    "original_question": "What is the publisher's name of Blue Beetle II?",
    "question": "What is the publisher's name of ABomb?",
    "original_SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is ABomb's race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Provide the superpowers of the superhero called Deathlok.",
    "question": "Provide the superpowers of the superhero called ABomb.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero ABomb.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero ABomb belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of ABomb hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of ABomb's attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named ABomb.",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down ABomb's superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'A-Bomb' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the ABomb.",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'A-Bomb'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Provide the full name of the superhero named Alien.",
    "question": "Provide the full name of the superhero named ABomb.",
    "original_SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named ABomb.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "A-Bomb",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.a-bomb"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of ABomb.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "A-Bomb",
      "punct_removal": "ABomb"
    }
  },
  {
    "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'open-source'",
    "tables": [
      "tags"
    ],
    "columns": [
      "tags.tagname",
      "tags.wikipostid",
      "tags.excerptpostid"
    ],
    "values": [
      {
        "table": "tags",
        "column": "tagname",
        "value": "open-source",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "values_list": [
      "tags.tagname.open-source"
    ],
    "original_question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "question": "What is the excerpt post ID and wiki post ID of the tag named open source?",
    "original_SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "changes_information": {
      "original_value": "open-source",
      "punct_removal": "open source"
    }
  },
  {
    "SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team_attributes.team_fifa_api_id",
      "team.team_fifa_api_id",
      "team_attributes.buildupplaypositioningclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "values_list": [
      "team.team_long_name.ado den haag"
    ],
    "original_question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "question": "What is the SV Zulte Waregem team freedom of movement in the 1st two thirds of the pitch?",
    "original_SQL": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    }
  },
  {
    "SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.chancecreationpassing",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "values_list": [
      "team.team_long_name.sv_zulte-waregem"
    ],
    "original_question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "question": "What is SV Zulte Waregem's highest chance creation passing score and what is it classified as?",
    "original_SQL": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    }
  },
  {
    "SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.buildupplayspeedclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
    "values_list": [
      "team.team_long_name.willem ii"
    ],
    "original_question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "question": "What was the build up play speed class for \"SV Zulte Waregem\" on 2011/2/22?",
    "original_SQL": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    }
  },
  {
    "SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team_attributes.chancecreationpassingclass",
      "team.team_long_name"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "values_list": [
      "team.team_long_name.pec zwolle"
    ],
    "original_question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "question": "State the chance creation passing class for \"SV Zulte Waregem\" on 2013/9/20.",
    "original_SQL": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    }
  },
  {
    "SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'SV Zulte-Waregem' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team_attributes.date",
      "team_attributes.team_api_id",
      "team.team_long_name",
      "team_attributes.chancecreationcrossingclass"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "values_list": [
      "team.team_long_name.hull city"
    ],
    "original_question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "question": "What was the chance creation crossing class for \"SV Zulte Waregem\" on 2010/2/22?",
    "original_SQL": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    }
  },
  {
    "SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'SV Zulte-Waregem'",
    "tables": [
      "team_attributes",
      "team"
    ],
    "columns": [
      "team.team_api_id",
      "team.team_long_name",
      "team_attributes.buildupplayspeedclass",
      "team_attributes.team_api_id"
    ],
    "values": [
      {
        "table": "team",
        "column": "team_long_name",
        "value": "SV Zulte-Waregem",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "values_list": [
      "team.team_long_name.ksv cercle brugge"
    ],
    "original_question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "question": "Does the SV Zulte Waregem team have a slow, balanced or fast speed class?",
    "original_SQL": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "changes_information": {
      "original_value": "SV Zulte-Waregem",
      "punct_removal": "SV Zulte Waregem"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user Christopher D Long?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by Christopher D Long and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Christopher D Long.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Christopher D Long\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Christopher D Long' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by Christopher D Long.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long' GROUP BY T2.WebsiteUrl",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.score",
      "users.websiteurl",
      "users.id",
      "users.displayname",
      "posts.lasteditoruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
    "question": "What is the total score of the posts edited by Christopher D Long and include the user's website URL.",
    "original_SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Christopher D Long\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Christopher D Long\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by Christopher D Long's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by Christopher D Long has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by Christopher D Long and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Christopher D. Long' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
    "tables": [
      "votes",
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "votes.postid",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid",
      "votes.id"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
    "values_list": [
      "users.displayname.matt parker"
    ],
    "original_question": "How many posts by Matt Parker have more than 4 votes?",
    "question": "How many posts by Christopher D Long have more than 4 votes?",
    "original_SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Christopher D. Long' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by Christopher D Long has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Christopher D Long.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Christopher D. Long'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Christopher D Long' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Christopher D. Long'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Christopher D Long'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Christopher D. Long'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Christopher D. Long",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.christopher_d._long"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Christopher D Long' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Christopher D. Long",
      "punct_removal": "Christopher D Long"
    }
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Corvallis, OR'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Corvallis, OR",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in Corvallis OR obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "Corvallis, OR",
      "punct_removal": "Corvallis OR"
    }
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Corvallis, OR'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Corvallis, OR",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in Corvallis OR obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "Corvallis, OR",
      "punct_removal": "Corvallis OR"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Editor'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Editor",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.editor"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the Editors Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Editor",
      "singular_plural_change": "Editors"
    }
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "question": "How much did the Student_Club members spend on Advertisements in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    }
  },
  {
    "SQL": "SELECT remaining FROM budget WHERE category = 'Advertisement' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Advertisement' )",
    "tables": [
      "budget"
    ],
    "columns": [
      "budget.amount",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      },
      {
        "table": "",
        "column": "category",
        "value": "Food",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "values_list": [
      "budget.category.advertisement",
      ".category.food",
      ".category.food"
    ],
    "original_question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "question": "With the biggest budget for the \"Advertisements\", what was the remaining of it?",
    "original_SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    }
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Advertisements.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    }
  },
  {
    "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_id",
      "budget.link_to_event",
      "event.event_name",
      "budget.category"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "budgeted for food refers to category = 'Food'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "List the event names which were budgeted for the food.",
    "question": "List the event names which were budgeted for the Advertisements.",
    "original_SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "changes_information": {
      "original_value": "Advertisement",
      "singular_plural_change": "Advertisements"
    }
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.availability",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "arena",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.arena"
    ],
    "original_question": "Lists all types of cards available in arena.",
    "question": "Lists all types of cards available in arenas.",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "arena",
      "singular_plural_change": "arenas"
    }
  },
  {
    "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.bordercolor",
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "arena",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "bordercolor",
        "value": "black",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.arena",
      "cards.bordercolor.black"
    ],
    "original_question": "List the artists who illustrated cards with black borders which are available only in arena.",
    "question": "List the artists who illustrated cards with black borders which are available only in arenas.",
    "original_SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "changes_information": {
      "original_value": "arena",
      "singular_plural_change": "arenas"
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Aquamorph Entity'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Aquamorph Entity",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Aquamorph Entities\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Aquamorph Entity",
      "singular_plural_change": "Aquamorph Entities"
    }
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "bundle",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.bundle"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundles\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "bundle",
      "singular_plural_change": "bundles"
    }
  },
  {
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "tables": [
      "courses"
    ],
    "columns": [
      "courses.course_description",
      "courses.course_name"
    ],
    "values": [
      {
        "table": "courses",
        "column": "course_name",
        "value": "math",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "courses.course_name.math"
    ],
    "original_question": "How is the math course described?",
    "question": "How is the maths course described?",
    "original_SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "changes_information": {
      "original_value": "math",
      "singular_plural_change": "maths"
    }
  },
  {
    "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "tables": [
      "courses"
    ],
    "columns": [
      "courses.course_description",
      "courses.course_name"
    ],
    "values": [
      {
        "table": "courses",
        "column": "course_name",
        "value": "math",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "courses.course_name.math"
    ],
    "original_question": "What are the descriptions for all the math courses?",
    "question": "What are the descriptions for all the maths courses?",
    "original_SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
    "changes_information": {
      "original_value": "math",
      "singular_plural_change": "maths"
    }
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Marlin Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Marlin Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What is the owner of document with the Description 'Braeden Collection'?",
    "question": "What is the owner of document with the Description 'Marlin Collections'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Marlin Collection",
      "singular_plural_change": "Marlin Collections"
    }
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Marlin Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Marlin Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "question": "What are the owners of the document objects described as the 'Marlin Collections'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Marlin Collection",
      "singular_plural_change": "Marlin Collections"
    }
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'February Speaker'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "February Speaker",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'February Speakers' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "February Speaker",
      "singular_plural_change": "February Speakers"
    }
  },
  {
    "SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "tables": [
      "budget",
      "event",
      "expense"
    ],
    "columns": [
      "event.event_name",
      "expense.cost",
      "budget.budget_id",
      "budget.link_to_event",
      "expense.link_to_budget",
      "event.event_id",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Speaker",
        "condition": "="
      },
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Posters",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
    "values_list": [
      "event.event_name.september speaker",
      "expense.expense_description.posters"
    ],
    "original_question": "Indicate the cost of posters for 'September Speaker' event.",
    "question": "Indicate the cost of Poster for 'September Speaker' event.",
    "original_SQL": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Posters",
      "singular_plural_change": "Poster"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Posters",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.posters"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'Poster' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Posters",
      "singular_plural_change": "Poster"
    }
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "How is the feature rooftop described?",
    "question": "How is the feature rooftops described?",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "singular_plural_change": "rooftops"
    }
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "Return the description of the feature 'rooftop'.",
    "question": "Return the description of the feature 'rooftops'.",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "singular_plural_change": "rooftops"
    }
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Animal Attributes'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Animal Attributes",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Animal Attribute.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Animal Attributes",
      "singular_plural_change": "Animal Attribute"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Energy Blast'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Energy Blast?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.energy_blasts"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Energy Blast power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Blasts'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.energy_blasts"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Energy Blast power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    }
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Energy Blasts'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Blasts",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Energy Blast.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Energy Blasts",
      "singular_plural_change": "Energy Blast"
    }
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.full_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Strength",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "values_list": [
      "attribute.attribute_name.strength"
    ],
    "original_question": "What is the hero's full name with the highest attribute in strength?",
    "question": "What is the hero's full name with the highest attribute in power?",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Strength",
      "synonym": "power"
    }
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.full_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "attribute",
        "column": "attribute_name",
        "value": "Speed",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "values_list": [
      "attribute.attribute_name.speed"
    ],
    "original_question": "What is the hero's full name with the highest attribute in strength?",
    "question": "What is the hero's full name with the highest attribute in Velocity?",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "changes_information": {
      "original_value": "Speed",
      "synonym": "Velocity"
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Teacher",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.teacher"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the Instructor badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Teacher",
      "synonym": "Instructor"
    }
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.scissors"
    ],
    "original_question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "question": "Find the location of the warehouses which have contents stones but not Scissors.",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    }
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.scissors"
    ],
    "original_question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "question": "What are the locations of warehouses that have boxes containing stones but not Scissors?",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    }
  },
  {
    "SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Rocks'",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.rocks"
    ],
    "original_question": "Find the warehouses which store contents Rocks or Scissors.",
    "question": "Find the warehouses which store contents Rocks or stones.",
    "original_SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    }
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.scissors"
    ],
    "original_question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "question": "Find the location of the warehouses which store contents stones and Scissors.",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    }
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.scissors"
    ],
    "original_question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "question": "What are the locations of warehouses in which boxes that contain stones and Scissors are kept?",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    }
  },
  {
    "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.contents",
      "boxes.value",
      "boxes.code"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      ".contents.rocks"
    ],
    "original_question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with stones as content.",
    "original_SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    }
  },
  {
    "SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.contents",
      "boxes.value",
      "boxes.code"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      ".contents.rocks"
    ],
    "original_question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains stones?",
    "original_SQL": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    }
  },
  {
    "SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_date",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "September Meeting",
        "condition": "="
      },
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "values_list": [
      "event.event_name.september meeting",
      "budget.category.advertisement"
    ],
    "original_question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "question": "How much did the Student_Club members spend on Promotion in September Meeting?",
    "original_SQL": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "changes_information": {
      "original_value": "Advertisement",
      "synonym": "Promotion"
    }
  },
  {
    "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id",
      "budget.spent"
    ],
    "values": [
      {
        "table": "budget",
        "column": "category",
        "value": "Advertisement",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "values_list": [
      "budget.category.advertisement"
    ],
    "original_question": "Name the event with the highest amount spent on advertisement.",
    "question": "Name the event with the highest amount spent on Promotion.",
    "original_SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "changes_information": {
      "original_value": "Advertisement",
      "synonym": "Promotion"
    }
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "bundle",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.bundle"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"package\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "bundle",
      "synonym": "package"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.name",
      "circuits.country",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Germany",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Germany is a name of country;",
    "values_list": [
      "circuits.country.germany"
    ],
    "original_question": "Please give the name of the race held on the circuits in Germany.",
    "question": "Please give the name of the race held on the circuits in Deutschland.",
    "original_SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "changes_information": {
      "original_value": "Germany",
      "synonym": "Deutschland"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.name",
      "circuits.country",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Germany",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Spain is a name of country;",
    "values_list": [
      "circuits.country.germany"
    ],
    "original_question": "Please give the names of the races held on the circuits in Spain.",
    "question": "Please give the names of the races held on the circuits in Deutschland.",
    "original_SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "changes_information": {
      "original_value": "Germany",
      "synonym": "Deutschland"
    }
  },
  {
    "SQL": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany' AND T2.year = 2006",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "races.circuitid",
      "circuits.location",
      "circuits.country",
      "races.year",
      "races.name",
      "circuits.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Germany",
        "condition": "="
      },
      {
        "table": "races",
        "column": "year",
        "value": "2006",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.country.germany",
      "races.year.2006"
    ],
    "original_question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
    "question": "List circuits in Deutschland which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
    "original_SQL": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
    "changes_information": {
      "original_value": "Germany",
      "synonym": "Deutschland"
    }
  },
  {
    "SQL": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Germany' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "tables": [
      "results",
      "circuits",
      "races"
    ],
    "columns": [
      "races.circuitid",
      "races.raceid",
      "results.fastestlaptime",
      "circuits.country",
      "results.raceid",
      "circuits.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "country",
        "value": "Germany",
        "condition": "="
      },
      {
        "table": "circuits",
        "column": "country",
        "value": "Italy",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "values_list": [
      "circuits.country.germany",
      "circuits.country.italy"
    ],
    "original_question": "Please list the lap records for the circuits in Italy.",
    "question": "Please list the lap records for the circuits in Deutschland.",
    "original_SQL": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "changes_information": {
      "original_value": "Germany",
      "synonym": "Deutschland"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Blond",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.blond"
    ],
    "original_question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "question": "Please list the superhero names of all the superheroes that have azure eyes and blond hair.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.hair_colour_id",
      "superhero.superhero_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Brown",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
    "values_list": [
      "colour.colour.blue",
      "colour.colour.brown"
    ],
    "original_question": "Which superheroes have blue eyes with brown hair?",
    "question": "Which superheroes have azure eyes with brown hair?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.eye_colour_id",
      "colour.id",
      "colour.colour"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
    "values_list": [
      "colour.colour.blue"
    ],
    "original_question": "List down at least five full names of superheroes with blue eyes.",
    "question": "List down at least five full names of superheroes with azure eyes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    }
  },
  {
    "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "tables": [
      "race",
      "superhero",
      "gender",
      "colour"
    ],
    "columns": [
      "gender.gender",
      "race.id",
      "superhero.hair_colour_id",
      "gender.id",
      "superhero.gender_id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      },
      {
        "table": "gender",
        "column": "gender",
        "value": "Male",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
    "values_list": [
      "colour.colour.blue",
      "gender.gender.male"
    ],
    "original_question": "Give the race of the blue-haired male superhero.",
    "question": "Give the race of the azure-haired male superhero.",
    "original_SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    }
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Blue'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.full_name",
      "colour.colour",
      "colour.id",
      "superhero.eye_colour_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "weight_kg",
        "value": "100",
        "condition": "<"
      },
      {
        "table": "colour",
        "column": "colour",
        "value": "Blue",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weight less than 100 refers to weight_kg < 100",
    "values_list": [
      "superhero.weight_kg.100",
      "colour.colour.blue"
    ],
    "original_question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
    "question": "In superheroes with weight less than 100, list the full name of the superheroes with azure eyes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
    "changes_information": {
      "original_value": "Blue",
      "synonym": "azure"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "tables": [
      "orders",
      "products",
      "order_items",
      "customers"
    ],
    "columns": [
      "products.product_name",
      "customers.gender_code",
      "customers.customer_id",
      "orders.order_id",
      "products.product_description",
      "order_items.order_id",
      "products.product_id",
      "products.product_price",
      "order_items.product_id",
      "orders.customer_id"
    ],
    "values": [
      {
        "table": "customers",
        "column": "gender_code",
        "value": "Female",
        "condition": "="
      }
    ],
    "db_id": "e_commerce",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "customers.gender_code.female"
    ],
    "original_question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "question": "List all the distinct product names, price and descriptions which are bought by woman customers.",
    "original_SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "changes_information": {
      "original_value": "Female",
      "synonym": "woman"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "tables": [
      "orders",
      "products",
      "order_items",
      "customers"
    ],
    "columns": [
      "products.product_name",
      "customers.gender_code",
      "customers.customer_id",
      "orders.order_id",
      "products.product_description",
      "order_items.order_id",
      "products.product_id",
      "products.product_price",
      "order_items.product_id",
      "orders.customer_id"
    ],
    "values": [
      {
        "table": "customers",
        "column": "gender_code",
        "value": "Female",
        "condition": "="
      }
    ],
    "db_id": "e_commerce",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "customers.gender_code.female"
    ],
    "original_question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "question": "What are the different names, prices, and descriptions for all products bought by woman customers?",
    "original_SQL": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "changes_information": {
      "original_value": "Female",
      "synonym": "woman"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "tables": [
      "students",
      "degree_programs",
      "student_enrolment"
    ],
    "columns": [
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.first_name",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id"
    ],
    "values": [
      {
        "table": "degree_programs",
        "column": "degree_summary_name",
        "value": "Bachelor",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "degree_programs.degree_summary_name.bachelor"
    ],
    "original_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "question": "Who is enrolled in a Undergraduate degree program? List the first name, middle name, last name.",
    "original_SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "changes_information": {
      "original_value": "Bachelor",
      "synonym": "Undergraduate"
    }
  },
  {
    "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Argentine' ORDER BY dob DESC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.dob",
      "drivers.forename",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "How old is the youngest Japanese driver? What is his name?",
    "question": "How old is the youngest Argentinian driver? What is his name?",
    "original_SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "changes_information": {
      "original_value": "Argentine",
      "synonym": "Argentinian"
    }
  },
  {
    "SQL": "SELECT surname FROM drivers WHERE nationality = 'Argentine'",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Italian refers to nationality = 'italian'",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "Please list the surnames of all the Italian drivers.",
    "question": "Please list the surnames of all the Argentinian drivers.",
    "original_SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "changes_information": {
      "original_value": "Argentine",
      "synonym": "Argentinian"
    }
  },
  {
    "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'Argentine' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.driverref",
      "drivers.dob",
      "drivers.nationality"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "Please state the reference name of the oldest German driver.",
    "question": "Please state the reference name of the oldest Argentinian driver.",
    "original_SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "changes_information": {
      "original_value": "Argentine",
      "synonym": "Argentinian"
    }
  },
  {
    "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'Argentine' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "tables": [
      "drivers"
    ],
    "columns": [
      "drivers.surname",
      "drivers.forename",
      "drivers.nationality",
      "drivers.url",
      "drivers.dob"
    ],
    "values": [
      {
        "table": "drivers",
        "column": "nationality",
        "value": "Argentine",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
    "values_list": [
      "drivers.nationality.argentine"
    ],
    "original_question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "question": "Find the full name, Wiki Pedia page link, and date of birth of Argentinian drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "original_SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "changes_information": {
      "original_value": "Argentine",
      "synonym": "Argentinian"
    }
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "How is the feature rooftop described?",
    "question": "How is the feature roof terrace described?",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "synonym": "roof terrace"
    }
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "Return the description of the feature 'rooftop'.",
    "question": "Return the description of the feature 'roof terrace'.",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "synonym": "roof terrace"
    }
  },
  {
    "SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'rooftop';",
    "tables": [
      "property_features",
      "properties",
      "features",
      "addresses"
    ],
    "columns": [
      "features.feature_id",
      "addresses.address_id",
      "features.feature_name",
      "property_features.feature_id",
      "addresses.town_city",
      "property_features.property_id",
      "properties.property_address_id",
      "properties.property_id"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.swimming pool"
    ],
    "original_question": "In which cities are there any properties equipped with a swimming pool?",
    "question": "In which cities are there any properties equipped with a roof terrace?",
    "original_SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
    "changes_information": {
      "original_value": "rooftop",
      "synonym": "roof terrace"
    }
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.german"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Deutsch.",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'German'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "German",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.german"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Deutsch text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "German",
      "synonym": "Deutsch"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "values_list": [
      "cards.rarity.mythic",
      "legalities.format.gladiator",
      "legalities.status.banned"
    ],
    "original_question": "List all the mythic rarity print cards banned in gladiator format.",
    "question": "List all the mythic rarity print cards Prohibited in gladiator format.",
    "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "changes_information": {
      "original_value": "Banned",
      "synonym": "Prohibited"
    }
  },
  {
    "SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "tables": [
      "cards",
      "legalities",
      "maxbanned"
    ],
    "columns": [
      "maxbanned.format",
      "legalities.format",
      "legalities.status",
      "cards.name",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
    "values_list": [
      "legalities.status.banned",
      "legalities.status.banned",
      ".status.banned"
    ],
    "original_question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "question": "Which of the play format has the highest number of Prohibited status? Indicate the play format and the names of all the card meet the condition.",
    "original_SQL": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "changes_information": {
      "original_value": "Banned",
      "synonym": "Prohibited"
    }
  },
  {
    "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.format",
      "legalities.status",
      "cards.name",
      "legalities.uuid",
      "cards.uuid",
      "cards.edhrecrank"
    ],
    "values": [
      {
        "table": "cards",
        "column": "edhrecrank",
        "value": "1",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "values_list": [
      "cards.edhrecrank.1",
      "legalities.status.banned"
    ],
    "original_question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Prohibited play format.",
    "original_SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "changes_information": {
      "original_value": "Banned",
      "synonym": "Prohibited"
    }
  },
  {
    "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.age",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "cat",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.cat"
    ],
    "original_question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
    "question": "Find the first name and age of students who have a canine but do not have a cat as a pet.",
    "original_SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "changes_information": {
      "original_value": "dog",
      "synonym": "canine"
    }
  },
  {
    "SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.age",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "cat",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.cat"
    ],
    "original_question": "What is the first name of every student who has a dog but does not have a cat?",
    "question": "What is the first name of every student who has a canine but does not have a cat?",
    "original_SQL": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
    "changes_information": {
      "original_value": "dog",
      "synonym": "canine"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Alien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.alien"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the Extraterrestrial superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "Alien",
      "synonym": "Extraterrestrial"
    }
  },
  {
    "SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Alien'",
    "tables": [
      "race",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.height_cm",
      "superhero.hair_colour_id",
      "race.id",
      "colour.colour",
      "superhero.race_id",
      "colour.id",
      "race.race"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "height_cm",
        "value": "185",
        "condition": "="
      },
      {
        "table": "race",
        "column": "race",
        "value": "Alien",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
    "values_list": [
      "superhero.height_cm.185",
      "race.race.alien"
    ],
    "original_question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "question": "Provide the hair colour of the Extraterrestrial superhero who is 185 cm tall.",
    "original_SQL": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "changes_information": {
      "original_value": "Alien",
      "synonym": "Extraterrestrial"
    }
  },
  {
    "SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Mandarin Chinese' AND T1.Continent  =  \"Asia\"",
    "tables": [
      "city",
      "countrylanguage",
      "country"
    ],
    "columns": [
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "city.countrycode",
      "country.continent",
      "country.code",
      "countrylanguage.language",
      "city.name"
    ],
    "values": [
      {
        "table": "countrylanguage",
        "column": "isofficial",
        "value": "T",
        "condition": "="
      },
      {
        "table": "countrylanguage",
        "column": "language",
        "value": "Mandarin Chinese",
        "condition": "="
      }
    ],
    "db_id": "world_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "countrylanguage.isofficial.t",
      "countrylanguage.language.mandarin_chinese"
    ],
    "original_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
    "question": "Return the different names of cities that are in Asia and for which Mandarin Chineese is the official language.",
    "original_SQL": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
    "changes_information": {
      "original_value": "Mandarin Chinese",
      "typo_insertion": "Mandarin Chineese"
    }
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'Lafayette' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "Lafayette",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.lafayette"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of Layfayette?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Lafayette",
      "typo_insertion": "Layfayette"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Anthony'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Anthonny\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    }
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Anthony' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.anthony"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Anthonny.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    }
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Anthony'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Anthony",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Anthonny'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Anthony",
      "typo_insertion": "Anthonny"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Autobiographer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.autobiographer"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first Auto biographer badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Autobiographer",
      "typo_space_addition": "Auto biographer"
    }
  },
  {
    "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'prerelease'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.purchaseurls",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "promotypes",
        "value": "prerelease",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "values_list": [
      "cards.promotypes.prerelease"
    ],
    "original_question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"pre release\".",
    "original_SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "changes_information": {
      "original_value": "prerelease",
      "typo_space_addition": "pre release"
    }
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "How is the feature rooftop described?",
    "question": "How is the feature roof top described?",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "typo_space_addition": "roof top"
    }
  },
  {
    "SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "tables": [
      "features"
    ],
    "columns": [
      "features.feature_name",
      "features.feature_description"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.rooftop"
    ],
    "original_question": "Return the description of the feature 'rooftop'.",
    "question": "Return the description of the feature 'roof top'.",
    "original_SQL": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "changes_information": {
      "original_value": "rooftop",
      "typo_space_addition": "roof top"
    }
  },
  {
    "SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'rooftop';",
    "tables": [
      "property_features",
      "properties",
      "features",
      "addresses"
    ],
    "columns": [
      "features.feature_id",
      "addresses.address_id",
      "features.feature_name",
      "property_features.feature_id",
      "addresses.town_city",
      "property_features.property_id",
      "properties.property_address_id",
      "properties.property_id"
    ],
    "values": [
      {
        "table": "features",
        "column": "feature_name",
        "value": "rooftop",
        "condition": "="
      }
    ],
    "db_id": "real_estate_rentals",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "features.feature_name.swimming pool"
    ],
    "original_question": "In which cities are there any properties equipped with a swimming pool?",
    "question": "In which cities are there any properties equipped with a roof top?",
    "original_SQL": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
    "changes_information": {
      "original_value": "rooftop",
      "typo_space_addition": "roof top"
    }
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Kaohsiung' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Kaohsiung",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the Kaoh siung tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Kaohsiung",
      "typo_space_addition": "Kaoh siung"
    }
  },
  {
    "SQL": "select other_details from paragraphs where paragraph_text like 'Jersey'",
    "tables": [
      "paragraphs"
    ],
    "columns": [
      "paragraphs.other_details",
      "paragraphs.paragraph_text"
    ],
    "values": [
      {
        "table": "paragraphs",
        "column": "paragraph_text",
        "value": "Jersey",
        "condition": "LIKE"
      }
    ],
    "db_id": "cre_Doc_Template_Mgt",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "paragraphs.paragraph_text.jersey"
    ],
    "original_question": "What are the details for the paragraph that includes the text 'Korea ' ?",
    "question": "What are the details for the paragraph that includes the text 'Jer sey ' ?",
    "original_SQL": "select other_details from paragraphs where paragraph_text like 'korea'",
    "changes_information": {
      "original_value": "Jersey",
      "typo_space_addition": "Jer sey"
    }
  },
  {
    "SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
    "tables": [
      "participants",
      "performance_score"
    ],
    "columns": [
      "performance_score.stage_presence",
      "performance_score.voice_sound_quality",
      "performance_score.rhythm_tempo",
      "participants.id",
      "performance_score.participant_id",
      "participants.name"
    ],
    "values": [
      {
        "table": "participants",
        "column": "name",
        "value": "Freeway",
        "condition": "="
      }
    ],
    "db_id": "sing_contest",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "participants.name.freeway"
    ],
    "original_question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Free way'?",
    "original_SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
    "changes_information": {
      "original_value": "Freeway",
      "typo_space_addition": "Free way"
    }
  },
  {
    "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'AutoCorrelation'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posthistory.text",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posts.viewcount",
      "posts.lasteditoruserid"
    ],
    "values": [
      {
        "table": "posthistory",
        "column": "text",
        "value": "AutoCorrelation",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "values_list": [
      "posthistory.text.computer game datasets"
    ],
    "original_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "question": "Identify the total views on the post 'Auto Correlation'. Name the user who posted it last time.",
    "original_SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "changes_information": {
      "original_value": "AutoCorrelation",
      "typo_space_addition": "Auto Correlation"
    }
  },
  {
    "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Oakland'",
    "tables": [
      "satscores",
      "schools"
    ],
    "columns": [
      "schools.cdscode",
      "schools.mailcity",
      "satscores.numtsttakr",
      "satscores.cds"
    ],
    "values": [
      {
        "table": "schools",
        "column": "mailcity",
        "value": "Oakland",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.mailcity.oakland"
    ],
    "original_question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "question": "How many test takers are there at the school/s whose mailing city address is in Oak land?",
    "original_SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "changes_information": {
      "original_value": "Oakland",
      "typo_space_addition": "Oak land"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Tele pathy'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Tele pathy?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.telepathy"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Tele pathy power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Telepathy'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.telepathy"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Tele pathy power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    }
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Telepathy'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Telepathy",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Tele pathy.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Telepathy",
      "typo_space_addition": "Tele pathy"
    }
  },
  {
    "SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "tables": [
      "battle"
    ],
    "columns": [
      "battle.latin_commander",
      "battle.bulgarian_commander",
      "battle.name"
    ],
    "values": [
      {
        "table": "battle",
        "column": "bulgarian_commander",
        "value": "Kaloyan",
        "condition": "="
      },
      {
        "table": "battle",
        "column": "latin_commander",
        "value": "Baldwin I",
        "condition": "="
      }
    ],
    "db_id": "battle_death",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "battle.bulgarian_commander.kaloyan",
      "battle.latin_commander.baldwin i"
    ],
    "original_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
    "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'BaldwinI'?",
    "original_SQL": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
    "changes_information": {
      "original_value": "Baldwin I",
      "typo_space_removal": "BaldwinI"
    }
  },
  {
    "SQL": "SELECT layout FROM cards WHERE keywords = 'Double strike'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.keywords",
      "cards.layout"
    ],
    "values": [
      {
        "table": "cards",
        "column": "keywords",
        "value": "Double strike",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.keywords.double_strike"
    ],
    "original_question": "What are the card layout of cards with keyword of flying?",
    "question": "What are the card layout of cards with keyword of Doublestrike?",
    "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "changes_information": {
      "original_value": "Double strike",
      "typo_space_removal": "Doublestrike"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Hypnotic Specter'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'HypnoticSpecter'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT promoTypes FROM cards WHERE name = 'Hypnotic Specter' AND promoTypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
    "values_list": [
      "cards.name.hypnotic_specter"
    ],
    "original_question": "What type of promotion is of card 'Duress'?",
    "question": "What type of promotion is of card 'HypnoticSpecter'?",
    "original_SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.hypnotic_specter"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"HypnoticSpecter\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"HypnoticSpecter\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"HypnoticSpecter\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"HypnoticSpecter\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of HypnoticSpecter.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"HypnoticSpecter\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.hypnotic_specter"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'HypnoticSpecter' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Hypnotic Specter'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.hypnotic_specter"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"HypnoticSpecter\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Hypnotic Specter' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"HypnoticSpecter\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Hypnotic Specter' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Hypnotic Specter",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"HypnoticSpecter\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Hypnotic Specter",
      "typo_space_removal": "HypnoticSpecter"
    }
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Adam Beechen'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Adam Beechen",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by AdamBeechen?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Adam Beechen",
      "typo_space_removal": "AdamBeechen"
    }
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Le Mans'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Le Mans",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.le_mans"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in LeMans.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Le Mans",
      "typo_space_removal": "LeMans"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on BrandsHatch be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on BrandsHatch.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    }
  },
  {
    "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "races.circuitid",
      "races.date",
      "races.year",
      "races.name",
      "circuits.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      },
      {
        "table": "races",
        "column": "name",
        "value": "British Grand Prix",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "the last refers to max(year);",
    "values_list": [
      "circuits.name.brands hatch",
      "races.name.british grand prix"
    ],
    "original_question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
    "question": "When was the last f1 season whereby BrandsHatch hosted the British Grand Prix?",
    "original_SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    }
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Brands Hatch'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of BrandsHatch?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that BrandsHatch was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the BrandsHatch.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    }
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Brands Hatch'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Brands Hatch",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.brands_hatch"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the BrandsHatch circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Brands Hatch",
      "typo_space_removal": "BrandsHatch"
    }
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Ransom Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What is the owner of document with the Description 'Braeden Collection'?",
    "question": "What is the owner of document with the Description 'RansomCollection'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Ransom Collection",
      "typo_space_removal": "RansomCollection"
    }
  },
  {
    "SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Ransom Collection'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.description",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "description",
        "value": "Ransom Collection",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.description.braeden collection"
    ],
    "original_question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "question": "What are the owners of the document objects described as the 'RansomCollection'?",
    "original_SQL": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "changes_information": {
      "original_value": "Ransom Collection",
      "typo_space_removal": "RansomCollection"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Club shirts'",
    "tables": [
      "budget",
      "expense"
    ],
    "columns": [
      "budget.budget_id",
      "expense.link_to_budget",
      "budget.category",
      "expense.expense_description"
    ],
    "values": [
      {
        "table": "expense",
        "column": "expense_description",
        "value": "Club shirts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Posters' refers to expense description",
    "values_list": [
      "expense.expense_description.club_shirts"
    ],
    "original_question": "Which budget category does the expense 'Posters' fall to?",
    "question": "Which budget category does the expense 'Clubshirts' fall to?",
    "original_SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "changes_information": {
      "original_value": "Club shirts",
      "typo_space_removal": "Clubshirts"
    }
  },
  {
    "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
    "tables": [
      "hangar"
    ],
    "columns": [
      "hangar.plane_name",
      "hangar.location"
    ],
    "values": [
      {
        "table": "hangar",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "hangar.plane_name.f-14 fighter"
    ],
    "original_question": "Where is the plane F-14 Fighter located?",
    "question": "Where is the plane PiperCub located?",
    "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    }
  },
  {
    "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
    "tables": [
      "hangar"
    ],
    "columns": [
      "hangar.plane_name",
      "hangar.location"
    ],
    "values": [
      {
        "table": "hangar",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "hangar.plane_name.f-14 fighter"
    ],
    "original_question": "Return the location of the hangar in which F-14 Fighter is located.",
    "question": "Return the location of the hangar in which PiperCub is located.",
    "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    }
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'New Haven' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "New Haven",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "question": "What are the country code and first name of the players who won in both tourney NewHaven and Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "New Haven",
      "typo_space_removal": "NewHaven"
    }
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'New Haven' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "New Haven",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "question": "What are the first names and country codes for players who won both the NewHaven and the Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "New Haven",
      "typo_space_removal": "NewHaven"
    }
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'New Haven' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "New Haven",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the NewHaven tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "New Haven",
      "typo_space_removal": "NewHaven"
    }
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'New Haven' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "New Haven",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the NewHaven tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "New Haven",
      "typo_space_removal": "NewHaven"
    }
  },
  {
    "SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Adult STILL' AND T2.PLT BETWEEN 100 AND 400",
    "tables": [
      "patient",
      "laboratory"
    ],
    "columns": [
      "patient.diagnosis",
      "patient.id",
      "laboratory.plt",
      "laboratory.id"
    ],
    "values": [
      {
        "table": "patient",
        "column": "diagnosis",
        "value": "Adult STILL",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
    "values_list": [
      "patient.diagnosis.adult_still"
    ],
    "original_question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
    "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with AdultSTILL.",
    "original_SQL": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400",
    "changes_information": {
      "original_value": "Adult STILL",
      "typo_space_removal": "AdultSTILL"
    }
  },
  {
    "SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "age",
        "value": "35",
        "condition": "<"
      },
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.age.35",
      "pilotskills.plane_name.piper cub"
    ],
    "original_question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "question": "Find the names of all pilots who have a plane named PiperCub and is under 35.",
    "original_SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    }
  },
  {
    "SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "age",
        "value": "35",
        "condition": "<"
      },
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.age.35",
      "pilotskills.plane_name.piper cub"
    ],
    "original_question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "question": "What are the names of pilots who are younger than 35 and have a plane named PiperCub?",
    "original_SQL": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    }
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub"
    ],
    "original_question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "question": "Who is the youngest pilot to fly the plane PiperCub?",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    }
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub"
    ],
    "original_question": "Return the name of the youngest pilot to fly Piper Cub.",
    "question": "Return the name of the youngest pilot to fly PiperCub.",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    }
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      },
      {
        "table": "",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub",
      ".plane_name.piper cub"
    ],
    "original_question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane PiperCub.",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    }
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.age"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      },
      {
        "table": "",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub",
      ".plane_name.piper cub"
    ],
    "original_question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "question": "Return the names of pilots who are older than any pilot who has flown PiperCub, ordered alphabetically.",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Unknown formula'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Unknownformula\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    }
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Unknown formula'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Unknownformula\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    }
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Unknown formula'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Unknown formula",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Unknownformula'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Unknown formula",
      "typo_space_removal": "Unknownformula"
    }
  },
  {
    "SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics'",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "publisher.id",
      "superhero.publisher_id",
      "publisher.publisher_name"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "question": "Rank heroes published by DCComics by their height in descending order.",
    "original_SQL": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    }
  },
  {
    "SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' GROUP BY colour.colour",
    "tables": [
      "publisher",
      "superhero",
      "colour"
    ],
    "columns": [
      "superhero.id",
      "colour.colour",
      "publisher.publisher_name",
      "colour.id",
      "publisher.id",
      "superhero.eye_colour_id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "values_list": [
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "question": "Rank superheroes from DCComics by their eye color popularity, starting with the most common color.",
    "original_SQL": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'DC Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Super Strength",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from DCComics who have the super power of 'Super Strength'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in DCComics.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "DC Comics",
      "typo_space_removal": "DCComics"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'New God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "New God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.new_god"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the NewGod superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "New God",
      "typo_space_removal": "NewGod"
    }
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'New God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "New God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "values_list": [
      "race.race.new_god"
    ],
    "original_question": "List down at least five full name of Demi-God superheroes.",
    "question": "List down at least five full name of NewGod superheroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "changes_information": {
      "original_value": "New God",
      "typo_space_removal": "NewGod"
    }
  },
  {
    "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'New God'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "race.race",
      "superhero.full_name",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "New God",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "values_list": [
      "race.race.new_god"
    ],
    "original_question": "Provide the full names of vampire heroes.",
    "question": "Provide the full names of NewGod heroes.",
    "original_SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "changes_information": {
      "original_value": "New God",
      "typo_space_removal": "NewGod"
    }
  },
  {
    "SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Ann Marie'",
    "tables": [
      "frpm",
      "schools"
    ],
    "columns": [
      "frpm.district code",
      "frpm.cdscode",
      "frpm.free meal count (k-12)",
      "schools.admfname1",
      "schools.cdscode",
      "frpm.enrollment (k-12)"
    ],
    "values": [
      {
        "table": "schools",
        "column": "admfname1",
        "value": "Ann Marie",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "values_list": [
      "schools.admfname1.ann_marie"
    ],
    "original_question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is AnnMarie. List the district code of the school.",
    "original_SQL": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "changes_information": {
      "original_value": "Ann Marie",
      "typo_space_removal": "AnnMarie"
    }
  },
  {
    "SQL": "SELECT GSserved FROM schools WHERE City = 'San Lorenzo' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "tables": [
      "schools"
    ],
    "columns": [
      "schools.city",
      "schools.gsserved"
    ],
    "values": [
      {
        "table": "schools",
        "column": "city",
        "value": "San Lorenzo",
        "condition": "="
      }
    ],
    "db_id": "california_schools",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "schools.city.san_lorenzo"
    ],
    "original_question": "What is the most common type of grade span served in the city of Adelanto?",
    "question": "What is the most common type of grade span served in the city of SanLorenzo?",
    "original_SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "changes_information": {
      "original_value": "San Lorenzo",
      "typo_space_removal": "SanLorenzo"
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Laura Kinney'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.full_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Laura Kinney",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "values_list": [
      "superhero.full_name.abraham sapien"
    ],
    "original_question": "What is the eyes colour of Abraham Sapien?",
    "question": "What is the eyes colour of Laurakinney?",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "changes_information": {
      "original_value": "Laura Kinney",
      "typo_space_removal": "Laurakinney"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Laura Kinney'",
    "tables": [
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.full_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Laura Kinney",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "values_list": [
      "superhero.full_name.charles chandler"
    ],
    "original_question": "Name the superhero, otherwise known as Charles Chandler.",
    "question": "Name the superhero, otherwise known as Laurakinney.",
    "original_SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "changes_information": {
      "original_value": "Laura Kinney",
      "typo_space_removal": "Laurakinney"
    }
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Copycat is the superhero_name;",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "What is Copycat's race?",
    "question": "What is AgentZero's race?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "Indicate the attribute value of superhero Abomination.",
    "question": "Indicate the attribute value of superhero AgentZero.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "race.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "Which group does superhero A-Bomb belong to?",
    "question": "Which group does superhero AgentZero belong to?",
    "original_SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "gender"
    ],
    "columns": [
      "gender.gender",
      "gender.id",
      "superhero.gender_id",
      "superhero.superhero_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "values_list": [
      "superhero.superhero_name.agent 13"
    ],
    "original_question": "What is the gender of Agent 13 hero?",
    "question": "What is the gender of AgentZero hero?",
    "original_SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "race",
      "superhero",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "race.id",
      "superhero.superhero_name",
      "superhero.race_id",
      "race.race",
      "alignment.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "values_list": [
      "superhero.superhero_name.cameron hicks"
    ],
    "original_question": "What are the race and alignment of Cameron Hicks?",
    "question": "What are the race and alignment of AgentZero?",
    "original_SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "values_list": [
      "superhero.superhero_name.3-d man"
    ],
    "original_question": "State all of 3-D Man's attributes along with their values.",
    "question": "State all of AgentZero's attributes along with their values.",
    "original_SQL": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower",
      "alignment"
    ],
    "columns": [
      "alignment.alignment",
      "superhero.alignment_id",
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "alignment.id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.atom iv"
    ],
    "original_question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "question": "Give the alignment and superpowers of the superhero named AgentZero.",
    "original_SQL": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "List down Ajax's superpowers.",
    "question": "List down AgentZero's superpowers.",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Agent Zero' ORDER BY T2.attribute_value ASC LIMIT 1",
    "tables": [
      "hero_attribute",
      "superhero",
      "attribute"
    ],
    "columns": [
      "hero_attribute.attribute_value",
      "superhero.id",
      "superhero.superhero_name",
      "attribute.id",
      "hero_attribute.hero_id",
      "attribute.attribute_name",
      "hero_attribute.attribute_id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "values_list": [
      "superhero.superhero_name.black panther"
    ],
    "original_question": "Identify the weakest attribute of the Black Panther.",
    "question": "Identify the weakest attribute of the AgentZero.",
    "original_SQL": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "hero_attribute",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "hero_attribute.hero_id",
      "hero_attribute.attribute_value",
      "superhero.id"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "List the attribute value of the superhero named Aquababy.",
    "question": "List the attribute value of the superhero named AgentZero.",
    "original_SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Agent Zero'",
    "tables": [
      "superhero",
      "colour"
    ],
    "columns": [
      "colour.id",
      "superhero.eye_colour_id",
      "superhero.superhero_name",
      "colour.colour"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "superhero_name",
        "value": "Agent Zero",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "values_list": [
      "superhero.superhero_name.agent_zero"
    ],
    "original_question": "Give the eye colour of Blackwulf.",
    "question": "Give the eye colour of AgentZero.",
    "original_SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "changes_information": {
      "original_value": "Agent Zero",
      "typo_space_removal": "AgentZero"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'EnergyArmor'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of EnergyArmor?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.energy_armor"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with EnergyArmor power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Energy Armor'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.energy_armor"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the EnergyArmor power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    }
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Energy Armor'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.energy_armor"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of EnergyArmor?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    }
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Energy Armor'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Energy Armor",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of EnergyArmor.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Energy Armor",
      "typo_space_removal": "EnergyArmor"
    }
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Robert Lu'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Robert Lu",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'RobertLu'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Robert Lu",
      "typo_space_removal": "RobertLu"
    }
  },
  {
    "SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.contents",
      "boxes.value",
      "boxes.code"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      },
      {
        "table": "",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.scissors",
      ".contents.scissors"
    ],
    "original_question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissorz?",
    "original_SQL": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "changes_information": {
      "original_value": "Scissors",
      "typo_substitution": "Scissorz"
    }
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Katowice' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Katowice",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the Katowica tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Katowice",
      "typo_substitution": "Katowica"
    }
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Katowice' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Katowice",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the Katowica tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "Katowice",
      "typo_substitution": "Katowica"
    }
  },
  {
    "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Eugene')",
    "tables": [
      "sailors"
    ],
    "columns": [
      "sailors.rating",
      "sailors.name"
    ],
    "values": [
      {
        "table": "sailors",
        "column": "name",
        "value": "Eugene",
        "condition": "="
      },
      {
        "table": "",
        "column": "name",
        "value": "Luis",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "sailors.name.eugene",
      ".name.luis"
    ],
    "original_question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Eugena?",
    "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
    "changes_information": {
      "original_value": "Eugene",
      "typo_substitution": "Eugena"
    }
  },
  {
    "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Eugene')",
    "tables": [
      "sailors"
    ],
    "columns": [
      "sailors.rating",
      "sailors.name"
    ],
    "values": [
      {
        "table": "sailors",
        "column": "name",
        "value": "Eugene",
        "condition": "="
      },
      {
        "table": "",
        "column": "name",
        "value": "Luis",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "sailors.name.eugene",
      ".name.luis"
    ],
    "original_question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Eugena?",
    "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
    "changes_information": {
      "original_value": "Eugene",
      "typo_substitution": "Eugena"
    }
  },
  {
    "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Eugene')",
    "tables": [
      "sailors"
    ],
    "columns": [
      "sailors.rating",
      "sailors.name"
    ],
    "values": [
      {
        "table": "sailors",
        "column": "name",
        "value": "Eugene",
        "condition": "="
      },
      {
        "table": "",
        "column": "name",
        "value": "Luis",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "sailors.name.eugene",
      ".name.luis"
    ],
    "original_question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Eugena?",
    "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
    "changes_information": {
      "original_value": "Eugene",
      "typo_substitution": "Eugena"
    }
  },
  {
    "SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Eugene')",
    "tables": [
      "sailors"
    ],
    "columns": [
      "sailors.rating",
      "sailors.name"
    ],
    "values": [
      {
        "table": "sailors",
        "column": "name",
        "value": "Eugene",
        "condition": "="
      },
      {
        "table": "",
        "column": "name",
        "value": "Luis",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "sailors.name.eugene",
      ".name.luis"
    ],
    "original_question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "question": "What are the names of all sailors with a higher rating than every sailor named Eugena?",
    "original_SQL": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
    "changes_information": {
      "original_value": "Eugene",
      "typo_substitution": "Eugena"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Bernie Perez'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.bernie_perez"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Bernie Perex\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    }
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Bernie Perez'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Bernie Perez",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Bernie Perex'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Bernie Perez",
      "typo_substitution": "Bernie Perex"
    }
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "Port Chelsea",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code of the address in the city Port Chelsea?",
    "question": "What is the zip code of the address in the city The Port Chelsea?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "Port Chelsea",
      "word_addition": "The Port Chelsea"
    }
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "Port Chelsea",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code for Port Chelsea?",
    "question": "What is the zip code for The Port Chelsea?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "Port Chelsea",
      "word_addition": "The Port Chelsea"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "tables": [
      "superhero",
      "alignment"
    ],
    "columns": [
      "superhero.superhero_name",
      "alignment.alignment",
      "superhero.alignment_id",
      "alignment.id"
    ],
    "values": [
      {
        "table": "alignment",
        "column": "alignment",
        "value": "Neutral",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
    "values_list": [
      "alignment.alignment.neutral"
    ],
    "original_question": "Describe the names of neutral alignment superheroes.",
    "question": "Describe the names of Generally Neutral alignment superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "changes_information": {
      "original_value": "Neutral",
      "word_addition": "Generally Neutral"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Nice Answer' LIMIT 10",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Nice Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "values_list": [
      "badges.name.nice_answer"
    ],
    "original_question": "Name 10 users with the badge name 'Necromancer.'",
    "question": "Name 10 users with the badge name 'A Nice Answer.'",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "changes_information": {
      "original_value": "Nice Answer",
      "word_addition": "A Nice Answer"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Nice Answer'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Nice Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "values_list": [
      "badges.name.nice_answer"
    ],
    "original_question": "List all the name of users that obtained the Organizer Badges.",
    "question": "List all the name of users that obtained the A Nice Answer Badges.",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "changes_information": {
      "original_value": "Nice Answer",
      "word_addition": "A Nice Answer"
    }
  },
  {
    "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Nice Answer'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.location",
      "badges.userid",
      "badges.name",
      "users.id",
      "users.lastaccessdate"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Nice Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Outliers is the name of the badge;",
    "values_list": [
      "badges.name.nice_answer"
    ],
    "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "question": "Describe the last accessed date and location of the users who received the A Nice Answer badge.",
    "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "changes_information": {
      "original_value": "Nice Answer",
      "word_addition": "A Nice Answer"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Nice Answer' ORDER BY T2.Date LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "badges",
        "column": "name",
        "value": "Nice Answer",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "values_list": [
      "badges.name.nice_answer"
    ],
    "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "question": "What is the display name of the user who acquired the first A Nice Answer badge?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "changes_information": {
      "original_value": "Nice Answer",
      "word_addition": "A Nice Answer"
    }
  },
  {
    "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Mars'",
    "tables": [
      "boats",
      "sailors",
      "reserves"
    ],
    "columns": [
      "sailors.sid",
      "sailors.name",
      "boats.bid",
      "reserves.bid",
      "boats.name",
      "reserves.sid"
    ],
    "values": [
      {
        "table": "boats",
        "column": "name",
        "value": "Mars",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boats.name.mars"
    ],
    "original_question": "Find the names of sailors who reserved boat with the name Melon.",
    "question": "Find the names of sailors who reserved boat with the name The Mars.",
    "original_SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
    "changes_information": {
      "original_value": "Mars",
      "word_addition": "The Mars"
    }
  },
  {
    "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Mars'",
    "tables": [
      "boats",
      "sailors",
      "reserves"
    ],
    "columns": [
      "sailors.sid",
      "sailors.name",
      "boats.bid",
      "reserves.bid",
      "boats.name",
      "reserves.sid"
    ],
    "values": [
      {
        "table": "boats",
        "column": "name",
        "value": "Mars",
        "condition": "="
      }
    ],
    "db_id": "boat_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boats.name.mars"
    ],
    "original_question": "What are the names of sailors who reserved a boat with the name Melon?",
    "question": "What are the names of sailors who reserved a boat with the name The Mars?",
    "original_SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
    "changes_information": {
      "original_value": "Mars",
      "word_addition": "The Mars"
    }
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Pete Venters' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.format",
      "cards.id",
      "legalities.uuid",
      "cards.uuid",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "pauper",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'",
    "values_list": [
      "cards.availability.paper",
      "cards.artist.erica yang",
      "legalities.format.pauper"
    ],
    "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "question": "Is there any card from Mr. Pete Venters artist in pauper format and available in paper? If so, indicate its ID.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    }
  },
  {
    "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Pete Venters'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "values_list": [
      "cards.artist.daren bader"
    ],
    "original_question": "What kind of printing is on the card that Daren Bader created?",
    "question": "What kind of printing is on the card that Mr. Pete Venters created?",
    "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Pete Venters' ORDER BY T2.date DESC",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "rulings.date",
      "rulings.text",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "values_list": [
      "cards.artist.kev walker"
    ],
    "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "question": "What are the rulings for the card named and designed by Mr. Pete Venters? List them in descending order of dates.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Pete Venters'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.artist",
      "legalities.status",
      "cards.name",
      "cards.frameversion",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Pete Venters",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "values_list": [
      "legalities.status.banned",
      "cards.artist.allen williams"
    ],
    "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "question": "List all the frame styles and cards Mr. Pete Venters worked on and find any banned cards if there are any.",
    "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "changes_information": {
      "original_value": "Pete Venters",
      "word_addition": "Mr. Pete Venters"
    }
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.availability",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "arena",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.arena"
    ],
    "original_question": "Lists all types of cards available in arena.",
    "question": "Lists all types of cards available in The arena.",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "arena",
      "word_addition": "The arena"
    }
  },
  {
    "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.bordercolor",
      "cards.artist",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "arena",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "bordercolor",
        "value": "black",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
    "values_list": [
      "cards.availability.arena",
      "cards.bordercolor.black"
    ],
    "original_question": "List the artists who illustrated cards with black borders which are available only in arena.",
    "question": "List the artists who illustrated cards with black borders which are available only in The arena.",
    "original_SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "changes_information": {
      "original_value": "arena",
      "word_addition": "The arena"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Fear'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'The Fear'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Fear'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.fear"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"The Fear\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fear' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"The Fear\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fear' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Fear",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"The Fear\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Fear",
      "word_addition": "The Fear"
    }
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Michael Chang",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Mr. Michael Chang?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Michael Chang",
      "word_addition": "Mr. Michael Chang"
    }
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Michael Chang",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Mr. Michael Chang?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Michael Chang",
      "word_addition": "Mr. Michael Chang"
    }
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Todd Casey",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question": "which countries' tv channels are playing some cartoon written by Mr. Todd Casey?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Todd Casey",
      "word_addition": "Mr. Todd Casey"
    }
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Todd Casey",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by Mr. Todd Casey?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Todd Casey",
      "word_addition": "Mr. Todd Casey"
    }
  },
  {
    "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Dijon'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.location"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "location",
        "value": "Dijon",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Shanghai is a name of location;",
    "values_list": [
      "circuits.location.dijon"
    ],
    "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
    "question": "Please list the year during which the race is held on circuits in Dijon, France.",
    "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "changes_information": {
      "original_value": "Dijon",
      "word_addition": "Dijon, France"
    }
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Kirsten'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Kirsten",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.kirsten"
    ],
    "original_question": "Show agency details for client with detail 'Mac'.",
    "question": "Show agency details for client with detail 'Ms. Kirsten'.",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Kirsten",
      "word_addition": "Ms. Kirsten"
    }
  },
  {
    "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Kirsten'",
    "tables": [
      "agencies",
      "clients"
    ],
    "columns": [
      "clients.agency_id",
      "agencies.agency_id",
      "clients.client_details",
      "agencies.agency_details"
    ],
    "values": [
      {
        "table": "clients",
        "column": "client_details",
        "value": "Kirsten",
        "condition": "="
      }
    ],
    "db_id": "advertising_agencies",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "clients.client_details.kirsten"
    ],
    "original_question": "What are the agency details for clients with the detail Mac?",
    "question": "What are the agency details for clients with the detail Ms. Kirsten?",
    "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "changes_information": {
      "original_value": "Kirsten",
      "word_addition": "Ms. Kirsten"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Aston Martin'",
    "tables": [
      "constructors",
      "constructorstandings"
    ],
    "columns": [
      "constructorstandings.constructorid",
      "constructors.name",
      "constructorstandings.position",
      "constructors.constructorid"
    ],
    "values": [
      {
        "table": "constructors",
        "column": "name",
        "value": "Aston Martin",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "Renault is a name of constructor;",
    "values_list": [
      "constructors.name.aston_martin"
    ],
    "original_question": "Please list the positions of the circuits built by the constructor Renault.",
    "question": "Please list the positions of the circuits built by the constructor The Aston Martin.",
    "original_SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "changes_information": {
      "original_value": "Aston Martin",
      "word_addition": "The Aston Martin"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "tables": [
      "students",
      "degree_programs",
      "student_enrolment"
    ],
    "columns": [
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.first_name",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id"
    ],
    "values": [
      {
        "table": "degree_programs",
        "column": "degree_summary_name",
        "value": "Bachelor",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "degree_programs.degree_summary_name.bachelor"
    ],
    "original_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
    "question": "Who is enrolled in a Bachelor level degree program? List the first name, middle name, last name.",
    "original_SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
    "changes_information": {
      "original_value": "Bachelor",
      "word_addition": "Bachelor level"
    }
  },
  {
    "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What is the parent document of document owned by Marlin? List the document id.",
    "question": "What is the parent document of document owned by Mr. Marlin? List the document id.",
    "original_SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What are the document object ids of the objects owned by Marlin?",
    "question": "What are the document object ids of the objects owned by Mr. Marlin?",
    "original_SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "question": "What is the owner of the parent document of document owned by 'Mr. Marlin'?",
    "original_SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "tables": [
      "document_objects"
    ],
    "columns": [
      "document_objects.parent_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "question": "Who is the owner of the parent document of every documents where 'Mr. Marlin' is the owner?",
    "original_SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Marlin'",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "List all document which is related to document owned by Ransom . List the document id .",
    "question": "List all document which is related to document owned by Mr. Marlin . List the document id .",
    "original_SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Marlin';",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.related_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "List all owner of documents that is related to documents owned by Braeden.",
    "question": "List all owner of documents that is related to documents owned by Mr. Marlin.",
    "original_SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Marlin';",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.related_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "question": "What are the different owners of documents that are related to ones owned by Mr. Marlin?",
    "original_SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Marlin'",
    "tables": [
      "document_subsets",
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.owner",
      "document_subset_members.document_subset_id",
      "document_subsets.document_subset_name",
      "document_objects.document_object_id",
      "document_subsets.document_subset_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "question": "Which unique subset does document owned by Mr. Marlin belong to? List the subset name.",
    "original_SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Marlin'",
    "tables": [
      "document_subsets",
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.document_object_id",
      "document_objects.owner",
      "document_subset_members.document_subset_id",
      "document_subsets.document_subset_name",
      "document_objects.document_object_id",
      "document_subsets.document_subset_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What are the different subset names of all documents owned by Braeden?",
    "question": "What are the different subset names of all documents owned by Mr. Marlin?",
    "original_SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'Marlin'",
    "tables": [
      "collections",
      "document_objects",
      "documents_in_collections"
    ],
    "columns": [
      "collections.collection_id",
      "document_objects.owner",
      "documents_in_collections.document_object_id",
      "collections.collection_name",
      "document_objects.document_object_id",
      "documents_in_collections.collection_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "question": "List the Collection Name that document owned by 'Mr. Marlin ' belong to .",
    "original_SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Marlin'",
    "tables": [
      "collections",
      "document_objects",
      "documents_in_collections"
    ],
    "columns": [
      "collections.collection_id",
      "document_objects.owner",
      "documents_in_collections.document_object_id",
      "collections.collection_name",
      "document_objects.document_object_id",
      "documents_in_collections.collection_id"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Marlin",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.marlin"
    ],
    "original_question": "What is the collection name of a document owned by 'Ransom'?",
    "question": "What is the collection name of a document owned by 'Mr. Marlin'?",
    "original_SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
    "changes_information": {
      "original_value": "Marlin",
      "word_addition": "Mr. Marlin"
    }
  },
  {
    "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "tables": [
      "driver"
    ],
    "columns": [
      "driver.citizenship",
      "driver.name"
    ],
    "values": [
      {
        "table": "driver",
        "column": "citizenship",
        "value": "United States",
        "condition": "="
      }
    ],
    "db_id": "vehicle_driver",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "driver.citizenship.united states"
    ],
    "original_question": "What are the names of the drivers who are citizens of the 'United States'?",
    "question": "What are the names of the drivers who are citizens of the 'United States of America'?",
    "original_SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "changes_information": {
      "original_value": "United States",
      "word_addition": "United States of America"
    }
  },
  {
    "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "tables": [
      "driver"
    ],
    "columns": [
      "driver.citizenship",
      "driver.name"
    ],
    "values": [
      {
        "table": "driver",
        "column": "citizenship",
        "value": "United States",
        "condition": "="
      }
    ],
    "db_id": "vehicle_driver",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "driver.citizenship.united states"
    ],
    "original_question": "Return the names of drivers with citizenship from the United States.",
    "question": "Return the names of drivers with citizenship from the United States of America.",
    "original_SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "changes_information": {
      "original_value": "United States",
      "word_addition": "United States of America"
    }
  },
  {
    "SQL": "SELECT location FROM event WHERE event_name = 'April Meeting'",
    "tables": [
      "event"
    ],
    "columns": [
      "event.location",
      "event.event_name"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "April Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Spring Budget Review' is an event name;",
    "values_list": [
      "event.event_name.spring budget review"
    ],
    "original_question": "Give the location for \"Spring Budget Review\".",
    "question": "Give the location for \"The April Meeting\".",
    "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "changes_information": {
      "original_value": "April Meeting",
      "word_addition": "The April Meeting"
    }
  },
  {
    "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Meeting' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "April Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "values_list": [
      "event.event_name.april speaker"
    ],
    "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "question": "Calculate the amount budgeted for 'The April Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "changes_information": {
      "original_value": "April Meeting",
      "word_addition": "The April Meeting"
    }
  },
  {
    "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Meeting'",
    "tables": [
      "budget",
      "event"
    ],
    "columns": [
      "budget.amount",
      "event.event_name",
      "budget.category",
      "budget.link_to_event",
      "event.event_id"
    ],
    "values": [
      {
        "table": "event",
        "column": "event_name",
        "value": "April Meeting",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "values_list": [
      "event.event_name.january speaker"
    ],
    "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "question": "What category was budgeted for the 'The April Meeting' event and how much was the amount budgeted for that category?",
    "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "changes_information": {
      "original_value": "April Meeting",
      "word_addition": "The April Meeting"
    }
  },
  {
    "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
    "tables": [
      "hangar"
    ],
    "columns": [
      "hangar.plane_name",
      "hangar.location"
    ],
    "values": [
      {
        "table": "hangar",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "hangar.plane_name.f-14 fighter"
    ],
    "original_question": "Return the location of the hangar in which F-14 Fighter is located.",
    "question": "Return the location of the hangar in which The Piper Cub is located.",
    "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "word_addition": "The Piper Cub"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "format",
        "value": "gladiator",
        "condition": "="
      },
      {
        "table": "legalities",
        "column": "status",
        "value": "Banned",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "values_list": [
      "cards.rarity.mythic",
      "legalities.format.gladiator",
      "legalities.status.banned"
    ],
    "original_question": "List all the mythic rarity print cards banned in gladiator format.",
    "question": "List all the mythic rarity print cards banned in The Gladiator format.",
    "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "changes_information": {
      "original_value": "gladiator",
      "word_addition": "The Gladiator"
    }
  },
  {
    "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "tables": [
      "rulings",
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.types",
      "cards.id",
      "legalities.status",
      "legalities.uuid",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "types",
        "value": "Creature",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
    "values_list": [
      "legalities.status.legal",
      "cards.types.creature"
    ],
    "original_question": "Lists by ID all Creature-type cards with legal status.",
    "question": "Lists by ID all Creature-type cards with Fully Legal status.",
    "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "changes_information": {
      "original_value": "Legal",
      "word_addition": "Fully Legal"
    }
  },
  {
    "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "cards.rarity",
      "legalities.format",
      "legalities.status",
      "cards.originalreleasedate",
      "legalities.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "legalities",
        "column": "status",
        "value": "Legal",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "rarity",
        "value": "mythic",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
    "values_list": [
      "legalities.status.legal",
      "cards.rarity.mythic"
    ],
    "original_question": "When was the oldest mythic card released and what are its legal play formats?",
    "question": "When was the oldest mythic card released and what are its Fully Legal play formats?",
    "original_SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
    "changes_information": {
      "original_value": "Legal",
      "word_addition": "Fully Legal"
    }
  },
  {
    "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'President'",
    "tables": [
      "member",
      "income"
    ],
    "columns": [
      "income.link_to_member",
      "member.member_id",
      "member.position",
      "income.amount"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "What is the amount of the funds that the Vice President received?",
    "question": "What is the amount of the funds that the Club President received?",
    "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    }
  },
  {
    "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "tables": [
      "member",
      "zip_code"
    ],
    "columns": [
      "zip_code.zip_code",
      "zip_code.state",
      "zip_code.city",
      "member.position",
      "member.zip"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club;",
    "values_list": [
      "member.position.president"
    ],
    "original_question": "What city and state did the President of the Student_Club grow up?",
    "question": "What city and state did the Club President of the Student_Club grow up?",
    "original_SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    }
  },
  {
    "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'President'",
    "tables": [
      "member"
    ],
    "columns": [
      "member.email",
      "member.first_name",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
    "values_list": [
      "member.position.president"
    ],
    "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
    "question": "Provide the full name and email address of the Student_Club's Club President.",
    "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    }
  },
  {
    "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.position",
      "major.major_id",
      "major.major_name",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "State the name of major that Vice President has joined.",
    "question": "State the name of major that Club President has joined.",
    "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    }
  },
  {
    "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'President'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "member.first_name",
      "major.major_id",
      "member.position",
      "member.last_name"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "President",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "full name refers to first_name, last name",
    "values_list": [
      "member.position.president"
    ],
    "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "question": "Write the full name of the club member with the position of 'Club President' and list which college the club member belongs to.",
    "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "changes_information": {
      "original_value": "President",
      "word_addition": "Club President"
    }
  },
  {
    "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "tables": [
      "movietheaters",
      "movies"
    ],
    "columns": [
      "movies.code",
      "movietheaters.movie",
      "movies.title",
      "movietheaters.name"
    ],
    "values": [
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      }
    ],
    "db_id": "movie_2",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "movietheaters.name.odeon"
    ],
    "original_question": "Find the title of the movie that is played in the Odeon theater.",
    "question": "Find the title of the movie that is played in the The Odeon theater.",
    "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "changes_information": {
      "original_value": "Odeon",
      "word_addition": "The Odeon"
    }
  },
  {
    "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "tables": [
      "movietheaters",
      "movies"
    ],
    "columns": [
      "movies.code",
      "movietheaters.movie",
      "movies.title",
      "movietheaters.name"
    ],
    "values": [
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      }
    ],
    "db_id": "movie_2",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "movietheaters.name.odeon"
    ],
    "original_question": "What are the movie titles for ones that are played in the Odeon theater?",
    "question": "What are the movie titles for ones that are played in the The Odeon theater?",
    "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "changes_information": {
      "original_value": "Odeon",
      "word_addition": "The Odeon"
    }
  },
  {
    "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "tables": [
      "addresses"
    ],
    "columns": [
      "addresses.zip_postcode",
      "addresses.city"
    ],
    "values": [
      {
        "table": "addresses",
        "column": "city",
        "value": "Port Chelsea",
        "condition": "="
      }
    ],
    "db_id": "student_transcripts_tracking",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "addresses.city.port chelsea"
    ],
    "original_question": "What is the zip code for Port Chelsea?",
    "question": "What is the zip code for Chelsea Port?",
    "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
    "changes_information": {
      "original_value": "Port Chelsea",
      "word_order_change": "Chelsea Port"
    }
  },
  {
    "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Lorenzo Lanfranconi'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.artist",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "artist",
        "value": "Lorenzo Lanfranconi",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Aaron Boyd' is artist;",
    "values_list": [
      "cards.artist.aaron boyd"
    ],
    "original_question": "Name the cards that were illustrated by Aaron Boyd.",
    "question": "Name the cards that were illustrated by Lanfranconi Lorenzo.",
    "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "changes_information": {
      "original_value": "Lorenzo Lanfranconi",
      "word_order_change": "Lanfranconi Lorenzo"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Naya Hushblade'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Hushblade Naya'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Naya Hushblade'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Hushblade Naya\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Naya Hushblade'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Hushblade Naya\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    }
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Naya Hushblade'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Hushblade Naya\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    }
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Naya Hushblade'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Hushblade Naya\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Naya Hushblade'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.naya_hushblade"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Hushblade Naya\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Naya Hushblade' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Naya Hushblade",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Hushblade Naya\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Naya Hushblade",
      "word_order_change": "Hushblade Naya"
    }
  },
  {
    "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Legendary Artifact'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.originaltype",
      "cards.id",
      "rulings.date",
      "cards.uuid",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Legendary Artifact",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Creature - Elf is the originalType;",
    "values_list": [
      "cards.originaltype.creature - elf"
    ],
    "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "question": "List down the name of cards with original types of Artifact Legendary and the date of rulings for these cards.",
    "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "changes_information": {
      "original_value": "Legendary Artifact",
      "word_order_change": "Artifact Legendary"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Legendary Artifact' AND T1.colors = 'B'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.originaltype",
      "cards.name",
      "cards.colors",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "originaltype",
        "value": "Legendary Artifact",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "colors",
        "value": "B",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "values_list": [
      "cards.originaltype.legendary_artifact",
      "cards.colors.b"
    ],
    "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "question": "Among the Artifact Legendary cards, which are black color and comes with foreign languague translation?",
    "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "changes_information": {
      "original_value": "Legendary Artifact",
      "word_order_change": "Artifact Legendary"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'set (HOU)'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "foreign_data.flavortext",
      "cards.watermark",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "cards",
        "column": "watermark",
        "value": "set (HOU)",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "cards.watermark.set_(hou)"
    ],
    "original_question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
    "question": "What is the language and flavor text of the card that has (HOU) set watermark? List out the type of this card.",
    "original_SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
    "changes_information": {
      "original_value": "set (HOU)",
      "word_order_change": "(HOU) set"
    }
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Michael Jelenic'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Michael Jelenic",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
    "question": "which countries' tv channels are playing some cartoon written by Jelenic Michael?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Michael Jelenic",
      "word_order_change": "Jelenic Michael"
    }
  },
  {
    "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Michael Jelenic'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.written_by",
      "tv_channel.country",
      "cartoon.channel",
      "tv_channel.id"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "written_by",
        "value": "Michael Jelenic",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.written_by.todd casey"
    ],
    "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
    "question": "What are the countries that have cartoons on TV that were written by Jelenic Michael?",
    "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
    "changes_information": {
      "original_value": "Michael Jelenic",
      "word_order_change": "Jelenic Michael"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "values_list": [
      "circuits.name.circuit de barcelona-catalunya"
    ],
    "original_question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "question": "Where can the introduction of the races held on Speedway Fuji be found?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "information about races refers to url;",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Where can I find the information about the races held on Sepang International Circuit?",
    "question": "Where can I find the information about the races held on Speedway Fuji?",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "circuits.name",
      "races.time",
      "races.circuitid"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.sepang international circuit"
    ],
    "original_question": "Please list the time of the races held on Sepang International Circuit.",
    "question": "Please list the time of the races held on Speedway Fuji.",
    "original_SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    }
  },
  {
    "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Fuji Speedway'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "What's the location coordinates of Silverstone Circuit?",
    "question": "What's the location coordinates of Speedway Fuji?",
    "original_SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.year",
      "races.circuitid",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "question": "Please list all the years that Speedway Fuji was used in a Formula_1 race.",
    "original_SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Fuji Speedway'",
    "tables": [
      "circuits",
      "races"
    ],
    "columns": [
      "circuits.circuitid",
      "races.circuitid",
      "circuits.name",
      "circuits.url"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "more information refers to url",
    "values_list": [
      "circuits.name.silverstone circuit"
    ],
    "original_question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "question": "Please give more information about the Formula_1 races that used the Speedway Fuji.",
    "original_SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    }
  },
  {
    "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Fuji Speedway'",
    "tables": [
      "circuits"
    ],
    "columns": [
      "circuits.lat",
      "circuits.lng",
      "circuits.country",
      "circuits.name"
    ],
    "values": [
      {
        "table": "circuits",
        "column": "name",
        "value": "Fuji Speedway",
        "condition": "="
      }
    ],
    "db_id": "formula_1",
    "source": "bird_dev",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "values_list": [
      "circuits.name.fuji_speedway"
    ],
    "original_question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "question": "In which location does the Speedway Fuji circuit located? Also, find the country and coordinates of this circuit?",
    "original_SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "changes_information": {
      "original_value": "Fuji Speedway",
      "word_order_change": "Speedway Fuji"
    }
  },
  {
    "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Kutna Hora'",
    "tables": [
      "district",
      "account"
    ],
    "columns": [
      "account.date",
      "district.a2",
      "account.account_id",
      "account.district_id",
      "district.district_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a2",
        "value": "Kutna Hora",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "A2 refers to the names of districts.",
    "values_list": [
      "district.a2.kutna_hora"
    ],
    "original_question": "List account ID and account opening date for accounts from 'Prachatice'.",
    "question": "List account ID and account opening date for accounts from 'Hora Kutna'.",
    "original_SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
    "changes_information": {
      "original_value": "Kutna Hora",
      "word_order_change": "Hora Kutna"
    }
  },
  {
    "SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "tables": [
      "district",
      "client"
    ],
    "columns": [
      "client.gender",
      "client.district_id",
      "district.a4",
      "district.a3",
      "district.district_id",
      "client.client_id"
    ],
    "values": [
      {
        "table": "district",
        "column": "a3",
        "value": "south Bohemia",
        "condition": "="
      },
      {
        "table": "client",
        "column": "gender",
        "value": "M",
        "condition": "="
      }
    ],
    "db_id": "financial",
    "source": "bird_dev",
    "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
    "values_list": [
      "district.a3.south bohemia",
      "client.gender.m"
    ],
    "original_question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "question": "For the branch which located in the Bohemia south with biggest number of inhabitants, what is the percentage of the male clients?",
    "original_SQL": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "changes_information": {
      "original_value": "south Bohemia",
      "word_order_change": "Bohemia south"
    }
  },
  {
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'MCTD, AMI'",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.id",
      "examination.diagnosis",
      "examination.examination date"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "MCTD, AMI",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "values_list": [
      "examination.diagnosis.mctd,_ami"
    ],
    "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "question": "Lists all patients by ID who were diagnosed with AMI, MCTD's and had their exams between 01/01/197 and 12/31/1997.",
    "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "changes_information": {
      "original_value": "MCTD, AMI",
      "word_order_change": "AMI, MCTD"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.language",
      "foreign_data.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese' is the language;",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Name all the cards which have alternative language in Japanese.",
    "question": "Name all the cards which have alternative language in Simplified Chinese.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    }
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.artist",
      "foreign_data.language",
      "foreign_data.uuid",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Chinese Simplified' is the language;",
    "values_list": [
      "foreign_data.language.chinese simplified"
    ],
    "original_question": "List down the name of artists for cards in Chinese Simplified.",
    "question": "List down the name of artists for cards in Simplified Chinese.",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Chinese Simplified'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.availability"
    ],
    "values": [
      {
        "table": "cards",
        "column": "availability",
        "value": "paper",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "values_list": [
      "cards.availability.paper",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "What are the cards that only available in paper and Japanese language?",
    "question": "What are the cards that only available in paper and Simplified Chinese language?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    }
  },
  {
    "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Chinese Simplified'",
    "tables": [
      "foreign_data"
    ],
    "columns": [
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      },
      {
        "table": "",
        "column": "language",
        "value": "Spanish",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "values_list": [
      "foreign_data.language.chinese_simplified",
      ".language.spanish",
      ".language.spanish"
    ],
    "original_question": "Calculate the percentage of cards in Spanish. List them by name.",
    "question": "Calculate the percentage of cards in Simplified Chinese. List them by name.",
    "original_SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    }
  },
  {
    "SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.subtypes",
      "foreign_data.uuid",
      "cards.supertypes",
      "cards.uuid",
      "foreign_data.language"
    ],
    "values": [
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "values_list": [
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Lists all types of cards in German.",
    "question": "Lists all types of cards in Simplified Chinese.",
    "original_SQL": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified'",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "foreign_data.text",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "question": "Please list the Simplified Chinese text ruling of all the cards in the set Coldsnap.",
    "original_SQL": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    }
  },
  {
    "SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Chinese Simplified' ORDER BY T2.convertedManaCost DESC",
    "tables": [
      "sets",
      "cards",
      "foreign_data"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "foreign_data.uuid",
      "cards.uuid",
      "foreign_data.language",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "foreign_data",
        "column": "language",
        "value": "Chinese Simplified",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "values_list": [
      "sets.name.coldsnap",
      "foreign_data.language.chinese_simplified"
    ],
    "original_question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the Simplified Chinese names of the cards in the set Coldsnap with the highest converted mana cost.",
    "original_SQL": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC",
    "changes_information": {
      "original_value": "Chinese Simplified",
      "word_order_change": "Simplified Chinese"
    }
  },
  {
    "SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Liberal Arts'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.major_id",
      "major.major_name",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Liberal Arts",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'Business' is the major name",
    "values_list": [
      "major.major_name.liberal_arts"
    ],
    "original_question": "List out the position of members who joined major of Business.",
    "question": "List out the position of members who joined major of Arts Liberal.",
    "original_SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
    "changes_information": {
      "original_value": "Liberal Arts",
      "word_order_change": "Arts Liberal"
    }
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "WTA Championships",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
    "question": "What are the country code and first name of the players who won in both tourney Championships WTA and Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "WTA Championships",
      "word_order_change": "Championships WTA"
    }
  },
  {
    "SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "tables": [
      "matches",
      "players"
    ],
    "columns": [
      "matches.tourney_name",
      "players.country_code",
      "players.player_id",
      "matches.winner_id",
      "players.first_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "WTA Championships",
        "condition": "="
      },
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "Australian Open",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.wta championships",
      "matches.tourney_name.australian open"
    ],
    "original_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
    "question": "What are the first names and country codes for players who won both the Championships WTA and the Australian Open?",
    "original_SQL": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",
    "changes_information": {
      "original_value": "WTA Championships",
      "word_order_change": "Championships WTA"
    }
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "WTA Championships",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
    "question": "Find the name of the winner who has the highest rank points and participated in the Championships WTA tourney.",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "WTA Championships",
      "word_order_change": "Championships WTA"
    }
  },
  {
    "SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'WTA Championships' ORDER BY winner_rank_points DESC LIMIT 1",
    "tables": [
      "matches"
    ],
    "columns": [
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.winner_name"
    ],
    "values": [
      {
        "table": "matches",
        "column": "tourney_name",
        "value": "WTA Championships",
        "condition": "="
      }
    ],
    "db_id": "wta_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "matches.tourney_name.australian open"
    ],
    "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
    "question": "What is the name of the winner with the most rank points who participated in the Championships WTA tournament?",
    "original_SQL": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
    "changes_information": {
      "original_value": "WTA Championships",
      "word_order_change": "Championships WTA"
    }
  },
  {
    "SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "tables": [
      "museum"
    ],
    "columns": [
      "museum.num_of_staff",
      "museum.name",
      "museum.open_year"
    ],
    "values": [
      {
        "table": "museum",
        "column": "name",
        "value": "Plaza Museum",
        "condition": "="
      }
    ],
    "db_id": "museum_visit",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "museum.name.plaza museum"
    ],
    "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
    "question": "What are the opening year and staff number of the museum named Museum Plaza?",
    "original_SQL": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
    "changes_information": {
      "original_value": "Plaza Museum",
      "word_order_change": "Museum Plaza"
    }
  },
  {
    "SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Iskren Petsov'",
    "tables": [
      "participants",
      "performance_score"
    ],
    "columns": [
      "performance_score.stage_presence",
      "performance_score.voice_sound_quality",
      "performance_score.rhythm_tempo",
      "participants.id",
      "performance_score.participant_id",
      "participants.name"
    ],
    "values": [
      {
        "table": "participants",
        "column": "name",
        "value": "Iskren Petsov",
        "condition": "="
      }
    ],
    "db_id": "sing_contest",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "participants.name.iskren_petsov"
    ],
    "original_question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Petsov Iskren'?",
    "original_SQL": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
    "changes_information": {
      "original_value": "Iskren Petsov",
      "word_order_change": "Petsov Iskren"
    }
  },
  {
    "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Appindangoye'",
    "tables": [
      "player_attributes",
      "player"
    ],
    "columns": [
      "player.player_name",
      "player_attributes.player_api_id",
      "player_attributes.defensive_work_rate",
      "player.player_api_id"
    ],
    "values": [
      {
        "table": "player",
        "column": "player_name",
        "value": "Aaron Appindangoye",
        "condition": "="
      }
    ],
    "db_id": "european_football_2",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "player.player_name.david wilson"
    ],
    "original_question": "What is the defensive work rate of the football player David Wilson\n?",
    "question": "What is the defensive work rate of the football player Appindangoye Aaron\n?",
    "original_SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "changes_information": {
      "original_value": "Aaron Appindangoye",
      "word_order_change": "Appindangoye Aaron"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "tables": [
      "publisher",
      "superhero"
    ],
    "columns": [
      "superhero.weight_kg",
      "superhero.superhero_name",
      "publisher.publisher_name",
      "publisher.id",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "DC Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "values_list": [
      "publisher.publisher_name.dc comics"
    ],
    "original_question": "Identify the heaviest superhero in DC Comics.",
    "question": "Identify the heaviest superhero in Comics DC.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "changes_information": {
      "original_value": "DC Comics",
      "word_order_change": "Comics DC"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Dathomirian Zabrak'",
    "tables": [
      "race",
      "superhero"
    ],
    "columns": [
      "superhero.superhero_name",
      "race.race",
      "superhero.race_id",
      "race.id"
    ],
    "values": [
      {
        "table": "race",
        "column": "race",
        "value": "Dathomirian Zabrak",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "values_list": [
      "race.race.dathomirian_zabrak"
    ],
    "original_question": "Give the name of the alien superheroes.",
    "question": "Give the name of the Zabrak Dathomirian superheroes.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "changes_information": {
      "original_value": "Dathomirian Zabrak",
      "word_order_change": "Zabrak Dathomirian"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Toils of Night and Day'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Toils of Night & Day'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.toils_of_night_and_day"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Toils of Night & Day.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Toils of Night and Day'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Toils of Night & Day\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Toils of Night & Day\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.toils_of_night_and_day"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Toils of Night & Day' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Toils of Night and Day'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.toils_of_night_and_day"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Toils of Night & Day\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Toils of Night and Day' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Toils of Night & Day\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Toils of Night and Day' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Toils of Night and Day",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Toils of Night & Day\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Toils of Night and Day",
      "word_to_symbol_change": "Toils of Night & Day"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Sword of Truth and Justice'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Sword of Truth & Justice'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.sword_of_truth_and_justice"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Sword of Truth & Justice\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Sword of Truth & Justice\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Sword of Truth & Justice\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Sword of Truth & Justice.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    }
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Sword of Truth and Justice'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Sword of Truth & Justice\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Sword of Truth & Justice\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    }
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.sword_of_truth_and_justice"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Sword of Truth & Justice' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Truth and Justice'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Truth and Justice",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.sword_of_truth_and_justice"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Sword of Truth & Justice\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Sword of Truth and Justice",
      "word_to_symbol_change": "Sword of Truth & Justice"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Burn at the Stake'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Burn @ the Stake'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.burn_at_the_stake"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "cards",
      "foreign_data"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "foreign_data.uuid",
      "cards.type"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the type of card \"Benalish Knight\"?",
    "question": "What is the type of card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "cards.uuid",
      "legalities.format",
      "cards.name"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "values_list": [
      "cards.name.benalish knight"
    ],
    "original_question": "What is the rule of playing card \"Benalish Knight\"?",
    "question": "What is the rule of playing card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Burn @ the Stake.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Burn at the Stake'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Burn @ the Stake\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Burn @ the Stake\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.burn_at_the_stake"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Burn @ the Stake' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Burn at the Stake'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Burn at the Stake",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.burn_at_the_stake"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Burn @ the Stake\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Burn at the Stake",
      "word_to_symbol_change": "Burn @ the Stake"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Smart Ass'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Smart Ass",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Smart @ss'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Smart Ass",
      "word_to_symbol_change": "Smart @ss"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Smart Ass'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Smart Ass",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.smart_ass"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Smart @ss\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Smart Ass",
      "word_to_symbol_change": "Smart @ss"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Touch and Go'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Touch and Go",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Touch & Go'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Touch and Go",
      "word_to_symbol_change": "Touch & Go"
    }
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Touch and Go'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Touch and Go",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Touch & Go\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Touch and Go",
      "word_to_symbol_change": "Touch & Go"
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Touch and Go'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Touch and Go",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Touch & Go\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Touch and Go",
      "word_to_symbol_change": "Touch & Go"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Touch and Go'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Touch and Go",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.touch_and_go"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Touch & Go\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Touch and Go",
      "word_to_symbol_change": "Touch & Go"
    }
  },
  {
    "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Sword of Feast and Famine'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.keywords"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Angel of Mercy' is the name of card;",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "What is the keyword found on card 'Angel of Mercy'?",
    "question": "What is the keyword found on card 'Sword of Feast & Famine'?",
    "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT promoTypes FROM cards WHERE name = 'Sword of Feast and Famine' AND promoTypes IS NOT NULL",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.promotypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
    "values_list": [
      "cards.name.sword_of_feast_and_famine"
    ],
    "original_question": "What type of promotion is of card 'Duress'?",
    "question": "What type of promotion is of card 'Sword of Feast & Famine'?",
    "original_SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "values_list": [
      "cards.name.sword_of_feast_and_famine"
    ],
    "original_question": "What is the description about the ruling of card \"Condemn\"?",
    "question": "What is the description about the ruling of card \"Sword of Feast & Famine\"?",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "cards",
      "legalities"
    ],
    "columns": [
      "legalities.uuid",
      "legalities.status",
      "cards.name",
      "cards.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "values_list": [
      "cards.name.cloudchaser eagle"
    ],
    "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
    "question": "What is the status of card \"Sword of Feast & Famine\"?",
    "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.text",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Beacon of Immortality' is the name of card;",
    "values_list": [
      "cards.name.beacon of immortality"
    ],
    "original_question": "Write down the ruling of Beacon of Immortality.",
    "question": "Write down the ruling of Sword of Feast & Famine.",
    "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Sword of Feast and Famine'",
    "tables": [
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.subtypes",
      "cards.supertypes"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "values_list": [
      "cards.name.molimo, maro-sorcerer"
    ],
    "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "question": "What's the list of all types for the card \"Sword of Feast & Famine\"?",
    "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.mtgocode",
      "cards.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "values_list": [
      "cards.name.angel of mercy"
    ],
    "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "question": "Did the set of cards with \"Sword of Feast & Famine\" appear on Magic: The Gathering Online?",
    "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "rulings",
      "cards"
    ],
    "columns": [
      "cards.uuid",
      "cards.name",
      "rulings.date",
      "rulings.uuid"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "values_list": [
      "cards.name.sword_of_feast_and_famine"
    ],
    "original_question": "When was the ruling for the card 'Reminisce' created?",
    "question": "When was the ruling for the card 'Sword of Feast & Famine' created?",
    "original_SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Sword of Feast and Famine'",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.name",
      "cards.setcode",
      "sets.code",
      "sets.releasedate"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "values_list": [
      "cards.name.sword_of_feast_and_famine"
    ],
    "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
    "question": "What was the release date for the set which card \"Sword of Feast & Famine\" in it?",
    "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Sword of Feast and Famine' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "French",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "values_list": [
      "cards.name.tendo ice bridge",
      "set_translations.language.french"
    ],
    "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "question": "What's the French name of the set of cards with \"Sword of Feast & Famine\" is in?",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Sword of Feast and Famine' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "tables": [
      "set_translations",
      "cards"
    ],
    "columns": [
      "set_translations.language",
      "cards.name",
      "set_translations.setcode",
      "cards.setcode",
      "set_translations.translation"
    ],
    "values": [
      {
        "table": "cards",
        "column": "name",
        "value": "Sword of Feast and Famine",
        "condition": "="
      },
      {
        "table": "set_translations",
        "column": "language",
        "value": "Japanese",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "values_list": [
      "cards.name.fellwar stone",
      "set_translations.language.japanese"
    ],
    "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "question": "Tell the Japanese name of the set which card \"Sword of Feast & Famine\" is in it.",
    "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "changes_information": {
      "original_value": "Sword of Feast and Famine",
      "word_to_symbol_change": "Sword of Feast & Famine"
    }
  },
  {
    "SQL": "SELECT department FROM major WHERE college = 'College of Agriculture and Applied Sciences'",
    "tables": [
      "major"
    ],
    "columns": [
      "major.department",
      "major.college"
    ],
    "values": [
      {
        "table": "major",
        "column": "college",
        "value": "College of Agriculture and Applied Sciences",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "major.college.college of humanities and social sciences"
    ],
    "original_question": "List all of the College of Humanities and Social Sciences' departments.",
    "question": "List all of the College of Agriculture & Applied Sciences' departments.",
    "original_SQL": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "changes_information": {
      "original_value": "College of Agriculture and Applied Sciences",
      "word_to_symbol_change": "College of Agriculture & Applied Sciences"
    }
  },
  {
    "SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.phone",
      "major.college",
      "member.link_to_major",
      "major.major_id",
      "major.major_name"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Business",
        "condition": "="
      },
      {
        "table": "major",
        "column": "college",
        "value": "College of Agriculture and Applied Sciences",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
    "values_list": [
      "major.major_name.business",
      "major.college.college of agriculture and applied sciences"
    ],
    "original_question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
    "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture & Applied Sciences.",
    "original_SQL": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
    "changes_information": {
      "original_value": "College of Agriculture and Applied Sciences",
      "word_to_symbol_change": "College of Agriculture & Applied Sciences"
    }
  },
  {
    "SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Selecting trustworthy rows based on minima and maxima'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posthistory.text",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posts.viewcount",
      "posts.lasteditoruserid"
    ],
    "values": [
      {
        "table": "posthistory",
        "column": "text",
        "value": "Selecting trustworthy rows based on minima and maxima",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "values_list": [
      "posthistory.text.computer game datasets"
    ],
    "original_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "question": "Identify the total views on the post 'Selecting trustworthy rows based on minima & maxima'. Name the user who posted it last time.",
    "original_SQL": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "changes_information": {
      "original_value": "Selecting trustworthy rows based on minima and maxima",
      "word_to_symbol_change": "Selecting trustworthy rows based on minima & maxima"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "question": "Who is the owner of the post \"Predicting with both continuous & categorical features\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Predicting with both continuous & categorical features\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    }
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Predicting with both continuous & categorical features\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    }
  },
  {
    "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.lasteditoruserid",
      "posts.title",
      "posts.lasteditdate"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "values_list": [
      "posts.title.detecting a given face in a database of facial images"
    ],
    "original_question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "question": "Provide the last edit date and last edit user ID for the post \"Predicting with both continuous & categorical features\".",
    "original_SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    }
  },
  {
    "SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Predicting with both continuous and categorical features' ORDER BY T1.CreationDate DESC LIMIT 10",
    "tables": [
      "users",
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "comments.text",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "comments.postid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "values_list": [
      "posts.title.analysing wind data with r"
    ],
    "original_question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Predicting with both continuous & categorical features' and the display name of the user who left it.",
    "original_SQL": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 10",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    }
  },
  {
    "SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.commentcount",
      "posts.answercount"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "posts.title.clustering 1d data"
    ],
    "original_question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "question": "How many comments and answers were left by the users on the post with the title 'Predicting with both continuous & categorical features'?",
    "original_SQL": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    }
  },
  {
    "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Predicting with both continuous and categorical features'",
    "tables": [
      "posts",
      "comments"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "comments.postid",
      "comments.text"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Predicting with both continuous and categorical features",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "values_list": [
      "posts.title.group differences on a five point likert item"
    ],
    "original_question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "question": "What is the post ID and the comments commented in the post titled by \"Predicting with both continuous & categorical features\"?",
    "original_SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "changes_information": {
      "original_value": "Predicting with both continuous and categorical features",
      "word_to_symbol_change": "Predicting with both continuous & categorical features"
    }
  },
  {
    "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.lasteditoruserid",
      "posts.title",
      "users.displayname"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Probability of at least one unique outcome",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "values_list": [
      "posts.title.examples for teaching: correlation does not mean causation"
    ],
    "original_question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "question": "What is the display name of the user who last edited the post \"Probability of @ least one unique outcome\"?",
    "original_SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "changes_information": {
      "original_value": "Probability of at least one unique outcome",
      "word_to_symbol_change": "Probability of @ least one unique outcome"
    }
  },
  {
    "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Probability of at least one unique outcome'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "users.location",
      "posts.title",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "posts",
        "column": "title",
        "value": "Probability of at least one unique outcome",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "values_list": [
      "posts.title.eliciting priors from experts"
    ],
    "original_question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "question": "What is the location of the owner of the post \"Probability of @ least one unique outcome\"?",
    "original_SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "changes_information": {
      "original_value": "Probability of at least one unique outcome",
      "word_to_symbol_change": "Probability of @ least one unique outcome"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Champs and States' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.convertedmanacost",
      "cards.name",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Champs and States",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "values_list": [
      "sets.name.champs_and_states"
    ],
    "original_question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "question": "Please list the name of the cards in the set Champs & States with the highest converted mana cost.",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "changes_information": {
      "original_value": "Champs and States",
      "word_to_symbol_change": "Champs & States"
    }
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Champs and States' AND T1.artist = 'Chippy') OR (T2.name = 'Champs and States' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Champs and States' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "sets.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Champs and States",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Jeremy Jarvis",
        "condition": "="
      },
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      },
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Aaron Miller",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
    "values_list": [
      "sets.name.champs_and_states",
      "cards.artist.jeremy jarvis",
      "sets.name.coldsnap",
      "cards.artist.chippy",
      "sets.name.coldsnap",
      "cards.artist.aaron miller"
    ],
    "original_question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "question": "Which of these artists have designed a card in the set Champs & States, Jeremy Jarvis, Aaron Miller or Chippy?",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "changes_information": {
      "original_value": "Champs and States",
      "word_to_symbol_change": "Champs & States"
    }
  },
  {
    "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Champs and States' AND T1.number = 4",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "sets.code",
      "cards.name",
      "cards.number",
      "cards.setcode",
      "sets.name"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Champs and States",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "number",
        "value": "4",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
    "values_list": [
      "sets.name.champs_and_states",
      "cards.number.4"
    ],
    "original_question": "What is card number 4 in the set Coldsnap?",
    "question": "What is card number 4 in the set Champs & States?",
    "original_SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "changes_information": {
      "original_value": "Champs and States",
      "word_to_symbol_change": "Champs & States"
    }
  },
  {
    "SQL": "SELECT parentCode FROM sets WHERE name = 'Champs and States'",
    "tables": [
      "sets"
    ],
    "columns": [
      "sets.name",
      "sets.parentcode"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Champs and States",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "values_list": [
      "sets.name.commander 2014 oversized"
    ],
    "original_question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "question": "For the set \"Champs & States\" , give its parent code.",
    "original_SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "changes_information": {
      "original_value": "Champs and States",
      "word_to_symbol_change": "Champs & States"
    }
  },
  {
    "SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "tables": [
      "publisher",
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "superhero.id",
      "hero_power.power_id",
      "superpower.id",
      "publisher.publisher_name",
      "publisher.id",
      "hero_power.hero_id",
      "superpower.power_name",
      "superhero.publisher_id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      },
      {
        "table": "publisher",
        "column": "publisher_name",
        "value": "Marvel Comics",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "values_list": [
      "superpower.power_name.super strength",
      "publisher.publisher_name.marvel comics"
    ],
    "original_question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Toxin & Disease Control'.",
    "original_SQL": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "values_list": [
      "superpower.power_name.death touch"
    ],
    "original_question": "What are the names of the superheroes with the power of death touch?",
    "question": "What are the names of the superheroes with the power of Toxin & Disease Control?",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "values_list": [
      "superpower.power_name.toxin_and_disease_control"
    ],
    "original_question": "List the name of superheroes with flight power.",
    "question": "List the name of superheroes with Toxin & Disease Control power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    }
  },
  {
    "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Toxin and Disease Control'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.superhero_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "values_list": [
      "superpower.power_name.toxin_and_disease_control"
    ],
    "original_question": "Provide superheroes' names who have the adaptation power.",
    "question": "Provide superheroes' names who have the Toxin & Disease Control power.",
    "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    }
  },
  {
    "SQL": "SELECT id FROM superpower WHERE power_name = 'Toxin and Disease Control'",
    "tables": [
      "superpower"
    ],
    "columns": [
      "superpower.power_name",
      "superpower.id"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "values_list": [
      "superpower.power_name.toxin_and_disease_control"
    ],
    "original_question": "What is the power ID of cryokinesis?",
    "question": "What is the power ID of Toxin & Disease Control?",
    "original_SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    }
  },
  {
    "SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Toxin and Disease Control'",
    "tables": [
      "superhero",
      "gender",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "gender.gender",
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "gender.id",
      "superhero.gender_id",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superpower",
        "column": "power_name",
        "value": "Toxin and Disease Control",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "values_list": [
      "superpower.power_name.phoenix force"
    ],
    "original_question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "question": "Identify the gender of the superhero who has the ability of Toxin & Disease Control.",
    "original_SQL": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "changes_information": {
      "original_value": "Toxin and Disease Control",
      "word_to_symbol_change": "Toxin & Disease Control"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user blue & grey?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'blue and grey' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by blue & grey and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"blue & grey\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'blue & grey' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "users",
      "comments"
    ],
    "columns": [
      "comments.text",
      "users.id",
      "comments.userid",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
    "values_list": [
      "users.displayname.a lion"
    ],
    "original_question": "Write all comments made by user 'A Lion.'",
    "question": "Write all comments made by user 'blue & grey.'",
    "original_SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"blue & grey\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"blue & grey\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'blue and grey' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by blue & grey has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name blue & grey.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'blue & grey' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'blue and grey'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'blue & grey'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'blue and grey'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'blue & grey' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user Dazed & Confused?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by Dazed & Confused and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Dazed & Confused.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Dazed & Confused\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Dazed & Confused' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by Dazed & Confused.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Dazed & Confused\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Dazed & Confused\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Dazed and Confused' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by Dazed & Confused has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Dazed & Confused.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Dazed and Confused'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Dazed & Confused' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Dazed and Confused'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Dazed & Confused'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Dazed and Confused'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Dazed and Confused",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.dazed_and_confused"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Dazed & Confused' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Dazed and Confused",
      "word_to_symbol_change": "Dazed & Confused"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "Please list the titles of the posts owned by the user csgillespie?",
    "question": "Please list the titles of the posts owned by the user Ben & Smiley?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley' ORDER BY T1.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "question": "What is the title of the post that is owned by Ben & Smiley and has the highest popularity?",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "Please list the names of the badges obtained by csgillespie.",
    "question": "Please list the names of the badges obtained by Ben & Smiley.",
    "original_SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"Ben & Smiley\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'Ben & Smiley' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "users.id",
      "posts.title",
      "users.displayname",
      "posts.owneruserid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "values_list": [
      "users.displayname.vebjorn ljosa"
    ],
    "original_question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "question": "List the title of posts which were edited by Ben & Smiley.",
    "original_SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "question": "What is the name of badge that the user whose display name is \"Ben & Smiley\" obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "question": "State the name of badge that the user whose display name is \"Ben & Smiley\" obtained.",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley'",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.tags",
      "posts.id",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'John Salvatier';",
    "values_list": [
      "users.displayname.john salvatier"
    ],
    "original_question": "What is the name of tags used by John Salvatier's?",
    "question": "What is the name of tags used by Ben & Smiley's?",
    "original_SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.answercount",
      "posthistory.postid",
      "users.id",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "Which post by slashnick has the most answers count? State the post ID.",
    "question": "Which post by Ben & Smiley has the most answers count? State the post ID.",
    "original_SQL": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Ben Smiley' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "tables": [
      "users",
      "posts",
      "posthistory"
    ],
    "columns": [
      "posts.id",
      "posts.viewcount",
      "users.id",
      "posthistory.postid",
      "users.displayname",
      "posthistory.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      },
      {
        "table": "users",
        "column": "displayname",
        "value": "Noah Snyder",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "values_list": [
      "users.displayname.harvey motulsky",
      "users.displayname.noah snyder"
    ],
    "original_question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "question": "Among posts by Ben & Smiley and Noah Snyder, which one has higher popularity?",
    "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Ben Smiley' ORDER BY T2.ViewCount DESC LIMIT 1",
    "tables": [
      "users",
      "posts"
    ],
    "columns": [
      "posts.id",
      "posts.title",
      "posts.owneruserid",
      "users.id",
      "users.displayname",
      "posts.viewcount"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "values_list": [
      "users.displayname.harvey motulsky"
    ],
    "original_question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "question": "Which post by Ben & Smiley has the most views? Please give the id and title of this post.",
    "original_SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley' ORDER BY T1.Date DESC LIMIT 1",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "badges.name",
      "users.id",
      "users.displayname",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "question": "Identify the latest badge awarded to the user with the display name Ben & Smiley.",
    "original_SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Ben Smiley'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'Ben & Smiley' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Ben Smiley'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.reputation",
      "users.views",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "",
    "values_list": [
      "users.displayname.jarrod dixon"
    ],
    "original_question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Ben & Smiley'?",
    "original_SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'Ben Smiley'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "Ben Smiley",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.ben_smiley"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'Ben & Smiley' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "Ben Smiley",
      "word_to_symbol_change": "Ben & Smiley"
    }
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'University of Texas at Austin'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "University of Texas at Austin",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in University of Texas @ Austin obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "University of Texas at Austin",
      "word_to_symbol_change": "University of Texas @ Austin"
    }
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'University of Texas at Austin'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "University of Texas at Austin",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in University of Texas @ Austin obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "University of Texas at Austin",
      "word_to_symbol_change": "University of Texas @ Austin"
    }
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Bizarre and beautiful world",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in Bizarre & beautiful world obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "Bizarre and beautiful world",
      "word_to_symbol_change": "Bizarre & beautiful world"
    }
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Bizarre and beautiful world",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in Bizarre & beautiful world obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "Bizarre and beautiful world",
      "word_to_symbol_change": "Bizarre & beautiful world"
    }
  }
]