[
    {
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "tables": [
            "addresses"
        ],
        "columns": [
            "addresses.zip_postcode",
            "addresses.city"
        ],
        "values": [
            {
                "table": "addresses",
                "column": "city",
                "value": "Port Chelsea",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "addresses.city.port chelsea"
        ],
        "original_question": "What is the zip code of the address in the city Port Chelsea?",
        "question": "What is the zip code of the address in the city The Port Chelsea?",
        "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "changes_information": {
            "original_value": "Port Chelsea",
            "word_addition": "The Port Chelsea"
        }
    },
    {
        "SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "tables": [
            "addresses"
        ],
        "columns": [
            "addresses.zip_postcode",
            "addresses.city"
        ],
        "values": [
            {
                "table": "addresses",
                "column": "city",
                "value": "Port Chelsea",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "addresses.city.port chelsea"
        ],
        "original_question": "What is the zip code for Port Chelsea?",
        "question": "What is the zip code for The Port Chelsea?",
        "original_SQL": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "changes_information": {
            "original_value": "Port Chelsea",
            "word_addition": "The Port Chelsea"
        }
    },
    {
        "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "tables": [
            "superhero",
            "alignment"
        ],
        "columns": [
            "superhero.superhero_name",
            "alignment.alignment",
            "superhero.alignment_id",
            "alignment.id"
        ],
        "values": [
            {
                "table": "alignment",
                "column": "alignment",
                "value": "Neutral",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
        "values_list": [
            "alignment.alignment.neutral"
        ],
        "original_question": "Describe the names of neutral alignment superheroes.",
        "question": "Describe the names of Generally Neutral alignment superheroes.",
        "original_SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
        "changes_information": {
            "original_value": "Neutral",
            "word_addition": "Generally Neutral"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Nice Answer' LIMIT 10",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Nice Answer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "values_list": [
            "badges.name.nice_answer"
        ],
        "original_question": "Name 10 users with the badge name 'Necromancer.'",
        "question": "Name 10 users with the badge name 'A Nice Answer.'",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "changes_information": {
            "original_value": "Nice Answer",
            "word_addition": "A Nice Answer"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Nice Answer'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.id",
            "badges.userid",
            "users.displayname",
            "badges.name"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Nice Answer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
        "values_list": [
            "badges.name.nice_answer"
        ],
        "original_question": "List all the name of users that obtained the Organizer Badges.",
        "question": "List all the name of users that obtained the A Nice Answer Badges.",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
        "changes_information": {
            "original_value": "Nice Answer",
            "word_addition": "A Nice Answer"
        }
    },
    {
        "SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Nice Answer'",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "users.location",
            "badges.userid",
            "badges.name",
            "users.id",
            "users.lastaccessdate"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Nice Answer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Outliers is the name of the badge;",
        "values_list": [
            "badges.name.nice_answer"
        ],
        "original_question": "Describe the last accessed date and location of the users who received the outliers badge.",
        "question": "Describe the last accessed date and location of the users who received the A Nice Answer badge.",
        "original_SQL": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
        "changes_information": {
            "original_value": "Nice Answer",
            "word_addition": "A Nice Answer"
        }
    },
    {
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Nice Answer' ORDER BY T2.Date LIMIT 1",
        "tables": [
            "badges",
            "users"
        ],
        "columns": [
            "badges.userid",
            "badges.name",
            "users.id",
            "users.displayname",
            "badges.date"
        ],
        "values": [
            {
                "table": "badges",
                "column": "name",
                "value": "Nice Answer",
                "condition": "="
            }
        ],
        "db_id": "codebase_community",
        "source": "bird_dev",
        "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
        "values_list": [
            "badges.name.nice_answer"
        ],
        "original_question": "What is the display name of the user who acquired the first Autobiographer badge?",
        "question": "What is the display name of the user who acquired the first A Nice Answer badge?",
        "original_SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
        "changes_information": {
            "original_value": "Nice Answer",
            "word_addition": "A Nice Answer"
        }
    },
    {
        "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Mars'",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.sid",
            "sailors.name",
            "boats.bid",
            "reserves.bid",
            "boats.name",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "name",
                "value": "Mars",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.name.mars"
        ],
        "original_question": "Find the names of sailors who reserved boat with the name Melon.",
        "question": "Find the names of sailors who reserved boat with the name The Mars.",
        "original_SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "changes_information": {
            "original_value": "Mars",
            "word_addition": "The Mars"
        }
    },
    {
        "SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Mars'",
        "tables": [
            "boats",
            "sailors",
            "reserves"
        ],
        "columns": [
            "sailors.sid",
            "sailors.name",
            "boats.bid",
            "reserves.bid",
            "boats.name",
            "reserves.sid"
        ],
        "values": [
            {
                "table": "boats",
                "column": "name",
                "value": "Mars",
                "condition": "="
            }
        ],
        "db_id": "boat_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "boats.name.mars"
        ],
        "original_question": "What are the names of sailors who reserved a boat with the name Melon?",
        "question": "What are the names of sailors who reserved a boat with the name The Mars?",
        "original_SQL": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
        "changes_information": {
            "original_value": "Mars",
            "word_addition": "The Mars"
        }
    },
    {
        "SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "tables": [
            "author",
            "book"
        ],
        "columns": [
            "book.book_series",
            "author.author_id",
            "author.name",
            "book.author_id"
        ],
        "values": [
            {
                "table": "book",
                "column": "book_series",
                "value": "LT",
                "condition": "="
            },
            {
                "table": "book",
                "column": "book_series",
                "value": "LT",
                "condition": "="
            }
        ],
        "db_id": "book_press",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "book.book_series.lt",
            "book.book_series.lt"
        ],
        "original_question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
        "question": "Find the name of authors who publish their books in both \"The LT\" and \"LT\" series.",
        "original_SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "changes_information": {
            "original_value": "LT",
            "word_addition": "The LT"
        }
    },
    {
        "SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "tables": [
            "author",
            "book"
        ],
        "columns": [
            "book.book_series",
            "author.author_id",
            "author.name",
            "book.author_id"
        ],
        "values": [
            {
                "table": "book",
                "column": "book_series",
                "value": "LT",
                "condition": "="
            },
            {
                "table": "book",
                "column": "book_series",
                "value": "LT",
                "condition": "="
            }
        ],
        "db_id": "book_press",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "book.book_series.lt",
            "book.book_series.lt"
        ],
        "original_question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
        "question": "Which authors publish books in both \"The LT\" and \"LT\" series? Give me the author names.",
        "original_SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
        "changes_information": {
            "original_value": "LT",
            "word_addition": "The LT"
        }
    },
    {
        "SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
        "tables": [
            "disp",
            "card"
        ],
        "columns": [
            "card.type",
            "card.disp_id",
            "disp.account_id",
            "disp.disp_id"
        ],
        "values": [
            {
                "table": "card",
                "column": "type",
                "value": "gold",
                "condition": "="
            }
        ],
        "db_id": "financial",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "card.type.gold"
        ],
        "original_question": "What are the accounts that have gold credit cards?",
        "question": "What are the accounts that have Gold Card credit cards?",
        "original_SQL": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
        "changes_information": {
            "original_value": "gold",
            "word_addition": "Gold Card"
        }
    },
    {
        "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Pete Venters'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Pete Venters",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Aaron Boyd' is artist;",
        "values_list": [
            "cards.artist.aaron boyd"
        ],
        "original_question": "Name the cards that were illustrated by Aaron Boyd.",
        "question": "Name the cards that were illustrated by Mr. Pete Venters.",
        "original_SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
        "changes_information": {
            "original_value": "Pete Venters",
            "word_addition": "Mr. Pete Venters"
        }
    },
    {
        "SQL": "SELECT manaCost FROM cards WHERE artist = 'Pete Venters'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.manacost"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Pete Venters",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
        "values_list": [
            "cards.artist.rob alexander"
        ],
        "original_question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
        "question": "What is the  unconverted mana do all the cards created by Mr. Pete Venters cost in total?",
        "original_SQL": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
        "changes_information": {
            "original_value": "Pete Venters",
            "word_addition": "Mr. Pete Venters"
        }
    },
    {
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Pete Venters' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.format",
            "cards.id",
            "legalities.uuid",
            "cards.uuid",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Pete Venters",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "pauper",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'",
        "values_list": [
            "cards.availability.paper",
            "cards.artist.erica yang",
            "legalities.format.pauper"
        ],
        "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
        "question": "Is there any card from Mr. Pete Venters artist in pauper format and available in paper? If so, indicate its ID.",
        "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "changes_information": {
            "original_value": "Pete Venters",
            "word_addition": "Mr. Pete Venters"
        }
    },
    {
        "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Pete Venters'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.artist",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Pete Venters",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
        "values_list": [
            "cards.artist.daren bader"
        ],
        "original_question": "What kind of printing is on the card that Daren Bader created?",
        "question": "What kind of printing is on the card that Mr. Pete Venters created?",
        "original_SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
        "changes_information": {
            "original_value": "Pete Venters",
            "word_addition": "Mr. Pete Venters"
        }
    },
    {
        "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Pete Venters' ORDER BY T2.date DESC",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.artist",
            "rulings.date",
            "rulings.text",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "artist",
                "value": "Pete Venters",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
        "values_list": [
            "cards.artist.kev walker"
        ],
        "original_question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
        "question": "What are the rulings for the card named and designed by Mr. Pete Venters? List them in descending order of dates.",
        "original_SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
        "changes_information": {
            "original_value": "Pete Venters",
            "word_addition": "Mr. Pete Venters"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Pete Venters'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.status",
            "cards.name",
            "cards.frameversion",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Pete Venters",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
        "values_list": [
            "legalities.status.banned",
            "cards.artist.allen williams"
        ],
        "original_question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
        "question": "List all the frame styles and cards Mr. Pete Venters worked on and find any banned cards if there are any.",
        "original_SQL": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
        "changes_information": {
            "original_value": "Pete Venters",
            "word_addition": "Mr. Pete Venters"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.availability",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "arena",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
        "values_list": [
            "cards.availability.arena"
        ],
        "original_question": "Lists all types of cards available in arena.",
        "question": "Lists all types of cards available in The arena.",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
        "changes_information": {
            "original_value": "arena",
            "word_addition": "The arena"
        }
    },
    {
        "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.bordercolor",
            "cards.artist",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "arena",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "bordercolor",
                "value": "black",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "values_list": [
            "cards.availability.arena",
            "cards.bordercolor.black"
        ],
        "original_question": "List the artists who illustrated cards with black borders which are available only in arena.",
        "question": "List the artists who illustrated cards with black borders which are available only in The arena.",
        "original_SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "changes_information": {
            "original_value": "arena",
            "word_addition": "The arena"
        }
    },
    {
        "SQL": "SELECT layout FROM cards WHERE keywords = 'First strike'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.keywords",
            "cards.layout"
        ],
        "values": [
            {
                "table": "cards",
                "column": "keywords",
                "value": "First strike",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "",
        "values_list": [
            "cards.keywords.first_strike"
        ],
        "original_question": "What are the card layout of cards with keyword of flying?",
        "question": "What are the card layout of cards with keyword of The First strike?",
        "original_SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "changes_information": {
            "original_value": "First strike",
            "word_addition": "The First strike"
        }
    },
    {
        "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Fear'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.keywords"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fear",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Angel of Mercy' is the name of card;",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "What is the keyword found on card 'Angel of Mercy'?",
        "question": "What is the keyword found on card 'The Fear'?",
        "original_SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Fear",
            "word_addition": "The Fear"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Fear'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "legalities.status",
            "cards.name",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fear",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Cloudchaser Eagle is the name of card;",
        "values_list": [
            "cards.name.cloudchaser eagle"
        ],
        "original_question": "What is the status of card \"Cloudchaser Eagle\"?",
        "question": "What is the status of card \"The Fear\"?",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "changes_information": {
            "original_value": "Fear",
            "word_addition": "The Fear"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Fear'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.uuid",
            "cards.name",
            "foreign_data.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fear",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the type of card \"Benalish Knight\"?",
        "question": "What is the type of card \"The Fear\"?",
        "original_SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Fear",
            "word_addition": "The Fear"
        }
    },
    {
        "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Fear'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.uuid",
            "cards.uuid",
            "legalities.format",
            "cards.name"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fear",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
        "values_list": [
            "cards.name.benalish knight"
        ],
        "original_question": "What is the rule of playing card \"Benalish Knight\"?",
        "question": "What is the rule of playing card \"The Fear\"?",
        "original_SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
        "changes_information": {
            "original_value": "Fear",
            "word_addition": "The Fear"
        }
    },
    {
        "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Fear'",
        "tables": [
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.subtypes",
            "cards.supertypes"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fear",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
        "values_list": [
            "cards.name.molimo, maro-sorcerer"
        ],
        "original_question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
        "question": "What's the list of all types for the card \"The Fear\"?",
        "original_SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
        "changes_information": {
            "original_value": "Fear",
            "word_addition": "The Fear"
        }
    },
    {
        "SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Fear'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "sets.mtgocode",
            "cards.name",
            "cards.setcode",
            "sets.code"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fear",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
        "values_list": [
            "cards.name.angel of mercy"
        ],
        "original_question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
        "question": "Did the set of cards with \"The Fear\" appear on Magic: The Gathering Online?",
        "original_SQL": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
        "changes_information": {
            "original_value": "Fear",
            "word_addition": "The Fear"
        }
    },
    {
        "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Fear'",
        "tables": [
            "sets",
            "cards"
        ],
        "columns": [
            "cards.name",
            "cards.setcode",
            "sets.code",
            "sets.releasedate"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fear",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
        "values_list": [
            "cards.name.fear"
        ],
        "original_question": "What was the release date for the set which card \"Evacuation\" in it?",
        "question": "What was the release date for the set which card \"The Fear\" in it?",
        "original_SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
        "changes_information": {
            "original_value": "Fear",
            "word_addition": "The Fear"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fear' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fear",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "French",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
        "values_list": [
            "cards.name.tendo ice bridge",
            "set_translations.language.french"
        ],
        "original_question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
        "question": "What's the French name of the set of cards with \"The Fear\" is in?",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Fear",
            "word_addition": "The Fear"
        }
    },
    {
        "SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fear' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "tables": [
            "set_translations",
            "cards"
        ],
        "columns": [
            "set_translations.language",
            "cards.name",
            "set_translations.setcode",
            "cards.setcode",
            "set_translations.translation"
        ],
        "values": [
            {
                "table": "cards",
                "column": "name",
                "value": "Fear",
                "condition": "="
            },
            {
                "table": "set_translations",
                "column": "language",
                "value": "Japanese",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
        "values_list": [
            "cards.name.fellwar stone",
            "set_translations.language.japanese"
        ],
        "original_question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
        "question": "Tell the Japanese name of the set which card \"The Fear\" is in it.",
        "original_SQL": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
        "changes_information": {
            "original_value": "Fear",
            "word_addition": "The Fear"
        }
    },
    {
        "SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery'",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.originaltype",
            "cards.id",
            "rulings.date",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Sorcery",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Creature - Elf is the originalType;",
        "values_list": [
            "cards.originaltype.creature - elf"
        ],
        "original_question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "question": "List down the name of cards with original types of The Sorcery and the date of rulings for these cards.",
        "original_SQL": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "changes_information": {
            "original_value": "Sorcery",
            "word_addition": "The Sorcery"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Sorcery' AND T1.colors = 'B'",
        "tables": [
            "cards",
            "foreign_data"
        ],
        "columns": [
            "cards.originaltype",
            "cards.name",
            "cards.colors",
            "foreign_data.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "originaltype",
                "value": "Sorcery",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "colors",
                "value": "B",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
        "values_list": [
            "cards.originaltype.sorcery",
            "cards.colors.b"
        ],
        "original_question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
        "question": "Among the The Sorcery cards, which are black color and comes with foreign languague translation?",
        "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
        "changes_information": {
            "original_value": "Sorcery",
            "word_addition": "The Sorcery"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "tables": [
            "rulings",
            "cards"
        ],
        "columns": [
            "cards.rarity",
            "rulings.date",
            "cards.name",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "rarity",
                "value": "uncommon",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "uncommon refers to rarity = 'uncommon';",
        "values_list": [
            "cards.rarity.uncommon"
        ],
        "original_question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
        "question": "Pick 3 cards with rarity of quite uncommon, list down name these cards according to ascending order of it's ruling date.",
        "original_SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "changes_information": {
            "original_value": "uncommon",
            "word_addition": "quite uncommon"
        }
    },
    {
        "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.rarity",
            "legalities.format",
            "legalities.status",
            "cards.originalreleasedate",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Legal",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "rarity",
                "value": "uncommon",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "values_list": [
            "legalities.status.legal",
            "cards.rarity.uncommon"
        ],
        "original_question": "When was the oldest mythic card released and what are its legal play formats?",
        "question": "When was the oldest quite uncommon card released and what are its legal play formats?",
        "original_SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "changes_information": {
            "original_value": "uncommon",
            "word_addition": "quite uncommon"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Legendary Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.side",
            "legalities.format",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "type",
                "value": "Legendary Artifact",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "vintage",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "values_list": [
            "cards.type.legendary_artifact",
            "legalities.format.vintage"
        ],
        "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "question": "For The Legendary Artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "changes_information": {
            "original_value": "Legendary Artifact",
            "word_addition": "The Legendary Artifact"
        }
    },
    {
        "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.channel",
            "tv_channel.country",
            "tv_channel.id",
            "tv_channel.series_name",
            "cartoon.directed_by"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Michael Chang",
                "condition": "="
            },
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.directed_by.michael chang",
            "cartoon.directed_by.ben jones"
        ],
        "original_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Mr. Michael Chang?",
        "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "changes_information": {
            "original_value": "Michael Chang",
            "word_addition": "Mr. Michael Chang"
        }
    },
    {
        "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.channel",
            "tv_channel.country",
            "tv_channel.id",
            "tv_channel.series_name",
            "cartoon.directed_by"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Michael Chang",
                "condition": "="
            },
            {
                "table": "cartoon",
                "column": "directed_by",
                "value": "Ben Jones",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.directed_by.michael chang",
            "cartoon.directed_by.ben jones"
        ],
        "original_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Mr. Michael Chang?",
        "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "changes_information": {
            "original_value": "Michael Chang",
            "word_addition": "Mr. Michael Chang"
        }
    },
    {
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.written_by",
            "tv_channel.country",
            "cartoon.channel",
            "tv_channel.id"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "written_by",
                "value": "Todd Casey",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.written_by.todd casey"
        ],
        "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "question": "which countries' tv channels are playing some cartoon written by Mr. Todd Casey?",
        "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "changes_information": {
            "original_value": "Todd Casey",
            "word_addition": "Mr. Todd Casey"
        }
    },
    {
        "SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "tables": [
            "tv_channel",
            "cartoon"
        ],
        "columns": [
            "cartoon.written_by",
            "tv_channel.country",
            "cartoon.channel",
            "tv_channel.id"
        ],
        "values": [
            {
                "table": "cartoon",
                "column": "written_by",
                "value": "Todd Casey",
                "condition": "="
            }
        ],
        "db_id": "tvshow",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "cartoon.written_by.todd casey"
        ],
        "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "question": "What are the countries that have cartoons on TV that were written by Mr. Todd Casey?",
        "original_SQL": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "changes_information": {
            "original_value": "Todd Casey",
            "word_addition": "Mr. Todd Casey"
        }
    },
    {
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Dijon'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.location"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "location",
                "value": "Dijon",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Shanghai is a name of location;",
        "values_list": [
            "circuits.location.dijon"
        ],
        "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
        "question": "Please list the year during which the race is held on circuits in Dijon, France.",
        "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
        "changes_information": {
            "original_value": "Dijon",
            "word_addition": "Dijon, France"
        }
    },
    {
        "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Dallas'",
        "tables": [
            "circuits",
            "races"
        ],
        "columns": [
            "circuits.circuitid",
            "races.year",
            "races.circuitid",
            "circuits.location"
        ],
        "values": [
            {
                "table": "circuits",
                "column": "location",
                "value": "Dallas",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Shanghai is a name of location;",
        "values_list": [
            "circuits.location.dallas"
        ],
        "original_question": "Please list the year during which the race is held on circuits in Shanghai.",
        "question": "Please list the year during which the race is held on circuits in City of Dallas.",
        "original_SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
        "changes_information": {
            "original_value": "Dallas",
            "word_addition": "City of Dallas"
        }
    },
    {
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Kirsten'",
        "tables": [
            "agencies",
            "clients"
        ],
        "columns": [
            "clients.agency_id",
            "agencies.agency_id",
            "clients.client_details",
            "agencies.agency_details"
        ],
        "values": [
            {
                "table": "clients",
                "column": "client_details",
                "value": "Kirsten",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "clients.client_details.kirsten"
        ],
        "original_question": "Show agency details for client with detail 'Mac'.",
        "question": "Show agency details for client with detail 'Ms. Kirsten'.",
        "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "changes_information": {
            "original_value": "Kirsten",
            "word_addition": "Ms. Kirsten"
        }
    },
    {
        "SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Kirsten'",
        "tables": [
            "agencies",
            "clients"
        ],
        "columns": [
            "clients.agency_id",
            "agencies.agency_id",
            "clients.client_details",
            "agencies.agency_details"
        ],
        "values": [
            {
                "table": "clients",
                "column": "client_details",
                "value": "Kirsten",
                "condition": "="
            }
        ],
        "db_id": "advertising_agencies",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "clients.client_details.kirsten"
        ],
        "original_question": "What are the agency details for clients with the detail Mac?",
        "question": "What are the agency details for clients with the detail Ms. Kirsten?",
        "original_SQL": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
        "changes_information": {
            "original_value": "Kirsten",
            "word_addition": "Ms. Kirsten"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Aston Martin'",
        "tables": [
            "constructors",
            "constructorstandings"
        ],
        "columns": [
            "constructorstandings.constructorid",
            "constructors.name",
            "constructorstandings.position",
            "constructors.constructorid"
        ],
        "values": [
            {
                "table": "constructors",
                "column": "name",
                "value": "Aston Martin",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Renault is a name of constructor;",
        "values_list": [
            "constructors.name.aston_martin"
        ],
        "original_question": "Please list the positions of the circuits built by the constructor Renault.",
        "question": "Please list the positions of the circuits built by the constructor The Aston Martin.",
        "original_SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
        "changes_information": {
            "original_value": "Aston Martin",
            "word_addition": "The Aston Martin"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Oceania' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "tables": [
            "city",
            "countrylanguage",
            "country"
        ],
        "columns": [
            "countrylanguage.isofficial",
            "countrylanguage.countrycode",
            "city.countrycode",
            "country.continent",
            "country.name",
            "country.code",
            "countrylanguage.language",
            "city.name"
        ],
        "values": [
            {
                "table": "country",
                "column": "continent",
                "value": "Oceania",
                "condition": "="
            },
            {
                "table": "countrylanguage",
                "column": "isofficial",
                "value": "T",
                "condition": "="
            },
            {
                "table": "countrylanguage",
                "column": "language",
                "value": "English",
                "condition": "="
            }
        ],
        "db_id": "world_1",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "country.continent.oceania",
            "countrylanguage.isofficial.t",
            "countrylanguage.language.english"
        ],
        "original_question": "What are the names of cities in Europe for which English is not the official language?",
        "question": "What are the names of cities in The Oceania for which English is not the official language?",
        "original_SQL": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "changes_information": {
            "original_value": "Oceania",
            "word_addition": "The Oceania"
        }
    },
    {
        "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "tables": [
            "courses"
        ],
        "columns": [
            "courses.course_description",
            "courses.course_name"
        ],
        "values": [
            {
                "table": "courses",
                "column": "course_name",
                "value": "math",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "courses.course_name.math"
        ],
        "original_question": "How is the math course described?",
        "question": "How is the Math Course course described?",
        "original_SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "changes_information": {
            "original_value": "math",
            "word_addition": "Math Course"
        }
    },
    {
        "SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "tables": [
            "courses"
        ],
        "columns": [
            "courses.course_description",
            "courses.course_name"
        ],
        "values": [
            {
                "table": "courses",
                "column": "course_name",
                "value": "math",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "courses.course_name.math"
        ],
        "original_question": "What are the descriptions for all the math courses?",
        "question": "What are the descriptions for all the Math Course courses?",
        "original_SQL": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "changes_information": {
            "original_value": "math",
            "word_addition": "Math Course"
        }
    },
    {
        "SQL": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins'",
        "tables": [
            "cyclists_own_bikes",
            "cyclist",
            "bike"
        ],
        "columns": [
            "bike.id",
            "cyclist.name",
            "bike.product_name",
            "cyclists_own_bikes.bike_id",
            "bike.price",
            "cyclist.id",
            "cyclists_own_bikes.cyclist_id"
        ],
        "values": [
            {
                "table": "cyclist",
                "column": "name",
                "value": "Bradley Wiggins",
                "condition": "="
            },
            {
                "table": "cyclist",
                "column": "name",
                "value": "Bradley Wiggins",
                "condition": "="
            }
        ],
        "db_id": "bike_racing",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "cyclist.name.bradley wiggins",
            "cyclist.name.antonio tauler"
        ],
        "original_question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
        "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Sir Bradley Wiggins'.",
        "original_SQL": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
        "changes_information": {
            "original_value": "Bradley Wiggins",
            "word_addition": "Sir Bradley Wiggins"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "tables": [
            "students",
            "degree_programs",
            "student_enrolment"
        ],
        "columns": [
            "students.middle_name",
            "students.last_name",
            "students.student_id",
            "students.first_name",
            "student_enrolment.degree_program_id",
            "student_enrolment.student_id",
            "degree_programs.degree_summary_name",
            "degree_programs.degree_program_id"
        ],
        "values": [
            {
                "table": "degree_programs",
                "column": "degree_summary_name",
                "value": "Bachelor",
                "condition": "="
            }
        ],
        "db_id": "student_transcripts_tracking",
        "source": "spider_dev",
        "evidence": "",
        "values_list": [
            "degree_programs.degree_summary_name.bachelor"
        ],
        "original_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "question": "Who is enrolled in a Bachelor level degree program? List the first name, middle name, last name.",
        "original_SQL": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "changes_information": {
            "original_value": "Bachelor",
            "word_addition": "Bachelor level"
        }
    },
    {
        "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.parent_document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "What is the parent document of document owned by Marlin? List the document id.",
        "question": "What is the parent document of document owned by Mr. Marlin? List the document id.",
        "original_SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.parent_document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "What are the document object ids of the objects owned by Marlin?",
        "question": "What are the document object ids of the objects owned by Mr. Marlin?",
        "original_SQL": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.parent_document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "What is the owner of the parent document of document owned by 'Marlin'?",
        "question": "What is the owner of the parent document of document owned by 'Mr. Marlin'?",
        "original_SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "tables": [
            "document_objects"
        ],
        "columns": [
            "document_objects.parent_document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
        "question": "Who is the owner of the parent document of every documents where 'Mr. Marlin' is the owner?",
        "original_SQL": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Marlin'",
        "tables": [
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "List all document which is related to document owned by Ransom . List the document id .",
        "question": "List all document which is related to document owned by Mr. Marlin . List the document id .",
        "original_SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'Marlin'",
        "tables": [
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "What are the document object ids of the related to the document owned by Ransom ?",
        "question": "What are the document object ids of the related to the document owned by Mr. Marlin ?",
        "original_SQL": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Marlin';",
        "tables": [
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.related_document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "List all owner of documents that is related to documents owned by Braeden.",
        "question": "List all owner of documents that is related to documents owned by Mr. Marlin.",
        "original_SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Marlin';",
        "tables": [
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.related_document_object_id",
            "document_objects.document_object_id",
            "document_objects.owner"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "What are the different owners of documents that are related to ones owned by Braeden?",
        "question": "What are the different owners of documents that are related to ones owned by Mr. Marlin?",
        "original_SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Marlin'",
        "tables": [
            "document_subsets",
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.document_object_id",
            "document_objects.owner",
            "document_subset_members.document_subset_id",
            "document_subsets.document_subset_name",
            "document_objects.document_object_id",
            "document_subsets.document_subset_id"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
        "question": "Which unique subset does document owned by Mr. Marlin belong to? List the subset name.",
        "original_SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Marlin'",
        "tables": [
            "document_subsets",
            "document_objects",
            "document_subset_members"
        ],
        "columns": [
            "document_subset_members.document_object_id",
            "document_objects.owner",
            "document_subset_members.document_subset_id",
            "document_subsets.document_subset_name",
            "document_objects.document_object_id",
            "document_subsets.document_subset_id"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "What are the different subset names of all documents owned by Braeden?",
        "question": "What are the different subset names of all documents owned by Mr. Marlin?",
        "original_SQL": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'Marlin'",
        "tables": [
            "collections",
            "document_objects",
            "documents_in_collections"
        ],
        "columns": [
            "collections.collection_id",
            "document_objects.owner",
            "documents_in_collections.document_object_id",
            "collections.collection_name",
            "document_objects.document_object_id",
            "documents_in_collections.collection_id"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "List the Collection Name that document owned by 'Ransom ' belong to .",
        "question": "List the Collection Name that document owned by 'Mr. Marlin ' belong to .",
        "original_SQL": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Marlin'",
        "tables": [
            "collections",
            "document_objects",
            "documents_in_collections"
        ],
        "columns": [
            "collections.collection_id",
            "document_objects.owner",
            "documents_in_collections.document_object_id",
            "collections.collection_name",
            "document_objects.document_object_id",
            "documents_in_collections.collection_id"
        ],
        "values": [
            {
                "table": "document_objects",
                "column": "owner",
                "value": "Marlin",
                "condition": "="
            }
        ],
        "db_id": "cre_Doc_and_collections",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "document_objects.owner.marlin"
        ],
        "original_question": "What is the collection name of a document owned by 'Ransom'?",
        "question": "What is the collection name of a document owned by 'Mr. Marlin'?",
        "original_SQL": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
        "changes_information": {
            "original_value": "Marlin",
            "word_addition": "Mr. Marlin"
        }
    },
    {
        "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "tables": [
            "driver"
        ],
        "columns": [
            "driver.citizenship",
            "driver.name"
        ],
        "values": [
            {
                "table": "driver",
                "column": "citizenship",
                "value": "United States",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "driver.citizenship.united states"
        ],
        "original_question": "What are the names of the drivers who are citizens of the 'United States'?",
        "question": "What are the names of the drivers who are citizens of the 'United States of America'?",
        "original_SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "changes_information": {
            "original_value": "United States",
            "word_addition": "United States of America"
        }
    },
    {
        "SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "tables": [
            "driver"
        ],
        "columns": [
            "driver.citizenship",
            "driver.name"
        ],
        "values": [
            {
                "table": "driver",
                "column": "citizenship",
                "value": "United States",
                "condition": "="
            }
        ],
        "db_id": "vehicle_driver",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "driver.citizenship.united states"
        ],
        "original_question": "Return the names of drivers with citizenship from the United States.",
        "question": "Return the names of drivers with citizenship from the United States of America.",
        "original_SQL": "SELECT name FROM driver WHERE citizenship  =  'United States'",
        "changes_information": {
            "original_value": "United States",
            "word_addition": "United States of America"
        }
    },
    {
        "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'British' ORDER BY dob DESC LIMIT 1",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "drivers.dob",
            "drivers.forename",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "values_list": [
            "drivers.nationality.british"
        ],
        "original_question": "How old is the youngest Japanese driver? What is his name?",
        "question": "How old is the youngest British England driver? What is his name?",
        "original_SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "changes_information": {
            "original_value": "British",
            "word_addition": "British England"
        }
    },
    {
        "SQL": "SELECT surname FROM drivers WHERE nationality = 'British'",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Italian refers to nationality = 'italian'",
        "values_list": [
            "drivers.nationality.british"
        ],
        "original_question": "Please list the surnames of all the Italian drivers.",
        "question": "Please list the surnames of all the British England drivers.",
        "original_SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
        "changes_information": {
            "original_value": "British",
            "word_addition": "British England"
        }
    },
    {
        "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "pitstops.driverid",
            "pitstops.time",
            "drivers.driverid",
            "drivers.nationality",
            "drivers.dob"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
        "values_list": [
            "drivers.nationality.british"
        ],
        "original_question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
        "question": "List out top 3 British England drivers who were born from 1980-1990 and have the earliest lap time.",
        "original_SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
        "changes_information": {
            "original_value": "British",
            "word_addition": "British England"
        }
    },
    {
        "SQL": "SELECT driverRef FROM drivers WHERE nationality = 'British' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.driverref",
            "drivers.dob",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "values_list": [
            "drivers.nationality.british"
        ],
        "original_question": "Please state the reference name of the oldest German driver.",
        "question": "Please state the reference name of the oldest British England driver.",
        "original_SQL": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "changes_information": {
            "original_value": "British",
            "word_addition": "British England"
        }
    },
    {
        "SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "pitstops.driverid",
            "pitstops.time",
            "drivers.driverid",
            "drivers.nationality",
            "drivers.dob"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
        "values_list": [
            "drivers.nationality.british"
        ],
        "original_question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
        "question": "List out top 10 British England drivers who were born before 1982 and have the latest lap time.",
        "original_SQL": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
        "changes_information": {
            "original_value": "British",
            "word_addition": "British England"
        }
    },
    {
        "SQL": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'British' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
        "tables": [
            "pitstops",
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "pitstops.driverid",
            "pitstops.duration",
            "drivers.driverid",
            "drivers.forename",
            "drivers.nationality",
            "drivers.dob"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "values_list": [
            "drivers.nationality.british"
        ],
        "original_question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
        "question": "List down top 3 British England drivers who has the shortest average pit stop duration and were born between 1980-1985.",
        "original_SQL": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
        "changes_information": {
            "original_value": "British",
            "word_addition": "British England"
        }
    },
    {
        "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "drivers.dob",
            "drivers.forename",
            "drivers.nationality"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
        "values_list": [
            "drivers.nationality.british"
        ],
        "original_question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
        "question": "What is the full name and date of birth of British England drivers born between 1981 and 1991?",
        "original_SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "changes_information": {
            "original_value": "British",
            "word_addition": "British England"
        }
    },
    {
        "SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "tables": [
            "drivers"
        ],
        "columns": [
            "drivers.surname",
            "drivers.forename",
            "drivers.nationality",
            "drivers.url",
            "drivers.dob"
        ],
        "values": [
            {
                "table": "drivers",
                "column": "nationality",
                "value": "British",
                "condition": "="
            }
        ],
        "db_id": "formula_1",
        "source": "bird_dev",
        "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
        "values_list": [
            "drivers.nationality.british"
        ],
        "original_question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
        "question": "Find the full name, Wiki Pedia page link, and date of birth of British England drivers born between 1971 and 1985. List it in descending order of date of birth.",
        "original_SQL": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "changes_information": {
            "original_value": "British",
            "word_addition": "British England"
        }
    },
    {
        "SQL": "SELECT location FROM event WHERE event_name = 'April Meeting'",
        "tables": [
            "event"
        ],
        "columns": [
            "event.location",
            "event.event_name"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "April Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Spring Budget Review' is an event name;",
        "values_list": [
            "event.event_name.spring budget review"
        ],
        "original_question": "Give the location for \"Spring Budget Review\".",
        "question": "Give the location for \"The April Meeting\".",
        "original_SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
        "changes_information": {
            "original_value": "April Meeting",
            "word_addition": "The April Meeting"
        }
    },
    {
        "SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Meeting' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.amount",
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "April Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
        "values_list": [
            "event.event_name.april speaker"
        ],
        "original_question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
        "question": "Calculate the amount budgeted for 'The April Meeting' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
        "original_SQL": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
        "changes_information": {
            "original_value": "April Meeting",
            "word_addition": "The April Meeting"
        }
    },
    {
        "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Meeting'",
        "tables": [
            "budget",
            "event"
        ],
        "columns": [
            "budget.amount",
            "event.event_name",
            "budget.category",
            "budget.link_to_event",
            "event.event_id"
        ],
        "values": [
            {
                "table": "event",
                "column": "event_name",
                "value": "April Meeting",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
        "values_list": [
            "event.event_name.january speaker"
        ],
        "original_question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
        "question": "What category was budgeted for the 'The April Meeting' event and how much was the amount budgeted for that category?",
        "original_SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
        "changes_information": {
            "original_value": "April Meeting",
            "word_addition": "The April Meeting"
        }
    },
    {
        "SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Trinity' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "tables": [
            "frpm"
        ],
        "columns": [
            "frpm.county name",
            "frpm.free meal count (k-12)",
            "frpm.enrollment (k-12)"
        ],
        "values": [
            {
                "table": "frpm",
                "column": "county name",
                "value": "Trinity",
                "condition": "="
            }
        ],
        "db_id": "california_schools",
        "source": "bird_dev",
        "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "values_list": [
            "frpm.county name.trinity"
        ],
        "original_question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
        "question": "What is the highest eligible free rate for K-12 students in the schools in Trinity County County?",
        "original_SQL": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "changes_information": {
            "original_value": "Trinity",
            "word_addition": "Trinity County"
        }
    },
    {
        "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Female' LIMIT 5",
        "tables": [
            "superhero",
            "gender",
            "hero_power",
            "superpower"
        ],
        "columns": [
            "gender.gender",
            "hero_power.power_id",
            "superhero.id",
            "superpower.id",
            "gender.id",
            "superhero.gender_id",
            "hero_power.hero_id",
            "superpower.power_name"
        ],
        "values": [
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
        "values_list": [
            "gender.gender.female"
        ],
        "original_question": "List down at least five superpowers of male superheroes.",
        "question": "List down at least five superpowers of Woman Female superheroes.",
        "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "changes_information": {
            "original_value": "Female",
            "word_addition": "Woman Female"
        }
    },
    {
        "SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
        "tables": [
            "publisher",
            "superhero",
            "gender"
        ],
        "columns": [
            "gender.gender",
            "superhero.hair_colour_id",
            "gender.id",
            "superhero.gender_id",
            "publisher.publisher_name",
            "publisher.id",
            "superhero.eye_colour_id",
            "superhero.skin_colour_id",
            "superhero.publisher_id"
        ],
        "values": [
            {
                "table": "publisher",
                "column": "publisher_name",
                "value": "Dark Horse Comics",
                "condition": "="
            },
            {
                "table": "gender",
                "column": "gender",
                "value": "Female",
                "condition": "="
            }
        ],
        "db_id": "superhero",
        "source": "bird_dev",
        "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
        "values_list": [
            "publisher.publisher_name.dark horse comics",
            "gender.gender.female"
        ],
        "original_question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
        "question": "List the eyes, hair and skin colour of all Woman Female superheroes published by Dark Horse Comics.",
        "original_SQL": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
        "changes_information": {
            "original_value": "Female",
            "word_addition": "Woman Female"
        }
    },
    {
        "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
        "tables": [
            "hangar"
        ],
        "columns": [
            "hangar.plane_name",
            "hangar.location"
        ],
        "values": [
            {
                "table": "hangar",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "hangar.plane_name.f-14 fighter"
        ],
        "original_question": "Where is the plane F-14 Fighter located?",
        "question": "Where is the plane The Piper Cub located?",
        "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
        "changes_information": {
            "original_value": "Piper Cub",
            "word_addition": "The Piper Cub"
        }
    },
    {
        "SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'Piper Cub'",
        "tables": [
            "hangar"
        ],
        "columns": [
            "hangar.plane_name",
            "hangar.location"
        ],
        "values": [
            {
                "table": "hangar",
                "column": "plane_name",
                "value": "Piper Cub",
                "condition": "="
            }
        ],
        "db_id": "pilot_1",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "hangar.plane_name.f-14 fighter"
        ],
        "original_question": "Return the location of the hangar in which F-14 Fighter is located.",
        "question": "Return the location of the hangar in which The Piper Cub is located.",
        "original_SQL": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
        "changes_information": {
            "original_value": "Piper Cub",
            "word_addition": "The Piper Cub"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.rarity",
            "legalities.format",
            "cards.id",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "rarity",
                "value": "mythic",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "gladiator",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "status",
                "value": "Banned",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "values_list": [
            "cards.rarity.mythic",
            "legalities.format.gladiator",
            "legalities.status.banned"
        ],
        "original_question": "List all the mythic rarity print cards banned in gladiator format.",
        "question": "List all the mythic rarity print cards banned in The Gladiator format.",
        "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "changes_information": {
            "original_value": "gladiator",
            "word_addition": "The Gladiator"
        }
    },
    {
        "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'gladiator' AND T1.side IS NULL",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.side",
            "legalities.format",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid",
            "cards.type"
        ],
        "values": [
            {
                "table": "cards",
                "column": "type",
                "value": "Artifact",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "gladiator",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
        "values_list": [
            "cards.type.artifact",
            "legalities.format.gladiator"
        ],
        "original_question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
        "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for The Gladiator play format.",
        "original_SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
        "changes_information": {
            "original_value": "gladiator",
            "word_addition": "The Gladiator"
        }
    },
    {
        "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'gladiator'",
        "tables": [
            "cards",
            "legalities",
            "foreign_data"
        ],
        "columns": [
            "legalities.format",
            "foreign_data.uuid",
            "legalities.uuid",
            "cards.uuid",
            "foreign_data.language"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "format",
                "value": "gladiator",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
        "values_list": [
            "legalities.format.gladiator"
        ],
        "original_question": "List down the uuid for legacy cards and the foreign language of these cards.",
        "question": "List down the uuid for The Gladiator cards and the foreign language of these cards.",
        "original_SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
        "changes_information": {
            "original_value": "gladiator",
            "word_addition": "The Gladiator"
        }
    },
    {
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'gladiator' AND T1.availability = 'paper'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.artist",
            "legalities.format",
            "cards.id",
            "legalities.uuid",
            "cards.uuid",
            "cards.availability"
        ],
        "values": [
            {
                "table": "cards",
                "column": "availability",
                "value": "paper",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "artist",
                "value": "Erica Yang",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "gladiator",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "available in paper refers to availability = 'paper'",
        "values_list": [
            "cards.availability.paper",
            "cards.artist.erica yang",
            "legalities.format.gladiator"
        ],
        "original_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
        "question": "Is there any card from Erica Yang artist in The Gladiator format and available in paper? If so, indicate its ID.",
        "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "changes_information": {
            "original_value": "gladiator",
            "word_addition": "The Gladiator"
        }
    },
    {
        "SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Legal' AND T1.rarity = 'mythic'",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.rarity",
            "legalities.format",
            "cards.id",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "cards",
                "column": "rarity",
                "value": "mythic",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "format",
                "value": "gladiator",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "status",
                "value": "Legal",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
        "values_list": [
            "cards.rarity.mythic",
            "legalities.format.gladiator",
            "legalities.status.legal"
        ],
        "original_question": "List all the mythic rarity print cards banned in gladiator format.",
        "question": "List all the mythic rarity print cards Fully Legal in gladiator format.",
        "original_SQL": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
        "changes_information": {
            "original_value": "Legal",
            "word_addition": "Fully Legal"
        }
    },
    {
        "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "tables": [
            "rulings",
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.types",
            "cards.id",
            "legalities.status",
            "legalities.uuid",
            "cards.uuid",
            "rulings.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Legal",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "types",
                "value": "Creature",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
        "values_list": [
            "legalities.status.legal",
            "cards.types.creature"
        ],
        "original_question": "Lists by ID all Creature-type cards with legal status.",
        "question": "Lists by ID all Creature-type cards with Fully Legal status.",
        "original_SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "changes_information": {
            "original_value": "Legal",
            "word_addition": "Fully Legal"
        }
    },
    {
        "SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "cards.rarity",
            "legalities.format",
            "legalities.status",
            "cards.originalreleasedate",
            "legalities.uuid",
            "cards.uuid"
        ],
        "values": [
            {
                "table": "legalities",
                "column": "status",
                "value": "Legal",
                "condition": "="
            },
            {
                "table": "cards",
                "column": "rarity",
                "value": "mythic",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
        "values_list": [
            "legalities.status.legal",
            "cards.rarity.mythic"
        ],
        "original_question": "When was the oldest mythic card released and what are its legal play formats?",
        "question": "When was the oldest mythic card released and what are its Fully Legal play formats?",
        "original_SQL": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate LIMIT 1",
        "changes_information": {
            "original_value": "Legal",
            "word_addition": "Fully Legal"
        }
    },
    {
        "SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Legal' GROUP BY T1.name, T2.format",
        "tables": [
            "cards",
            "legalities"
        ],
        "columns": [
            "legalities.format",
            "legalities.status",
            "cards.name",
            "legalities.uuid",
            "cards.uuid",
            "cards.edhrecrank"
        ],
        "values": [
            {
                "table": "cards",
                "column": "edhrecrank",
                "value": "1",
                "condition": "="
            },
            {
                "table": "legalities",
                "column": "status",
                "value": "Legal",
                "condition": "="
            }
        ],
        "db_id": "card_games",
        "source": "bird_dev",
        "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
        "values_list": [
            "cards.edhrecrank.1",
            "legalities.status.legal"
        ],
        "original_question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
        "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its Fully Legal play format.",
        "original_SQL": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
        "changes_information": {
            "original_value": "Legal",
            "word_addition": "Fully Legal"
        }
    },
    {
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "major.major_id",
            "member.position",
            "major.college"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "LIKE"
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "Vice President is a position of the Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "Which college is the vice president of the Student_Club from?",
        "question": "Which college is the Club President of the Student_Club from?",
        "original_SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
        "changes_information": {
            "original_value": "President",
            "word_addition": "Club President"
        }
    },
    {
        "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'President'",
        "tables": [
            "member",
            "income"
        ],
        "columns": [
            "income.link_to_member",
            "member.member_id",
            "member.position",
            "income.amount"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "What is the amount of the funds that the Vice President received?",
        "question": "What is the amount of the funds that the Club President received?",
        "original_SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "changes_information": {
            "original_value": "President",
            "word_addition": "Club President"
        }
    },
    {
        "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "tables": [
            "member",
            "zip_code"
        ],
        "columns": [
            "zip_code.zip_code",
            "zip_code.state",
            "zip_code.city",
            "member.position",
            "member.zip"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'President' is a position of Student Club;",
        "values_list": [
            "member.position.president"
        ],
        "original_question": "What city and state did the President of the Student_Club grow up?",
        "question": "What city and state did the Club President of the Student_Club grow up?",
        "original_SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
        "changes_information": {
            "original_value": "President",
            "word_addition": "Club President"
        }
    },
    {
        "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.position",
            "major.major_id",
            "major.major_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'Vice President' is a position of Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "State the major name for the Vice President of the club.",
        "question": "State the major name for the Club President of the club.",
        "original_SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
        "changes_information": {
            "original_value": "President",
            "word_addition": "Club President"
        }
    },
    {
        "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "major.department",
            "major.major_id",
            "member.position",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "'President' is a position of Student Club",
        "values_list": [
            "member.position.president"
        ],
        "original_question": "Which department was the President of the club in?",
        "question": "Which department was the Club President of the club in?",
        "original_SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
        "changes_information": {
            "original_value": "President",
            "word_addition": "Club President"
        }
    },
    {
        "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'President'",
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "member.member_id",
            "member.position",
            "expense.expense_id",
            "expense.expense_description"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "List all the expenses incurred by the vice president.",
        "question": "List all the expenses incurred by the Club President.",
        "original_SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
        "changes_information": {
            "original_value": "President",
            "word_addition": "Club President"
        }
    },
    {
        "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'President'",
        "tables": [
            "member"
        ],
        "columns": [
            "member.email",
            "member.first_name",
            "member.position",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
        "values_list": [
            "member.position.president"
        ],
        "original_question": "Provide the full name and email address of the Student_Club's Secretary.",
        "question": "Provide the full name and email address of the Student_Club's Club President.",
        "original_SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
        "changes_information": {
            "original_value": "President",
            "word_addition": "Club President"
        }
    },
    {
        "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.position",
            "major.major_id",
            "major.major_name",
            "member.link_to_major"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
        "values_list": [
            "member.position.vice president"
        ],
        "original_question": "State the name of major that Vice President has joined.",
        "question": "State the name of major that Club President has joined.",
        "original_SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
        "changes_information": {
            "original_value": "President",
            "word_addition": "Club President"
        }
    },
    {
        "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'President'",
        "tables": [
            "member",
            "major"
        ],
        "columns": [
            "member.link_to_major",
            "member.first_name",
            "major.major_id",
            "member.position",
            "member.last_name"
        ],
        "values": [
            {
                "table": "member",
                "column": "position",
                "value": "President",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "full name refers to first_name, last name",
        "values_list": [
            "member.position.president"
        ],
        "original_question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
        "question": "Write the full name of the club member with the position of 'Club President' and list which college the club member belongs to.",
        "original_SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
        "changes_information": {
            "original_value": "President",
            "word_addition": "Club President"
        }
    },
    {
        "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Large'",
        "tables": [
            "member",
            "expense"
        ],
        "columns": [
            "expense.link_to_member",
            "member.t_shirt_size",
            "expense.expense_description",
            "member.member_id"
        ],
        "values": [
            {
                "table": "member",
                "column": "t_shirt_size",
                "value": "Large",
                "condition": "="
            }
        ],
        "db_id": "student_club",
        "source": "bird_dev",
        "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
        "values_list": [
            "member.t_shirt_size.large"
        ],
        "original_question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
        "question": "What kind of expenses incurred by members who have Size Large in size of tee shirt?",
        "original_SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
        "changes_information": {
            "original_value": "Large",
            "word_addition": "Size Large"
        }
    },
    {
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon"
        ],
        "original_question": "Find the title of the movie that is played in the Odeon theater.",
        "question": "Find the title of the movie that is played in the The Odeon theater.",
        "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "changes_information": {
            "original_value": "Odeon",
            "word_addition": "The Odeon"
        }
    },
    {
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon"
        ],
        "original_question": "What are the movie titles for ones that are played in the Odeon theater?",
        "question": "What are the movie titles for ones that are played in the The Odeon theater?",
        "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "changes_information": {
            "original_value": "Odeon",
            "word_addition": "The Odeon"
        }
    },
    {
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            },
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon",
            "movietheaters.name.odeon"
        ],
        "original_question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
        "question": "Find the name of the movies that are played in either cinema Odeon or The Odeon.",
        "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "changes_information": {
            "original_value": "Odeon",
            "word_addition": "The Odeon"
        }
    },
    {
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            },
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon",
            "movietheaters.name.odeon"
        ],
        "original_question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
        "question": "What are the titles of all the movies that played at the Odeon or The Odeon theater?",
        "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
        "changes_information": {
            "original_value": "Odeon",
            "word_addition": "The Odeon"
        }
    },
    {
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            },
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon",
            "movietheaters.name.odeon"
        ],
        "original_question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
        "question": "Find the name of the movie that is on in both Odeon and The Odeon theaters.",
        "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "changes_information": {
            "original_value": "Odeon",
            "word_addition": "The Odeon"
        }
    },
    {
        "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
        "tables": [
            "movietheaters",
            "movies"
        ],
        "columns": [
            "movies.code",
            "movietheaters.movie",
            "movies.title",
            "movietheaters.name"
        ],
        "values": [
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            },
            {
                "table": "movietheaters",
                "column": "name",
                "value": "Odeon",
                "condition": "="
            }
        ],
        "db_id": "movie_2",
        "source": "spider_test",
        "evidence": "",
        "values_list": [
            "movietheaters.name.odeon",
            "movietheaters.name.odeon"
        ],
        "original_question": "What movie is playing at both the Odeon and Imperial theater?",
        "question": "What movie is playing at both the Odeon and The Odeon theater?",
        "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
        "changes_information": {
            "original_value": "Odeon",
            "word_addition": "The Odeon"
        }
    }
]