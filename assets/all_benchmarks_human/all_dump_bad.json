[
  {
    "SQL": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Great Britain' OR T1.nation  =  'Great Britain'",
    "tables": [
      "cyclists_own_bikes",
      "cyclist",
      "bike"
    ],
    "columns": [
      "bike.id",
      "cyclist.nation",
      "bike.product_name",
      "cyclists_own_bikes.bike_id",
      "cyclist.id",
      "cyclists_own_bikes.cyclist_id"
    ],
    "values": [
      {
        "table": "cyclist",
        "column": "nation",
        "value": "Great Britain",
        "condition": "="
      },
      {
        "table": "cyclist",
        "column": "nation",
        "value": "Great Britain",
        "condition": "="
      }
    ],
    "db_id": "bike_racing",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "cyclist.nation.great_britain",
      "cyclist.nation.great britain"
    ],
    "original_question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "question": "What are the distinct product names of bikes owned by cyclists from 'GB' or cyclists from 'Great Britain'?",
    "original_SQL": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
    "changes_information": {
      "original_value": "Great Britain",
      "abbreviation_acronym": "GB"
    },
    "new_question_correct_value": "What are the distinct product names of bikes owned by cyclists from 'Great Britain' or cyclists from 'Great Britain'?"
  },
  {
    "SQL": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
    "tables": [
      "major",
      "major_ranking",
      "university"
    ],
    "columns": [
      "major_ranking.university_id",
      "major_ranking.major_id",
      "university.university_name",
      "major.major_id",
      "major.major_name",
      "university.university_id"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Urban Education",
        "condition": "="
      },
      {
        "table": "major",
        "column": "major_name",
        "value": "Urban Education",
        "condition": "="
      }
    ],
    "db_id": "university_rank",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "major.major_name.urban_education",
      "major.major_name.urban education"
    ],
    "original_question": "Show all university names with both major Accounting and major Urban Education.",
    "question": "Show all university names with both major Urban Educ and major Urban Education.",
    "original_SQL": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
    "changes_information": {
      "original_value": "Urban Education",
      "clipping": "Urban Educ"
    },
    "new_question_correct_value": "Show all university names with both major Urban Education and major Urban Education."
  },
  {
    "SQL": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
    "tables": [
      "major",
      "major_ranking",
      "university"
    ],
    "columns": [
      "major_ranking.university_id",
      "major_ranking.major_id",
      "university.university_name",
      "major.major_id",
      "major.major_name",
      "university.university_id"
    ],
    "values": [
      {
        "table": "major",
        "column": "major_name",
        "value": "Urban Education",
        "condition": "="
      },
      {
        "table": "major",
        "column": "major_name",
        "value": "Urban Education",
        "condition": "="
      }
    ],
    "db_id": "university_rank",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "major.major_name.urban_education",
      "major.major_name.urban education"
    ],
    "original_question": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "question": "What are the names of all universities that have both Urban Educ and Urban Education majors?",
    "original_SQL": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
    "changes_information": {
      "original_value": "Urban Education",
      "clipping": "Urban Educ"
    },
    "new_question_correct_value": "What are the names of all universities that have both Urban Education and Urban Education majors?"
  },
  {
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Photosensitivities'",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.id",
      "examination.diagnosis",
      "examination.examination date"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Photosensitivities",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "values_list": [
      "examination.diagnosis.photosensitivities"
    ],
    "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "question": "Lists all patients by ID who were diagnosed with Sensitivity to photos's and had their exams between 01/01/197 and 12/31/1997.",
    "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "changes_information": {
      "original_value": "Photosensitivities",
      "paraphrasing": "Sensitivity to photos"
    },
    "new_question_correct_value": "Lists all patients by ID who were diagnosed with Photosensitivities's and had their exams between 01/01/197 and 12/31/1997."
  },
  {
    "SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' OR T3.pettype  =  'dog'",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.dog"
    ],
    "original_question": "Find the first name of students who have cat or dog pet.",
    "question": "Find the first name of students who have dogs or dog pet.",
    "original_SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "changes_information": {
      "original_value": "dog",
      "singular_plural_change": "dogs"
    },
    "new_question_correct_value": "Find the first name of students who have dog or dog pet."
  },
  {
    "SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' OR T3.pettype  =  'dog'",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.dog"
    ],
    "original_question": "What are the first names of every student who has a cat or dog as a pet?",
    "question": "What are the first names of every student who has a dogs or dog as a pet?",
    "original_SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "changes_information": {
      "original_value": "dog",
      "singular_plural_change": "dogs"
    },
    "new_question_correct_value": "What are the first names of every student who has a dog or dog as a pet?"
  },
  {
    "SQL": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.dog"
    ],
    "original_question": "Find the first name of students who have both cat and dog pets .",
    "question": "Find the first name of students who have both dogs and dog pets .",
    "original_SQL": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
    "changes_information": {
      "original_value": "dog",
      "singular_plural_change": "dogs"
    },
    "new_question_correct_value": "Find the first name of students who have both dog and dog pets ."
  },
  {
    "SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Rocks'",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.rocks"
    ],
    "original_question": "Find the warehouses which store contents Rocks or Scissors.",
    "question": "Find the warehouses which store contents Rocks or stones.",
    "original_SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    },
    "new_question_correct_value": "Find the warehouses which store contents Rocks or Rocks."
  },
  {
    "SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Rocks'",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Rocks",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.rocks",
      "boxes.contents.rocks"
    ],
    "original_question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "question": "What are the distinct warehouses that have boxes with Rocks or stones as contents?",
    "original_SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
    "changes_information": {
      "original_value": "Rocks",
      "synonym": "stones"
    },
    "new_question_correct_value": "What are the distinct warehouses that have boxes with Rocks or Rocks as contents?"
  },
  {
    "SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' OR T3.pettype  =  'dog'",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.dog"
    ],
    "original_question": "Find the first name of students who have cat or dog pet.",
    "question": "Find the first name of students who have canine or dog pet.",
    "original_SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "changes_information": {
      "original_value": "dog",
      "synonym": "canine"
    },
    "new_question_correct_value": "Find the first name of students who have dog or dog pet."
  },
  {
    "SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' OR T3.pettype  =  'dog'",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.dog"
    ],
    "original_question": "What are the first names of every student who has a cat or dog as a pet?",
    "question": "What are the first names of every student who has a canine or dog as a pet?",
    "original_SQL": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
    "changes_information": {
      "original_value": "dog",
      "synonym": "canine"
    },
    "new_question_correct_value": "What are the first names of every student who has a dog or dog as a pet?"
  },
  {
    "SQL": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
    "tables": [
      "has_pet",
      "pets",
      "student"
    ],
    "columns": [
      "pets.petid",
      "has_pet.petid",
      "student.fname",
      "has_pet.stuid",
      "pets.pettype",
      "student.stuid"
    ],
    "values": [
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      },
      {
        "table": "pets",
        "column": "pettype",
        "value": "dog",
        "condition": "="
      }
    ],
    "db_id": "pets_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "pets.pettype.dog",
      "pets.pettype.dog"
    ],
    "original_question": "Find the first name of students who have both cat and dog pets .",
    "question": "Find the first name of students who have both canine and dog pets .",
    "original_SQL": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
    "changes_information": {
      "original_value": "dog",
      "synonym": "canine"
    },
    "new_question_correct_value": "Find the first name of students who have both dog and dog pets ."
  },
  {
    "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Moses Magnum'",
    "tables": [
      "superhero",
      "hero_power",
      "superpower"
    ],
    "columns": [
      "hero_power.power_id",
      "superhero.id",
      "superpower.id",
      "superhero.full_name",
      "hero_power.hero_id",
      "superpower.power_name"
    ],
    "values": [
      {
        "table": "superhero",
        "column": "full_name",
        "value": "Moses Magnum",
        "condition": "="
      }
    ],
    "db_id": "superhero",
    "source": "bird_dev",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "values_list": [
      "superhero.full_name.helen parr"
    ],
    "original_question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "question": "What is the superpowers of the superhero has Moses Magum as their full name?",
    "original_SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "changes_information": {
      "original_value": "Moses Magnum",
      "typo_deletion": "Moses Magum"
    },
    "new_question_correct_value": "What is the superpowers of the superhero has Moses Magnum as their full name?"
  },
  {
    "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') GROUP BY T1.artist",
    "tables": [
      "sets",
      "cards"
    ],
    "columns": [
      "cards.artist",
      "sets.name",
      "cards.setcode",
      "sets.code"
    ],
    "values": [
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      },
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Chippy",
        "condition": "="
      },
      {
        "table": "sets",
        "column": "name",
        "value": "Coldsnap",
        "condition": "="
      },
      {
        "table": "cards",
        "column": "artist",
        "value": "Aaron Miller",
        "condition": "="
      }
    ],
    "db_id": "card_games",
    "source": "bird_dev",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
    "values_list": [
      "sets.name.coldsnap",
      "cards.artist.jeremy jarvis",
      "sets.name.coldsnap",
      "cards.artist.chippy",
      "sets.name.coldsnap",
      "cards.artist.aaron miller"
    ],
    "original_question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "question": "Which of these artists have designed a card in the set Coldsnap, Chip py, Aaron Miller or Chippy?",
    "original_SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "changes_information": {
      "original_value": "Chippy",
      "typo_space_addition": "Chip py"
    },
    "new_question_correct_value": "Which of these artists have designed a card in the set Coldsnap, Chippy, Aaron Miller or Chippy?"
  },
  {
    "SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Photosensitivities'",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.id",
      "examination.diagnosis",
      "examination.examination date"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "Photosensitivities",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "values_list": [
      "examination.diagnosis.photosensitivities"
    ],
    "original_question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "question": "Lists all patients by ID who were diagnosed with Photo sensitivities's and had their exams between 01/01/197 and 12/31/1997.",
    "original_SQL": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "changes_information": {
      "original_value": "Photosensitivities",
      "typo_space_addition": "Photo sensitivities"
    },
    "new_question_correct_value": "Lists all patients by ID who were diagnosed with Photosensitivities's and had their exams between 01/01/197 and 12/31/1997."
  },
  {
    "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'Inactive'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "member.link_to_major",
      "major.major_id",
      "member.position",
      "major.college"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Inactive",
        "condition": "LIKE"
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "Vice President is a position of the Student Club",
    "values_list": [
      "member.position.vice president"
    ],
    "original_question": "Which college is the vice president of the Student_Club from?",
    "question": "Which college is the In active of the Student_Club from?",
    "original_SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "changes_information": {
      "original_value": "Inactive",
      "typo_space_addition": "In active"
    },
    "new_question_correct_value": "Which college is the Inactive of the Student_Club from?"
  },
  {
    "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'Inactive'",
    "tables": [
      "member",
      "zip_code"
    ],
    "columns": [
      "zip_code.zip_code",
      "zip_code.state",
      "zip_code.city",
      "member.position",
      "member.zip"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Inactive",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club;",
    "values_list": [
      "member.position.inactive"
    ],
    "original_question": "What city and state did the President of the Student_Club grow up?",
    "question": "What city and state did the In active of the Student_Club grow up?",
    "original_SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "Inactive",
      "typo_space_addition": "In active"
    },
    "new_question_correct_value": "What city and state did the Inactive of the Student_Club grow up?"
  },
  {
    "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Inactive'",
    "tables": [
      "member",
      "major"
    ],
    "columns": [
      "major.department",
      "major.major_id",
      "member.position",
      "member.link_to_major"
    ],
    "values": [
      {
        "table": "member",
        "column": "position",
        "value": "Inactive",
        "condition": "="
      }
    ],
    "db_id": "student_club",
    "source": "bird_dev",
    "evidence": "'President' is a position of Student Club",
    "values_list": [
      "member.position.inactive"
    ],
    "original_question": "Which department was the President of the club in?",
    "question": "Which department was the In active of the club in?",
    "original_SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "changes_information": {
      "original_value": "Inactive",
      "typo_space_addition": "In active"
    },
    "new_question_correct_value": "Which department was the Inactive of the club in?"
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and BenJones?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Ben Jones",
      "typo_space_removal": "BenJones"
    },
    "new_question_correct_value": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Ben Jones?"
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by BenJones?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Ben Jones",
      "typo_space_removal": "BenJones"
    },
    "new_question_correct_value": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Ben Jones?"
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'Piper Cub'",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      },
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub",
      "pilotskills.plane_name.f-14 fighter"
    ],
    "original_question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "question": "Find the pilots who have either plane Piper Cub or plane PiperCub.",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "Find the pilots who have either plane Piper Cub or plane Piper Cub."
  },
  {
    "SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'Piper Cub'",
    "tables": [
      "pilotskills"
    ],
    "columns": [
      "pilotskills.plane_name",
      "pilotskills.pilot_name"
    ],
    "values": [
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      },
      {
        "table": "pilotskills",
        "column": "plane_name",
        "value": "Piper Cub",
        "condition": "="
      }
    ],
    "db_id": "pilot_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "pilotskills.plane_name.piper cub",
      "pilotskills.plane_name.f-14 fighter"
    ],
    "original_question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "question": "What are the names of pilots who have either the Piper Cub or the PiperCub?",
    "original_SQL": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
    "changes_information": {
      "original_value": "Piper Cub",
      "typo_space_removal": "PiperCub"
    },
    "new_question_correct_value": "What are the names of pilots who have either the Piper Cub or the Piper Cub?"
  },
  {
    "SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Scissors' OR CONTENTS  =  'Scissors'",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.scissors",
      "boxes.contents.scissors"
    ],
    "original_question": "Find the warehouses which store contents Rocks or Scissors.",
    "question": "Find the warehouses which store contents Scissorz or Scissors.",
    "original_SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
    "changes_information": {
      "original_value": "Scissors",
      "typo_substitution": "Scissorz"
    },
    "new_question_correct_value": "Find the warehouses which store contents Scissors or Scissors."
  },
  {
    "SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Scissors' OR CONTENTS  =  'Scissors'",
    "tables": [
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.scissors",
      "boxes.contents.scissors"
    ],
    "original_question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "question": "What are the distinct warehouses that have boxes with Scissorz or Scissors as contents?",
    "original_SQL": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
    "changes_information": {
      "original_value": "Scissors",
      "typo_substitution": "Scissorz"
    },
    "new_question_correct_value": "What are the distinct warehouses that have boxes with Scissors or Scissors as contents?"
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.scissors",
      "boxes.contents.scissors"
    ],
    "original_question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "question": "Find the location of the warehouses which store contents Scissorz and Scissors.",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Scissors",
      "typo_substitution": "Scissorz"
    },
    "new_question_correct_value": "Find the location of the warehouses which store contents Scissors and Scissors."
  },
  {
    "SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "tables": [
      "warehouses",
      "boxes"
    ],
    "columns": [
      "boxes.warehouse",
      "warehouses.code",
      "warehouses.location",
      "boxes.contents"
    ],
    "values": [
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      },
      {
        "table": "boxes",
        "column": "contents",
        "value": "Scissors",
        "condition": "="
      }
    ],
    "db_id": "warehouse_1",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "boxes.contents.scissors",
      "boxes.contents.scissors"
    ],
    "original_question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "question": "What are the locations of warehouses in which boxes that contain Scissorz and `Scissors` are kept?",
    "original_SQL": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "changes_information": {
      "original_value": "Scissors",
      "typo_substitution": "Scissorz"
    },
    "new_question_correct_value": "What are the locations of warehouses in which boxes that contain Scissors and `Scissors` are kept?"
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Ben Jomes?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Ben Jones",
      "typo_substitution": "Ben Jomes"
    },
    "new_question_correct_value": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Ben Jones?"
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Ben Jomes?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Ben Jones",
      "typo_substitution": "Ben Jomes"
    },
    "new_question_correct_value": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Ben Jones?"
  },
  {
    "SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Ransom';",
    "tables": [
      "document_objects",
      "document_subset_members"
    ],
    "columns": [
      "document_subset_members.related_document_object_id",
      "document_objects.document_object_id",
      "document_objects.owner"
    ],
    "values": [
      {
        "table": "document_objects",
        "column": "owner",
        "value": "Ransom",
        "condition": "="
      }
    ],
    "db_id": "cre_Doc_and_collections",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "document_objects.owner.ransom"
    ],
    "original_question": "List all owner of documents that is related to documents owned by Braeden.",
    "question": "List all owner of documents that is related to documents owned by Ransmo.",
    "original_SQL": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "changes_information": {
      "original_value": "Ransom",
      "typo_transposition": "Ransmo"
    },
    "new_question_correct_value": "List all owner of documents that is related to documents owned by Ransom."
  },
  {
    "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'collagen disease' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "tables": [
      "examination"
    ],
    "columns": [
      "examination.symptoms",
      "examination.diagnosis"
    ],
    "values": [
      {
        "table": "examination",
        "column": "diagnosis",
        "value": "collagen disease",
        "condition": "="
      }
    ],
    "db_id": "thrombosis_prediction",
    "source": "bird_dev",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "values_list": [
      "examination.diagnosis.collagen_disease"
    ],
    "original_question": "What is the most common sign of patients with SLE disease?",
    "question": "What is the most common sign of patients with colalgen disease disease?",
    "original_SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "changes_information": {
      "original_value": "collagen disease",
      "typo_transposition": "colalgen disease"
    },
    "new_question_correct_value": "What is the most common sign of patients with collagen disease disease?"
  },
  {
    "SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
    "tables": [
      "author",
      "book"
    ],
    "columns": [
      "book.book_series",
      "author.author_id",
      "author.name",
      "book.author_id"
    ],
    "values": [
      {
        "table": "book",
        "column": "book_series",
        "value": "LT",
        "condition": "="
      },
      {
        "table": "book",
        "column": "book_series",
        "value": "LT",
        "condition": "="
      }
    ],
    "db_id": "book_press",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "book.book_series.lt",
      "book.book_series.lt"
    ],
    "original_question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "question": "Find the name of authors who publish their books in both \"The LT\" and \"LT\" series.",
    "original_SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
    "changes_information": {
      "original_value": "LT",
      "word_addition": "The LT"
    },
    "new_question_correct_value": "Find the name of authors who publish their books in both \"LT\" and \"LT\" series."
  },
  {
    "SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
    "tables": [
      "author",
      "book"
    ],
    "columns": [
      "book.book_series",
      "author.author_id",
      "author.name",
      "book.author_id"
    ],
    "values": [
      {
        "table": "book",
        "column": "book_series",
        "value": "LT",
        "condition": "="
      },
      {
        "table": "book",
        "column": "book_series",
        "value": "LT",
        "condition": "="
      }
    ],
    "db_id": "book_press",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "book.book_series.lt",
      "book.book_series.lt"
    ],
    "original_question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "question": "Which authors publish books in both \"The LT\" and \"LT\" series? Give me the author names.",
    "original_SQL": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
    "changes_information": {
      "original_value": "LT",
      "word_addition": "The LT"
    },
    "new_question_correct_value": "Which authors publish books in both \"LT\" and \"LT\" series? Give me the author names."
  },
  {
    "SQL": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins'",
    "tables": [
      "cyclists_own_bikes",
      "cyclist",
      "bike"
    ],
    "columns": [
      "bike.id",
      "cyclist.name",
      "bike.product_name",
      "cyclists_own_bikes.bike_id",
      "bike.price",
      "cyclist.id",
      "cyclists_own_bikes.cyclist_id"
    ],
    "values": [
      {
        "table": "cyclist",
        "column": "name",
        "value": "Bradley Wiggins",
        "condition": "="
      },
      {
        "table": "cyclist",
        "column": "name",
        "value": "Bradley Wiggins",
        "condition": "="
      }
    ],
    "db_id": "bike_racing",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "cyclist.name.bradley wiggins",
      "cyclist.name.antonio tauler"
    ],
    "original_question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Sir Bradley Wiggins'.",
    "original_SQL": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
    "changes_information": {
      "original_value": "Bradley Wiggins",
      "word_addition": "Sir Bradley Wiggins"
    },
    "new_question_correct_value": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Bradley Wiggins'."
  },
  {
    "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Odeon'",
    "tables": [
      "movietheaters",
      "movies"
    ],
    "columns": [
      "movies.code",
      "movietheaters.movie",
      "movies.title",
      "movietheaters.name"
    ],
    "values": [
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      },
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      }
    ],
    "db_id": "movie_2",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "movietheaters.name.odeon",
      "movietheaters.name.odeon"
    ],
    "original_question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "question": "Find the name of the movies that are played in either cinema Odeon or The Odeon.",
    "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
    "changes_information": {
      "original_value": "Odeon",
      "word_addition": "The Odeon"
    },
    "new_question_correct_value": "Find the name of the movies that are played in either cinema Odeon or Odeon."
  },
  {
    "SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "tables": [
      "movietheaters",
      "movies"
    ],
    "columns": [
      "movies.code",
      "movietheaters.movie",
      "movies.title",
      "movietheaters.name"
    ],
    "values": [
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      },
      {
        "table": "movietheaters",
        "column": "name",
        "value": "Odeon",
        "condition": "="
      }
    ],
    "db_id": "movie_2",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "movietheaters.name.odeon",
      "movietheaters.name.odeon"
    ],
    "original_question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "question": "Find the name of the movie that is on in both Odeon and The Odeon theaters.",
    "original_SQL": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
    "changes_information": {
      "original_value": "Odeon",
      "word_addition": "The Odeon"
    },
    "new_question_correct_value": "Find the name of the movie that is on in both Odeon and Odeon theaters."
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
    "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Jones Ben?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Ben Jones",
      "word_order_change": "Jones Ben"
    },
    "new_question_correct_value": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Ben Jones?"
  },
  {
    "SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "tables": [
      "tv_channel",
      "cartoon"
    ],
    "columns": [
      "cartoon.channel",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "cartoon.directed_by"
    ],
    "values": [
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      },
      {
        "table": "cartoon",
        "column": "directed_by",
        "value": "Ben Jones",
        "condition": "="
      }
    ],
    "db_id": "tvshow",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "cartoon.directed_by.michael chang",
      "cartoon.directed_by.ben jones"
    ],
    "original_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
    "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Jones Ben?",
    "original_SQL": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
    "changes_information": {
      "original_value": "Ben Jones",
      "word_order_change": "Jones Ben"
    },
    "new_question_correct_value": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Ben Jones?"
  },
  {
    "SQL": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
    "tables": [
      "votes",
      "contestants",
      "area_code_state"
    ],
    "columns": [
      "votes.contestant_number",
      "contestants.contestant_name",
      "area_code_state.state",
      "area_code_state.area_code",
      "votes.state",
      "contestants.contestant_number"
    ],
    "values": [
      {
        "table": "contestants",
        "column": "contestant_name",
        "value": "Kelly Clauss",
        "condition": "="
      },
      {
        "table": "contestants",
        "column": "contestant_name",
        "value": "Kelly Clauss",
        "condition": "="
      }
    ],
    "db_id": "voter_1",
    "source": "spider_dev",
    "evidence": "",
    "values_list": [
      "contestants.contestant_name.tabatha gehling",
      "contestants.contestant_name.kelly clauss"
    ],
    "original_question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
    "question": "List the area codes in which voters voted both for the contestant 'Clauss Kelly' and the contestant 'Kelly Clauss'.",
    "original_SQL": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
    "changes_information": {
      "original_value": "Kelly Clauss",
      "word_order_change": "Clauss Kelly"
    },
    "new_question_correct_value": "List the area codes in which voters voted both for the contestant 'Kelly Clauss' and the contestant 'Kelly Clauss'."
  },
  {
    "SQL": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins'",
    "tables": [
      "cyclists_own_bikes",
      "cyclist",
      "bike"
    ],
    "columns": [
      "bike.id",
      "cyclist.name",
      "bike.product_name",
      "cyclists_own_bikes.bike_id",
      "bike.price",
      "cyclist.id",
      "cyclists_own_bikes.cyclist_id"
    ],
    "values": [
      {
        "table": "cyclist",
        "column": "name",
        "value": "Bradley Wiggins",
        "condition": "="
      },
      {
        "table": "cyclist",
        "column": "name",
        "value": "Bradley Wiggins",
        "condition": "="
      }
    ],
    "db_id": "bike_racing",
    "source": "spider_test",
    "evidence": "",
    "values_list": [
      "cyclist.name.bradley wiggins",
      "cyclist.name.antonio tauler"
    ],
    "original_question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Wiggins Bradley'.",
    "original_SQL": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
    "changes_information": {
      "original_value": "Bradley Wiggins",
      "word_order_change": "Wiggins Bradley"
    },
    "new_question_correct_value": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Bradley Wiggins'."
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "question": "For the user whose display name is \"blue & grey\", what is his/her badge's name?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "For the user whose display name is \"blue and grey\", what is his/her badge's name?"
  },
  {
    "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "badges.userid",
      "users.displayname",
      "badges.name"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "What is the badge name that user 'SilentGhost' obtained?",
    "question": "What is the badge name that user 'blue & grey' obtained?",
    "original_SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "What is the badge name that user 'blue and grey' obtained?"
  },
  {
    "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'blue and grey'",
    "tables": [
      "users",
      "comments"
    ],
    "columns": [
      "comments.text",
      "users.id",
      "comments.userid",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
    "values_list": [
      "users.displayname.a lion"
    ],
    "original_question": "Write all comments made by user 'A Lion.'",
    "question": "Write all comments made by user 'blue & grey.'",
    "original_SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "Write all comments made by user 'blue and grey.'"
  },
  {
    "SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'blue and grey'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "badges.userid",
      "users.id",
      "users.displayname",
      "users.creationdate",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "question": "How long did it take the user, known by his or her display name 'blue & grey' to get the badge? Count from the date the user's account was created.",
    "original_SQL": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "How long did it take the user, known by his or her display name 'blue and grey' to get the badge? Count from the date the user's account was created."
  },
  {
    "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'blue and grey'",
    "tables": [
      "users"
    ],
    "columns": [
      "users.creationdate",
      "users.displayname"
    ],
    "values": [
      {
        "table": "users",
        "column": "displayname",
        "value": "blue and grey",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "values_list": [
      "users.displayname.blue_and_grey"
    ],
    "original_question": "When did the user known as 'IrishStat' create his or her account?",
    "question": "When did the user known as 'blue & grey' create his or her account?",
    "original_SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "changes_information": {
      "original_value": "blue and grey",
      "word_to_symbol_change": "blue & grey"
    },
    "new_question_correct_value": "When did the user known as 'blue and grey' create his or her account?"
  },
  {
    "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.id",
      "users.location",
      "badges.userid",
      "badges.date"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Bizarre and beautiful world",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "values_list": [
      "users.location.rochester, ny"
    ],
    "original_question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "question": "List out the dates that users who are located in Bizarre & beautiful world obtained their badges?",
    "original_SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "changes_information": {
      "original_value": "Bizarre and beautiful world",
      "word_to_symbol_change": "Bizarre & beautiful world"
    },
    "new_question_correct_value": "List out the dates that users who are located in Bizarre and beautiful world obtained their badges?"
  },
  {
    "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Bizarre and beautiful world'",
    "tables": [
      "badges",
      "users"
    ],
    "columns": [
      "users.age",
      "users.id",
      "users.location",
      "badges.userid"
    ],
    "values": [
      {
        "table": "users",
        "column": "location",
        "value": "Bizarre and beautiful world",
        "condition": "="
      }
    ],
    "db_id": "codebase_community",
    "source": "bird_dev",
    "evidence": "\"Vienna, Austria\" is the Location",
    "values_list": [
      "users.location.vienna, austria"
    ],
    "original_question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "question": "List out the age of users who located in Bizarre & beautiful world obtained the badge?",
    "original_SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "changes_information": {
      "original_value": "Bizarre and beautiful world",
      "word_to_symbol_change": "Bizarre & beautiful world"
    },
    "new_question_correct_value": "List out the age of users who located in Bizarre and beautiful world obtained the badge?"
  }
]